"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const ava_1 = __importDefault(require("ava"));
const sinon_1 = __importDefault(require("sinon"));
const ibcclient_1 = require("../../../lib/ibcclient");
const testutils_1 = require("../../../lib/testutils");
const balances_1 = require("./balances");
const fsReadFileSync = sinon_1.default.stub(fs_1.default, 'readFileSync');
const mnemonic = 'accident harvest weasel surge source return tag supreme sorry isolate wave mammal';
function buildIbcArgs(rpc) {
    return [rpc, sinon_1.default.match.any, sinon_1.default.match.any, sinon_1.default.match.any];
}
const ibcClient = sinon_1.default.stub(ibcclient_1.IbcClient, 'connectWithSigner');
const musselnetArgs = buildIbcArgs('https://rpc.musselnet.cosmwasm.com:443');
const localWasmArgs = buildIbcArgs('http://localhost:26659');
const localSimappArgs = buildIbcArgs('http://localhost:26658');
async function createFakeIbcClient(amount, denom) {
    return {
        query: {
            bank: {
                unverified: {
                    balance: sinon_1.default.fake.returns({ amount, denom }),
                },
            },
        },
    };
}
ava_1.default.beforeEach(() => {
    sinon_1.default.reset();
});
const registryYaml = `
version: 1

chains:
  musselnet:
    chain_id: musselnet-4
    # bech32 prefix for addresses
    prefix: wasm
    # this determines the gas payments we make (and defines the fee token)
    gas_price: 0.025umayo
    # the path we use to derive the private key from the mnemonic
    hd_path: m/44'/108'/0'/1'
    # you can include multiple RPC endpoints and it will rotate through them if
    # one is down
    rpc:
      - https://rpc.musselnet.cosmwasm.com:443
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    hd_path: m/44'/108'/0'/2'
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    hd_path: m/44'/108'/0'/3'
    rpc:
      - http://localhost:26658`;
ava_1.default('lists chains with non-zero balance', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        mnemonic,
    };
    fsReadFileSync.returns(registryYaml);
    ibcClient
        .withArgs(...musselnetArgs)
        .returns(createFakeIbcClient('1', 'musselnetdenom'))
        .withArgs(...localWasmArgs)
        .returns(createFakeIbcClient('2', 'wasmdenom'))
        .withArgs(...localSimappArgs)
        .returns(createFakeIbcClient('3', 'simappdenom'));
    await balances_1.run(options, logger);
    t.assert(fsReadFileSync.calledOnce);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithExactly([
        'musselnet: 1musselnetdenom',
        'local_wasm: 2wasmdenom',
        'local_simapp: 3simappdenom',
    ].join(os_1.default.EOL)));
});
ava_1.default('omits chains with zero balance', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        mnemonic,
    };
    fsReadFileSync.returns(registryYaml);
    ibcClient
        .withArgs(...musselnetArgs)
        .returns(createFakeIbcClient('1', 'musselnetdenom'))
        .withArgs(...localWasmArgs)
        .returns(createFakeIbcClient('0', 'wasmdenom'))
        .withArgs(...localSimappArgs)
        .returns(createFakeIbcClient('3', 'simappdenom'));
    await balances_1.run(options, logger);
    t.assert(fsReadFileSync.calledOnce);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithExactly(['musselnet: 1musselnetdenom', 'local_simapp: 3simappdenom'].join(os_1.default.EOL)));
});
ava_1.default('informs when there are no funds on any balance', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        mnemonic,
    };
    fsReadFileSync.returns(registryYaml);
    ibcClient
        .withArgs(...musselnetArgs)
        .returns(createFakeIbcClient('0', 'musselnetdenom'))
        .withArgs(...localWasmArgs)
        .returns(createFakeIbcClient('0', 'wasmdenom'))
        .withArgs(...localSimappArgs)
        .returns(createFakeIbcClient('0', 'simappdenom'));
    await balances_1.run(options, logger);
    t.assert(fsReadFileSync.calledOnce);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithMatch(/No funds/));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZXMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2JhbGFuY2VzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsNENBQW9CO0FBRXBCLDhDQUF1QjtBQUN2QixrREFBMEI7QUFHMUIsc0RBQW1EO0FBQ25ELHNEQUFvRDtBQUVwRCx5Q0FBaUM7QUFHakMsTUFBTSxjQUFjLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxZQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdEQsTUFBTSxRQUFRLEdBQ1osbUZBQW1GLENBQUM7QUFFdEYsU0FBUyxZQUFZLENBQUMsR0FBVztJQUMvQixPQUFPLENBQUMsR0FBRyxFQUFFLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFVLENBQUM7QUFDM0UsQ0FBQztBQUNELE1BQU0sU0FBUyxHQUFHLGVBQUssQ0FBQyxJQUFJLENBQUMscUJBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzdELE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO0FBQzdFLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQzdELE1BQU0sZUFBZSxHQUFHLFlBQVksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRS9ELEtBQUssVUFBVSxtQkFBbUIsQ0FBQyxNQUFjLEVBQUUsS0FBYTtJQUM5RCxPQUFRO1FBQ04sS0FBSyxFQUFFO1lBQ0wsSUFBSSxFQUFFO2dCQUNKLFVBQVUsRUFBRTtvQkFDVixPQUFPLEVBQUUsZUFBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7aUJBQy9D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