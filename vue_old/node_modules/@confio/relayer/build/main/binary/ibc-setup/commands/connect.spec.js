"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("@cosmjs/utils");
const ava_1 = __importDefault(require("ava"));
const sinon_1 = __importDefault(require("sinon"));
const testutils_1 = require("../../../lib/testutils");
const constants_1 = require("../../constants");
const signing_client_1 = require("../../utils/signing-client");
const chains_1 = require("./chains");
const connect_1 = require("./connect");
const fsWriteFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
const fsReadFileSync = sinon_1.default.stub(fs_1.default, 'readFileSync');
const mnemonic = 'enlist hip relief stomach skate base shallow young switch frequent cry park';
const registryYaml = `
version: 1

chains:
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    rpc:
      - http://localhost:26658`;
const app = {
    src: 'local_wasm',
    dest: 'local_simapp',
};
ava_1.default.beforeEach(() => {
    sinon_1.default.reset();
});
ava_1.default.serial('connects two chains', async (t) => {
    var _a, _b;
    const logger = new testutils_1.TestLogger();
    const ibcClientSimapp = await signing_client_1.signingClient(chains_1.simappChain, mnemonic);
    const ibcClientWasm = await signing_client_1.signingClient(chains_1.wasmdChain, mnemonic);
    const allConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const allConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const options = {
        home: '/home/user',
        mnemonic,
        src: 'local_simapp',
        dest: 'local_wasm',
    };
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await connect_1.run(options, app, logger);
    const args = fsWriteFileSync.getCall(0).args;
    const contentsRegexp = new RegExp(`src: local_wasm
dest: local_simapp
srcConnection: .+
destConnection: .+
`);
    t.assert(fsWriteFileSync.calledOnce);
    t.is(args[0], path_1.default.join(options.home, constants_1.appFile));
    t.regex(args[1], contentsRegexp);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithMatch(/Created connections/));
    const nextAllConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const destConnectionIdMatch = /destConnection: (?<connection>.+)/.exec(args[1]);
    const destConnectionId = (_a = destConnectionIdMatch === null || destConnectionIdMatch === void 0 ? void 0 : destConnectionIdMatch.groups) === null || _a === void 0 ? void 0 : _a.connection;
    utils_1.assert(destConnectionId);
    const nextConnectionWasm = await ibcClientWasm.query.ibc.connection.connection(destConnectionId);
    const nextAllConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const srcConnectionIdMatch = /srcConnection: (?<connection>.+)/.exec(args[1]);
    const srcConnectionId = (_b = srcConnectionIdMatch === null || srcConnectionIdMatch === void 0 ? void 0 : srcConnectionIdMatch.groups) === null || _b === void 0 ? void 0 : _b.connection;
    utils_1.assert(srcConnectionId);
    const nextConnectionSimapp = await ibcClientSimapp.query.ibc.connection.connection(srcConnectionId);
    t.is(nextAllConnectionsWasm.connections.length, allConnectionsWasm.connections.length + 1);
    t.is(nextAllConnectionsSimapp.connections.length, allConnectionsSimapp.connections.length + 1);
    t.assert(nextConnectionWasm.connection);
    t.assert(nextConnectionSimapp.connection);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2JpbmFyeS9pYmMtc2V0dXAvY29tbWFuZHMvY29ubmVjdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGdEQUF3QjtBQUV4Qix5Q0FBdUM7QUFDdkMsOENBQXVCO0FBQ3ZCLGtEQUEwQjtBQUcxQixzREFBb0Q7QUFDcEQsK0NBQTBDO0FBQzFDLCtEQUEyRDtBQUUzRCxxQ0FBbUQ7QUFDbkQsdUNBQXlDO0FBRXpDLE1BQU0sZUFBZSxHQUFHLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3hELE1BQU0sY0FBYyxHQUFHLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXRELE1BQU0sUUFBUSxHQUNaLDZFQUE2RSxDQUFDO0FBRWhGLE1BQU0sWUFBWSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7K0JBZVUsQ0FBQztBQUVoQyxNQUFNLEdBQUcsR0FBRztJQUNWLEdBQUcsRUFBRSxZQUFZO0lBQ2pCLElBQUksRUFBRSxjQUFjO0NBQ3JCLENBQUM7QUFFRixhQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNuQixlQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFxQixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTs7SUFDN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxzQkFBVSxFQUFFLENBQUM7SUFFaEMsTUFBTSxlQUFlLEdBQUcsTUFBTSw4QkFBYSxDQUFDLG9CQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkUsTUFBTSxhQUFhLEdBQUcsTUFBTSw4QkFBYSxDQUFDLG1CQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFaEUsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNyRixNQUFNLG9CQUFvQixHQUFHLE1BQU0sZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBRXpGLE1BQU0sT0FBTyxHQUFZO1FBQ3ZCLElBQUksRUFBRSxZQUFZO1FBQ2xCLFFBQVE7UUFDUixHQUFHLEVBQUUsY0FBYztRQUNuQixJQUFJLEVBQUUsWUFBWTtLQUNuQixDQUFDO0lBRUYsY0FBYyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNyQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7SUFFMUIsTUFBTSxhQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRyxNQUE0QixDQUFDLENBQUM7SUFFdkQsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUF3QixDQUFDO0lBQ2pFLE1BQU0sY0FBYyxHQUFHLElBQUksTUFBTSxDQUMvQjs7OztDQUlILENBQ0UsQ0FBQztJQUNGLENBQUMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxtQkFBTyxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFFN0QsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6RixNQUFNLHFCQUFxQixHQUFHLG1DQUFtQyxDQUFDLElBQUksQ0FDcEUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7SUFDRixNQUFNLGdCQUFnQixTQUFHLHFCQUFxQixhQUFyQixxQkFBcUIsdUJBQXJCLHFCQUFxQixDQUFFLE1BQU0sMENBQUUsVUFBVSxDQUFDO0lBQ25FLGNBQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUM1RSxnQkFBZ0IsQ0FDakIsQ0FBQztJQUVGLE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDN0YsTUFBTSxvQkFBb0IsR0FBRyxrQ0FBa0MsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUUsTUFBTSxlQUFlLFNBQUcsb0JBQW9CLGFBQXBCLG9CQUFvQix1QkFBcEIsb0JBQW9CLENBQUUsTUFBTSwwQ0FBRSxVQUFVLENBQUM7SUFDakUsY0FBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3hCLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUNoRixlQUFlLENBQ2hCLENBQUM7SUFFRixDQUFDLENBQUMsRUFBRSxDQUNGLHNCQUFzQixDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQ3pDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUMxQyxDQUFDO0lBQ0YsQ0FBQyxDQUFDLEVBQUUsQ0FDRix3QkFBd0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUMzQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FDNUMsQ0FBQztJQUNGLENBQUMsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM1QyxDQUFDLENBQUMsQ0FBQyJ9