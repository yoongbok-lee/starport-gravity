"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const ava_1 = __importDefault(require("ava"));
const sinon_1 = __importDefault(require("sinon"));
const testutils_1 = require("../../../lib/testutils");
const keys_generate_1 = require("./keys-generate");
const fsWriteFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
ava_1.default.beforeEach(() => {
    sinon_1.default.reset();
    fsWriteFileSync.returns();
});
ava_1.default('generates mnemonic to stdout', (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        keyFile: null,
    };
    keys_generate_1.run(options, logger);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithMatch(/[\\w ]+/));
    t.assert(fsWriteFileSync.notCalled);
});
ava_1.default('generates mnemonic to file', (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        keyFile: '/home/user/mnemonic.txt',
    };
    keys_generate_1.run(options, logger);
    const [path, contents] = fsWriteFileSync.getCall(0).args;
    t.is(path, options.keyFile);
    t.regex(contents, /[\\w ]+/);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithMatch(/Saved mnemonic to/));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy1nZW5lcmF0ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2JpbmFyeS9pYmMtc2V0dXAvY29tbWFuZHMva2V5cy1nZW5lcmF0ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBRXBCLDhDQUF1QjtBQUN2QixrREFBMEI7QUFHMUIsc0RBQW9EO0FBRXBELG1EQUErQztBQUUvQyxNQUFNLGVBQWUsR0FBRyxlQUFLLENBQUMsSUFBSSxDQUFDLFlBQUUsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUV4RCxhQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNuQixlQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFZCxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDNUIsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUN6QyxNQUFNLE1BQU0sR0FBRyxJQUFJLHNCQUFVLEVBQUUsQ0FBQztJQUVoQyxNQUFNLE9BQU8sR0FBWTtRQUN2QixPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUM7SUFFRixtQkFBRyxDQUFDLE9BQU8sRUFBRyxNQUE0QixDQUFDLENBQUM7SUFFNUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksc0JBQVUsRUFBRSxDQUFDO0lBRWhDLE1BQU0sT0FBTyxHQUFZO1FBQ3ZCLE9BQU8sRUFBRSx5QkFBeUI7S0FDbkMsQ0FBQztJQUVGLG1CQUFHLENBQUMsT0FBTyxFQUFHLE1BQTRCLENBQUMsQ0FBQztJQUU1QyxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3pELENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUMsS0FBSyxDQUFDLFFBQWtCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFdkMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0FBQzdELENBQUMsQ0FBQyxDQUFDIn0=