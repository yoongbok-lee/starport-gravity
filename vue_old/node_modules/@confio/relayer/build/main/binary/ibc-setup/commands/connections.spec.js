"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const ava_1 = __importDefault(require("ava"));
const sinon_1 = __importDefault(require("sinon"));
const link_1 = require("../../../lib/link");
const testutils_1 = require("../../../lib/testutils");
const signing_client_1 = require("../../utils/signing-client");
const chains_1 = require("./chains");
const connections_1 = require("./connections");
const fsReadFileSync = sinon_1.default.stub(fs_1.default, 'readFileSync');
const consoleLog = sinon_1.default.stub(console, 'log');
const mnemonic = 'enlist hip relief stomach skate base shallow young switch frequent cry park';
const registryYaml = `
version: 1

chains:
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    rpc:
      - http://localhost:26658`;
ava_1.default.beforeEach(() => {
    sinon_1.default.reset();
});
ava_1.default.serial('lists connections', async (t) => {
    const logger = new testutils_1.TestLogger();
    const ibcClientSimapp = await signing_client_1.signingClient(chains_1.simappChain, mnemonic);
    const ibcClientWasm = await signing_client_1.signingClient(chains_1.wasmdChain, mnemonic);
    const link = await link_1.Link.createWithNewConnections(ibcClientSimapp, ibcClientWasm);
    const options = {
        home: '/home/user',
        mnemonic,
        chain: 'local_simapp',
    };
    fsReadFileSync.returns(registryYaml);
    await connections_1.run(options, logger);
    const tableRow = [link.endA.connectionID, link.endA.clientID, 0, 'Open'];
    const match = new RegExp(tableRow.join('\\s+'));
    t.assert(consoleLog.getCall(-1).calledWithMatch(match));
});
// TODO: #130
// test.serial('logs a message when no connections are found', async (t) => {
//   //
// });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbnMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2Nvbm5lY3Rpb25zLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBb0I7QUFFcEIsOENBQXVCO0FBQ3ZCLGtEQUEwQjtBQUcxQiw0Q0FBeUM7QUFDekMsc0RBQW9EO0FBQ3BELCtEQUEyRDtBQUUzRCxxQ0FBbUQ7QUFDbkQsK0NBQTZDO0FBRTdDLE1BQU0sY0FBYyxHQUFHLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sVUFBVSxHQUFHLGVBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBRTlDLE1BQU0sUUFBUSxHQUNaLDZFQUE2RSxDQUFDO0FBRWhGLE1BQU0sWUFBWSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7K0JBZVUsQ0FBQztBQUVoQyxhQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNuQixlQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMzQyxNQUFNLE1BQU0sR0FBRyxJQUFJLHNCQUFVLEVBQUUsQ0FBQztJQUVoQyxNQUFNLGVBQWUsR0FBRyxNQUFNLDhCQUFhLENBQUMsb0JBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNuRSxNQUFNLGFBQWEsR0FBRyxNQUFNLDhCQUFhLENBQUMsbUJBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUVoRSxNQUFNLElBQUksR0FBRyxNQUFNLFdBQUksQ0FBQyx3QkFBd0IsQ0FDOUMsZUFBZSxFQUNmLGFBQWEsQ0FDZCxDQUFDO0lBRUYsTUFBTSxPQUFPLEdBQVk7UUFDdkIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsUUFBUTtRQUNSLEtBQUssRUFBRSxjQUFjO0tBQ3RCLENBQUM7SUFFRixjQUFjLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXJDLE1BQU0saUJBQUcsQ0FBQyxPQUFPLEVBQUcsTUFBNEIsQ0FBQyxDQUFDO0lBRWxELE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pFLE1BQU0sS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUMxRCxDQUFDLENBQUMsQ0FBQztBQUVILGFBQWE7QUFDYiw2RUFBNkU7QUFDN0UsT0FBTztBQUNQLE1BQU0ifQ==