"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("@cosmjs/utils");
const ava_1 = __importDefault(require("ava"));
const sinon_1 = __importDefault(require("sinon"));
const link_1 = require("../../../lib/link");
const testutils_1 = require("../../../lib/testutils");
const constants_1 = require("../../constants");
const signing_client_1 = require("../../utils/signing-client");
const chains_1 = require("./chains");
const ics20_1 = require("./ics20");
const fsWriteFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
const fsReadFileSync = sinon_1.default.stub(fs_1.default, 'readFileSync');
const mnemonic = 'enlist hip relief stomach skate base shallow young switch frequent cry park';
const registryYaml = `
version: 1

chains:
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    rpc:
      - http://localhost:26658`;
const app = {
    src: 'local_wasm',
    dest: 'local_simapp',
};
ava_1.default.beforeEach(() => {
    sinon_1.default.reset();
});
ava_1.default.serial('ics20 create channels with new connection', async (t) => {
    var _a, _b;
    const logger = new testutils_1.TestLogger();
    const ibcClientSimapp = await signing_client_1.signingClient(chains_1.simappChain, mnemonic);
    const ibcClientWasm = await signing_client_1.signingClient(chains_1.wasmdChain, mnemonic);
    const allConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const allConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const options = {
        home: '/home/user',
        mnemonic,
        src: 'local_wasm',
        dest: 'local_simapp',
        srcPort: 'transfer',
        destPort: 'custom',
        connections: null,
    };
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await ics20_1.run(options, app, logger);
    const args = fsWriteFileSync.getCall(0).args;
    const contentsRegexp = new RegExp(`src: local_wasm
dest: local_simapp
srcConnection: .+
destConnection: .+
`);
    t.assert(fsWriteFileSync.calledOnce);
    t.is(args[0], path_1.default.join(options.home, constants_1.appFile));
    t.regex(args[1], contentsRegexp);
    t.is(logger.info.callCount, 6);
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Created connections/));
    t.assert(logger.info.calledWithMatch(/Created channels/));
    const nextAllConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const srcConnectionIdMatch = /srcConnection: (?<connection>.+)/.exec(args[1]);
    const srcConnectionId = (_a = srcConnectionIdMatch === null || srcConnectionIdMatch === void 0 ? void 0 : srcConnectionIdMatch.groups) === null || _a === void 0 ? void 0 : _a.connection;
    utils_1.assert(srcConnectionId);
    const nextConnectionWasm = await ibcClientWasm.query.ibc.connection.connection(srcConnectionId);
    const nextAllConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const destConnectionIdMatch = /destConnection: (?<connection>.+)/.exec(args[1]);
    const destConnectionId = (_b = destConnectionIdMatch === null || destConnectionIdMatch === void 0 ? void 0 : destConnectionIdMatch.groups) === null || _b === void 0 ? void 0 : _b.connection;
    utils_1.assert(destConnectionId);
    const nextConnectionSimapp = await ibcClientSimapp.query.ibc.connection.connection(destConnectionId);
    t.is(nextAllConnectionsWasm.connections.length, allConnectionsWasm.connections.length + 1);
    t.is(nextAllConnectionsSimapp.connections.length, allConnectionsSimapp.connections.length + 1);
    t.assert(nextConnectionWasm.connection);
    t.assert(nextConnectionSimapp.connection);
});
ava_1.default.serial('ics20 create channels with existing connection', async (t) => {
    const logger = new testutils_1.TestLogger();
    const ibcClientSimapp = await signing_client_1.signingClient(chains_1.simappChain, mnemonic);
    const ibcClientWasm = await signing_client_1.signingClient(chains_1.wasmdChain, mnemonic);
    const link = await link_1.Link.createWithNewConnections(ibcClientWasm, ibcClientSimapp);
    const allConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const allConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const options = {
        home: '/home/user',
        mnemonic,
        src: 'local_wasm',
        dest: 'local_simapp',
        srcPort: 'transfer',
        destPort: 'custom',
        connections: {
            src: link.endA.connectionID,
            dest: link.endB.connectionID,
        },
    };
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await ics20_1.run(options, app, logger);
    const args = fsWriteFileSync.getCall(0).args;
    const contentsRegexp = new RegExp(`src: local_wasm
dest: local_simapp
srcConnection: ${link.endA.connectionID}
destConnection: ${link.endB.connectionID}
`);
    t.assert(fsWriteFileSync.calledOnce);
    t.is(args[0], path_1.default.join(options.home, constants_1.appFile));
    t.regex(args[1], contentsRegexp);
    t.assert(logger.info.calledThrice);
    t.assert(logger.info.calledWithMatch(/Used existing connections/));
    t.assert(logger.info.calledWithMatch(/Create channel/));
    t.assert(logger.info.calledWithMatch(/Created channels/));
    const nextAllConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const nextAllConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    t.is(nextAllConnectionsWasm.connections.length, allConnectionsWasm.connections.length);
    t.is(nextAllConnectionsSimapp.connections.length, allConnectionsSimapp.connections.length);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNzMjAuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2ljczIwLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0Q0FBb0I7QUFDcEIsZ0RBQXdCO0FBRXhCLHlDQUF1QztBQUN2Qyw4Q0FBdUI7QUFDdkIsa0RBQTBCO0FBRzFCLDRDQUF5QztBQUN6QyxzREFBb0Q7QUFDcEQsK0NBQTBDO0FBQzFDLCtEQUEyRDtBQUUzRCxxQ0FBbUQ7QUFDbkQsbUNBQXVDO0FBRXZDLE1BQU0sZUFBZSxHQUFHLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3hELE1BQU0sY0FBYyxHQUFHLGVBQUssQ0FBQyxJQUFJLENBQUMsWUFBRSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBRXRELE1BQU0sUUFBUSxHQUNaLDZFQUE2RSxDQUFDO0FBRWhGLE1BQU0sWUFBWSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7K0JBZVUsQ0FBQztBQUVoQyxNQUFNLEdBQUcsR0FBRztJQUNWLEdBQUcsRUFBRSxZQUFZO0lBQ2pCLElBQUksRUFBRSxjQUFjO0NBQ3JCLENBQUM7QUFFRixhQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNuQixlQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsTUFBTSxDQUFDLDJDQUEyQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTs7SUFDbkUsTUFBTSxNQUFNLEdBQUcsSUFBSSxzQkFBVSxFQUFFLENBQUM7SUFFaEMsTUFBTSxlQUFlLEdBQUcsTUFBTSw4QkFBYSxDQUFDLG9CQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkUsTUFBTSxhQUFhLEdBQUcsTUFBTSw4QkFBYSxDQUFDLG1CQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFF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