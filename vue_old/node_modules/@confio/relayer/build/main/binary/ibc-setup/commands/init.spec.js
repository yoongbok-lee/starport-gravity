"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const ava_1 = __importDefault(require("ava"));
const axios_1 = __importDefault(require("axios"));
const sinon_1 = __importDefault(require("sinon"));
const testutils_1 = require("../../../lib/testutils");
const init_1 = require("./init");
const fsExistSync = sinon_1.default.stub(fs_1.default, 'existsSync');
const fsMkdirSync = sinon_1.default.stub(fs_1.default, 'mkdirSync');
const axiosGet = sinon_1.default.stub(axios_1.default, 'get');
const fsReadFileSync = sinon_1.default.stub(fs_1.default, 'readFileSync');
const fsWriteFileSync = sinon_1.default.stub(fs_1.default, 'writeFileSync');
sinon_1.default.replace(fs_1.default, 'lstatSync', sinon_1.default.fake.returns({
    isDirectory: () => true,
    isFile: () => true,
}));
const registryYaml = `
version: 1

chains:
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    hd_path: m/44'/108'/0'/2'
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    hd_path: m/44'/108'/0'/3'
    rpc:
      - http://localhost:26658`;
ava_1.default.beforeEach(() => {
    sinon_1.default.reset();
});
ava_1.default('create app.yaml', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        src: 'local_wasm',
        dest: 'local_simapp',
    };
    const appPath = `${options.home}/app.yaml`;
    const registryPath = `${options.home}/registry.yaml`;
    fsExistSync
        .onCall(0)
        .returns(false)
        .onCall(1)
        .returns(true)
        .onCall(2)
        .returns(true);
    axiosGet.resolves({
        data: registryYaml,
    });
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await init_1.run(options, logger);
    t.assert(fsMkdirSync.notCalled);
    t.assert(axiosGet.notCalled);
    t.assert(fsReadFileSync.calledOnceWith(registryPath));
    const [path, contents] = fsWriteFileSync.getCall(0).args;
    const appYamlRegexp = new RegExp(`src: ${options.src}\ndest: ${options.dest}\nmnemonic: [\\w ]+`, 'mg');
    t.is(path, appPath);
    t.regex(contents, appYamlRegexp);
    t.assert(logger.info.getCall(-2).calledWithMatch(/Source address: [\w ]+/));
    t.assert(logger.info.getCall(-1).calledWithMatch(/Destination address: [\w ]+/));
});
ava_1.default('initialize home directory, pull registry.yaml and create app.yaml', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        src: 'local_wasm',
        dest: 'local_simapp',
    };
    const appPath = `${options.home}/app.yaml`;
    const registryPath = `${options.home}/registry.yaml`;
    fsExistSync
        .onCall(0)
        .returns(false)
        .onCall(1)
        .returns(false)
        .onCall(2)
        .returns(false);
    fsMkdirSync.returns(options.home);
    axiosGet.resolves({
        data: registryYaml,
    });
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await init_1.run(options, logger);
    t.assert(fsMkdirSync.calledOnceWith(options.home));
    t.assert(axiosGet.calledOnce);
    t.assert(fsReadFileSync.calledOnceWith(registryPath));
    t.assert(fsWriteFileSync.calledWithExactly(registryPath, registryYaml));
    t.assert(logger.info.calledWithMatch(new RegExp(`at ${options.home}`)));
    const [path, contents] = fsWriteFileSync.getCall(1).args;
    const appYamlRegexp = new RegExp(`src: ${options.src}\ndest: ${options.dest}\nmnemonic: [\\w ]+`, 'mg');
    t.is(path, appPath);
    t.regex(contents, appYamlRegexp);
    t.assert(logger.info.getCall(-2).calledWithMatch(/Source address: [\w ]+/));
    t.assert(logger.info.getCall(-1).calledWithMatch(/Destination address: [\w ]+/));
});
ava_1.default('throws when cannot fetch registry.yaml from remote', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        src: 'local_wasm',
        dest: 'local_simapp',
    };
    fsExistSync.returns(false);
    fsMkdirSync.returns(options.home);
    axiosGet.rejects();
    fsReadFileSync.returns('');
    fsWriteFileSync.returns();
    await t.throwsAsync(async () => await init_1.run(options, logger), {
        instanceOf: Error,
        message: /Cannot fetch registry.yaml/,
    });
    t.assert(fsMkdirSync.calledOnceWith(options.home));
    t.assert(axiosGet.calledOnce);
});
ava_1.default('returns early if app.yaml exists', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        src: 'local_wasm',
        dest: 'local_simapp',
    };
    fsExistSync.onCall(0).returns(true);
    await init_1.run(options, logger);
    t.assert(fsExistSync.calledOnce);
    t.assert(logger.info.calledWithMatch(/app.yaml is already initialized/));
    t.assert(logger.info.calledOnce);
});
ava_1.default('throws if provided chain does not exist in the registry', async (t) => {
    const logger = new testutils_1.TestLogger();
    const options = {
        home: '/home/user',
        src: 'chain_that_does_not_exist',
        dest: 'local_simapp',
    };
    const registryPath = `${options.home}/registry.yaml`;
    fsExistSync
        .onCall(0)
        .returns(false)
        .onCall(1)
        .returns(true)
        .onCall(2)
        .returns(true);
    axiosGet.resolves({
        data: registryYaml,
    });
    fsReadFileSync.returns(registryYaml);
    await t.throwsAsync(async () => await init_1.run(options, logger), {
        instanceOf: Error,
        message: new RegExp(`${options.src} is missing in the registry`),
    });
    t.assert(fsMkdirSync.notCalled);
    t.assert(axiosGet.notCalled);
    t.assert(fsReadFileSync.calledOnceWith(registryPath));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2JpbmFyeS9pYmMtc2V0dXAvY29tbWFuZHMvaW5pdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBRXBCLDhDQUF1QjtBQUN2QixrREFBMEI7QUFDMUIsa0RBQTBCO0FBRzFCLHNEQUFvRDtBQUVwRCxpQ0FBc0M7QUFFdEMsTUFBTSxXQUFXLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxZQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDakQsTUFBTSxXQUFXLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxZQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7QUFDaEQsTUFBTSxRQUFRLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxlQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDMUMsTUFBTSxjQUFjLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxZQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDdEQsTUFBTSxlQUFlLEdBQUcsZUFBSyxDQUFDLElBQUksQ0FBQyxZQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFFeEQsZUFBSyxDQUFDLE9BQU8sQ0FDWCxZQUFFLEVBQ0YsV0FBVyxFQUNYLGVBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ2pCLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO0lBQ3ZCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO0NBQ25CLENBQUMsQ0FDSCxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQWlCVSxDQUFDO0FBRWhDLGFBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ25CLGVBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNoQixDQUFDLENBQUMsQ0FBQztBQUVILGFBQUksQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLEVBQUUs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