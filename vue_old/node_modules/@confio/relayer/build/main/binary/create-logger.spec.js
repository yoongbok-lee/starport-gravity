"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const create_logger_1 = require("./create-logger");
function bootstrap(flags = {}) {
    return create_logger_1.resolveLevel(Object.assign({ quiet: false, verbose: false }, flags));
}
function withEnv(logLevel, testFn) {
    process.env.RELAYER_LOG_LEVEL = logLevel;
    testFn();
    delete process.env.RELAYER_LOG_LEVEL;
}
ava_1.default('resolves to default level for invalid log-level', (t) => {
    t.deepEqual(bootstrap({ logLevel: 'invalid-log-level' }), [
        create_logger_1.defaultLevel,
        'invalid-log-level',
    ]);
    t.deepEqual(bootstrap({ logLevel: 'another-invalid-one', quiet: true }), [
        create_logger_1.defaultLevel,
        'another-invalid-one',
    ]);
    t.deepEqual(bootstrap({ logLevel: 'something-invalid', verbose: true }), [
        create_logger_1.defaultLevel,
        'something-invalid',
    ]);
    t.deepEqual(bootstrap({ logLevel: 'something-invalid', verbose: true, quiet: true }), [create_logger_1.defaultLevel, 'something-invalid']);
    t.deepEqual(bootstrap({ logLevel: '', verbose: true, quiet: true }), [
        create_logger_1.defaultLevel,
        '',
    ]);
    withEnv('random_env', () => {
        t.deepEqual(bootstrap({ verbose: true, quiet: true }), [
            create_logger_1.defaultLevel,
            'random_env',
        ]);
    });
    withEnv('another_random', () => {
        t.deepEqual(bootstrap(), [create_logger_1.defaultLevel, 'another_random']);
    });
    withEnv('', () => {
        t.deepEqual(bootstrap(), [create_logger_1.defaultLevel, '']);
    });
});
ava_1.default('resolves to the most permissive level', (t) => {
    t.deepEqual(bootstrap({ logLevel: 'info', quiet: true }), ['info', null]);
    t.deepEqual(bootstrap({ logLevel: 'info', quiet: true, verbose: true }), [
        'verbose',
        null,
    ]);
    t.deepEqual(bootstrap({ logLevel: 'info', verbose: true }), [
        'verbose',
        null,
    ]);
    t.deepEqual(bootstrap({ logLevel: 'warn' }), ['warn', null]);
    t.deepEqual(bootstrap({ logLevel: 'debug', verbose: true }), ['debug', null]);
    t.deepEqual(bootstrap({ logLevel: 'error', verbose: true }), [
        'verbose',
        null,
    ]);
    withEnv('debug', () => {
        t.deepEqual(bootstrap({ quiet: true }), ['debug', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap({ quiet: true, verbose: true }), ['verbose', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap(), ['warn', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap({ logLevel: 'error' }), ['error', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap({ logLevel: 'error', verbose: true }), [
            'verbose',
            null,
        ]);
    });
    withEnv('verbose', () => {
        t.deepEqual(bootstrap({ quiet: true }), ['verbose', null]);
    });
    t.deepEqual(bootstrap({ verbose: true }), ['verbose', null]);
    t.deepEqual(bootstrap({ quiet: true }), ['error', null]);
    t.deepEqual(bootstrap({ quiet: true, verbose: true }), ['verbose', null]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWxvZ2dlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JpbmFyeS9jcmVhdGUtbG9nZ2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBdUI7QUFFdkIsbURBQTZEO0FBRzdELFNBQVMsU0FBUyxDQUFDLFFBQThCLEVBQUU7SUFDakQsT0FBTyw0QkFBWSxpQkFDakIsS0FBSyxFQUFFLEtBQUssRUFDWixPQUFPLEVBQUUsS0FBSyxJQUNYLEtBQUssRUFDUixDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLFFBQWdCLEVBQUUsTUFBa0I7SUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUM7SUFDekMsTUFBTSxFQUFFLENBQUM7SUFDVCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUM7QUFDdkMsQ0FBQztBQUVELGFBQUksQ0FBQyxpREFBaUQsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzVELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRTtRQUN4RCw0QkFBWTtRQUNaLG1CQUFtQjtLQUNwQixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN2RSw0QkFBWTtRQUNaLHFCQUFxQjtLQUN0QixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN2RSw0QkFBWTtRQUNaLG1CQUFtQjtLQUNwQixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUNULFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUN4RSxDQUFDLDRCQUFZLEVBQUUsbUJBQW1CLENBQUMsQ0FDcEMsQ0FBQztJQUVGLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1FBQ25FLDRCQUFZO1FBQ1osRUFBRTtLQUNILENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtZQUNyRCw0QkFBWTtZQUNaLFlBQVk7U0FDYixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDN0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLDRCQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUU7UUFDZixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsNEJBQVksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFJLENBQUMsdUNBQXVDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNsRCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUUxRSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUN2RSxTQUFTO1FBQ1QsSUFBSTtLQUNMLENBQUMsQ0FBQztJQUVILENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtRQUMxRCxTQUFTO1FBQ1QsSUFBSTtLQUNMLENBQUMsQ0FBQztJQUVILENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUU3RCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUU5RSxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7UUFDM0QsU0FBUztRQUNULElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtRQUNwQixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtRQUNuQixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQ25CLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQ25CLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1FBQ25CLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRTtZQUMzRCxTQUFTO1lBQ1QsSUFBSTtTQUNMLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7UUFDdEIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRTdELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV6RCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM1RSxDQUFDLENBQUMsQ0FBQyJ9