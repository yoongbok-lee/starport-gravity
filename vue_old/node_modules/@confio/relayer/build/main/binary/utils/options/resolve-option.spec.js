"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const InvalidOptionError_1 = require("../../exceptions/InvalidOptionError");
const resolve_option_1 = require("./resolve-option");
const stringOption1 = 'string option 1';
const stringOption2 = 'string option 2';
const functionWithString = () => 'function option';
const functionWithNumber = () => 5;
const functionWithNull = () => {
    return null;
};
ava_1.default('leftmost defined option takes precedence', (t) => {
    const option1 = resolve_option_1.resolveOption('option')(undefined, undefined, stringOption1);
    t.is(option1, stringOption1);
    const option2 = resolve_option_1.resolveOption('option')(stringOption2, undefined, undefined);
    t.is(option2, stringOption2);
    const option3 = resolve_option_1.resolveOption('option')(stringOption2, stringOption1, stringOption1, stringOption1, undefined);
    t.is(option3, stringOption2);
    const option4 = resolve_option_1.resolveOption('option', { integer: true })(10, 5, 1);
    t.is(option4, 10);
    const option5 = resolve_option_1.resolveOption('option', { integer: true })('7', '4', 1);
    t.is(option5, 7);
    const option6 = resolve_option_1.resolveOption('option', { integer: true })(null, null, undefined, null, 4, '7');
    t.is(option6, 4);
});
ava_1.default('resolves function arguments', (t) => {
    const option1 = resolve_option_1.resolveOption('option')(undefined, functionWithString, stringOption1);
    t.is(option1, 'function option');
    const option2 = resolve_option_1.resolveOption('option')(functionWithString, undefined, undefined);
    t.is(option2, 'function option');
    const option3 = resolve_option_1.resolveOption('option')(undefined, functionWithNull, functionWithString, stringOption1, undefined);
    t.is(option3, 'function option');
    const option4 = resolve_option_1.resolveOption('option', { integer: true })(undefined, functionWithNull, functionWithNumber, stringOption1, undefined);
    t.is(option4, 5);
    const option5 = resolve_option_1.resolveOption('option', { integer: true })(functionWithNumber, undefined, null, stringOption1, undefined);
    t.is(option5, 5);
});
ava_1.default('returns null for undefined/null options', (t) => {
    const option1 = resolve_option_1.resolveOption('option')(undefined, functionWithNull, null, undefined, functionWithNull);
    t.is(option1, null);
    const option2 = resolve_option_1.resolveOption('option')(undefined, null, undefined);
    t.is(option2, null);
    const option3 = resolve_option_1.resolveOption('option')(functionWithNull, functionWithNull, functionWithNull);
    t.is(option3, null);
});
ava_1.default('returns null for undefined/null options (integers)', (t) => {
    const option1 = resolve_option_1.resolveOption('option', { integer: true })(undefined, functionWithNull, null, undefined, functionWithNull);
    t.is(option1, null);
    const option2 = resolve_option_1.resolveOption('option', { integer: true })(undefined, null, undefined);
    t.is(option2, null);
    const option3 = resolve_option_1.resolveOption('option', { integer: true })(functionWithNull, functionWithNull, functionWithNull);
    t.is(option3, null);
});
ava_1.default('throws if resolved value is not an integer', (t) => {
    const option1 = () => resolve_option_1.resolveOption('option', { integer: true })('Abcdefgh', stringOption1, () => null, undefined);
    t.throws(option1, {
        instanceOf: InvalidOptionError_1.InvalidOptionError,
        message: /must be an integer/,
    });
    const option2 = () => resolve_option_1.resolveOption('option', { integer: true })(null, 'seven', () => null, undefined);
    t.throws(option2, {
        instanceOf: InvalidOptionError_1.InvalidOptionError,
        message: /must be an integer/,
    });
});
ava_1.default('throws if all options are undefined or null', (t) => {
    const option1 = () => resolve_option_1.resolveOption('option', { required: true })(undefined, null, () => null, undefined);
    t.throws(option1, { instanceOf: InvalidOptionError_1.InvalidOptionError, message: /is required/ });
    const option2 = () => resolve_option_1.resolveOption('option', { required: true, integer: true })(undefined, null, () => null, undefined);
    t.throws(option2, { instanceOf: InvalidOptionError_1.InvalidOptionError, message: /is required/ });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS1vcHRpb24uc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvdXRpbHMvb3B0aW9ucy9yZXNvbHZlLW9wdGlvbi5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOENBQXVCO0FBRXZCLDRFQUF5RTtBQUV6RSxxREFBaUQ7QUFFakQsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDeEMsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUM7QUFDeEMsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztBQUNuRCxNQUFNLGtCQUFrQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNuQyxNQUFNLGdCQUFnQixHQUFHLEdBQUcsRUFBRTtJQUM1QixPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLGFBQUksQ0FBQywwQ0FBMEMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQ3JELE1BQU0sT0FBTyxHQUFHLDhCQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUU3QixNQUFNLE9BQU8sR0FBRyw4QkFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDN0UsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFN0IsTUFBTSxPQUFPLEdBQUcsOEJBQWEsQ0FBQyxRQUFRLENBQUMsQ0FDckMsYUFBYSxFQUNiLGFBQWEsRUFDYixhQUFhLEVBQ2IsYUFBYSxFQUNiLFNBQVMsQ0FDVixDQUFDO0lBQ0YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENB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