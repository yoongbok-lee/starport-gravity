import { fromRfc3339WithNanoseconds, } from '@cosmjs/tendermint-rpc';
import test from 'ava';
import Long from 'long';
import { heightGreater, multiplyCoin, multiplyFees, parseHeightAttribute, parseRevisionNumber, secondsFromDateNanos, timeGreater, timestampFromDateNanos, } from './utils';
test('can parse revision numbers', (t) => {
    const musselnet = parseRevisionNumber('musselnet-4');
    t.is(musselnet.toNumber(), 4);
    const numerific = parseRevisionNumber('numers-123-456');
    t.is(numerific.toNumber(), 456);
    const nonums = parseRevisionNumber('hello');
    t.is(nonums.toNumber(), 0);
    const nonums2 = parseRevisionNumber('hello-world');
    t.is(nonums2.toNumber(), 0);
});
test('can parse strange revision numbers', (t) => {
    // all of these should give 0
    const strangers = [
        '',
        '-',
        'hello-',
        'hello-123-',
        'hello-0123',
        'hello-00123',
        'hello-1.23',
    ];
    for (const strange of strangers) {
        const rev = parseRevisionNumber(strange);
        t.is(rev.toNumber(), 0, strange);
    }
});
function nanosFromDateTime(time) {
    const stamp = timestampFromDateNanos(time);
    return stamp.seconds.multiply(1000000000).add(stamp.nanos);
}
test('time-based timeouts properly', (t) => {
    const time1 = fromRfc3339WithNanoseconds('2021-03-12T12:34:56.123456789Z');
    const time2 = fromRfc3339WithNanoseconds('2021-03-12T12:36:56.543543543Z');
    const time3 = fromRfc3339WithNanoseconds('2021-03-12T12:36:13Z');
    const sec1 = secondsFromDateNanos(time1);
    const nanos1 = nanosFromDateTime(time1);
    const sec2 = secondsFromDateNanos(time2);
    const nanos2 = nanosFromDateTime(time2);
    const greaterThanNull = timeGreater(undefined, secondsFromDateNanos(time1));
    t.is(greaterThanNull, true);
    const greaterThanPast = timeGreater(nanos2, sec1);
    t.is(greaterThanPast, true);
    const greaterThanFuture = timeGreater(nanos1, sec2);
    t.is(greaterThanFuture, false);
    // nanos seconds beat seconds if present
    const greaterThanSelfWithNanos = timeGreater(nanos1, sec1);
    t.is(greaterThanSelfWithNanos, true);
    const greaterThanSelf = timeGreater(nanosFromDateTime(time3), secondsFromDateNanos(time3));
    t.is(greaterThanSelf, false);
});
test('height based timeouts properly', (t) => {
    const height1a = {
        revisionHeight: Long.fromNumber(12345),
        revisionNumber: Long.fromNumber(1),
    };
    const height1b = {
        revisionHeight: Long.fromNumber(14000),
        revisionNumber: Long.fromNumber(1),
    };
    const height2a = {
        revisionHeight: Long.fromNumber(600),
        revisionNumber: Long.fromNumber(2),
    };
    t.assert(heightGreater(height1b, height1a));
    t.assert(heightGreater(height2a, height1b));
    t.assert(heightGreater(undefined, height2a));
    t.false(heightGreater(height1b, height1b));
    t.false(heightGreater(height1a, height1b));
});
test('properly multiplies coin', (t) => {
    const input = { amount: '1212', denom: 'foo' };
    const output = multiplyCoin(input, 3);
    t.deepEqual(output, { amount: '3636', denom: 'foo' });
    const input2 = { amount: '654321', denom: 'umuon' };
    const output2 = multiplyCoin(input2, 2);
    t.deepEqual(output2, { amount: '1308642', denom: 'umuon' });
});
test('properly multiplies fees', (t) => {
    const input = {
        gas: '12345',
        amount: [
            {
                amount: '654321',
                denom: 'umuon',
            },
        ],
    };
    const out = multiplyFees(input, 2);
    t.deepEqual(out.gas, '24690');
    t.deepEqual(out.amount, [{ amount: '1308642', denom: 'umuon' }]);
});
test('Properly determines height-based timeouts', (t) => {
    // proper heights
    t.deepEqual(parseHeightAttribute('1-34'), {
        revisionNumber: new Long(1),
        revisionHeight: new Long(34),
    });
    t.deepEqual(parseHeightAttribute('17-3456'), {
        revisionNumber: new Long(17),
        revisionHeight: new Long(3456),
    });
    // handles revision number 0 properly (this is allowed)
    t.deepEqual(parseHeightAttribute('0-1724'), {
        revisionNumber: new Long(0),
        revisionHeight: new Long(1724),
    });
    // missing heights
    t.is(parseHeightAttribute(''), undefined);
    t.is(parseHeightAttribute(), undefined);
    // bad format
    t.is(parseHeightAttribute('some-random-string'), undefined);
    // zero value is defined as missing
    t.is(parseHeightAttribute('0-0'), undefined);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsMEJBQTBCLEdBRTNCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBQ3ZCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixPQUFPLEVBQ0wsYUFBYSxFQUNiLFlBQVksRUFDWixZQUFZLEVBQ1osb0JBQW9CLEVBQ3BCLG1CQUFtQixFQUNuQixvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLHNCQUFzQixHQUN2QixNQUFNLFNBQVMsQ0FBQztBQUVqQixJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUN2QyxNQUFNLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUU5QixNQUFNLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hELENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRWhDLE1BQU0sTUFBTSxHQUFHLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRTNCLE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG9DQUFvQyxF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UyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxFQUFFO1FBQzFDLGNBQWMsRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDM0IsY0FBYyxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQztLQUMvQixDQUFDLENBQUM7SUFFSCxrQkFBa0I7SUFDbEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFeEMsYUFBYTtJQUNiLENBQUMsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUU1RCxtQ0FBbUM7SUFDbkMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQyJ9