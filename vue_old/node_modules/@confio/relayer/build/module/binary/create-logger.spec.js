import test from 'ava';
import { defaultLevel, resolveLevel } from './create-logger';
function bootstrap(flags = {}) {
    return resolveLevel({
        quiet: false,
        verbose: false,
        ...flags,
    });
}
function withEnv(logLevel, testFn) {
    process.env.RELAYER_LOG_LEVEL = logLevel;
    testFn();
    delete process.env.RELAYER_LOG_LEVEL;
}
test('resolves to default level for invalid log-level', (t) => {
    t.deepEqual(bootstrap({ logLevel: 'invalid-log-level' }), [
        defaultLevel,
        'invalid-log-level',
    ]);
    t.deepEqual(bootstrap({ logLevel: 'another-invalid-one', quiet: true }), [
        defaultLevel,
        'another-invalid-one',
    ]);
    t.deepEqual(bootstrap({ logLevel: 'something-invalid', verbose: true }), [
        defaultLevel,
        'something-invalid',
    ]);
    t.deepEqual(bootstrap({ logLevel: 'something-invalid', verbose: true, quiet: true }), [defaultLevel, 'something-invalid']);
    t.deepEqual(bootstrap({ logLevel: '', verbose: true, quiet: true }), [
        defaultLevel,
        '',
    ]);
    withEnv('random_env', () => {
        t.deepEqual(bootstrap({ verbose: true, quiet: true }), [
            defaultLevel,
            'random_env',
        ]);
    });
    withEnv('another_random', () => {
        t.deepEqual(bootstrap(), [defaultLevel, 'another_random']);
    });
    withEnv('', () => {
        t.deepEqual(bootstrap(), [defaultLevel, '']);
    });
});
test('resolves to the most permissive level', (t) => {
    t.deepEqual(bootstrap({ logLevel: 'info', quiet: true }), ['info', null]);
    t.deepEqual(bootstrap({ logLevel: 'info', quiet: true, verbose: true }), [
        'verbose',
        null,
    ]);
    t.deepEqual(bootstrap({ logLevel: 'info', verbose: true }), [
        'verbose',
        null,
    ]);
    t.deepEqual(bootstrap({ logLevel: 'warn' }), ['warn', null]);
    t.deepEqual(bootstrap({ logLevel: 'debug', verbose: true }), ['debug', null]);
    t.deepEqual(bootstrap({ logLevel: 'error', verbose: true }), [
        'verbose',
        null,
    ]);
    withEnv('debug', () => {
        t.deepEqual(bootstrap({ quiet: true }), ['debug', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap({ quiet: true, verbose: true }), ['verbose', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap(), ['warn', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap({ logLevel: 'error' }), ['error', null]);
    });
    withEnv('warn', () => {
        t.deepEqual(bootstrap({ logLevel: 'error', verbose: true }), [
            'verbose',
            null,
        ]);
    });
    withEnv('verbose', () => {
        t.deepEqual(bootstrap({ quiet: true }), ['verbose', null]);
    });
    t.deepEqual(bootstrap({ verbose: true }), ['verbose', null]);
    t.deepEqual(bootstrap({ quiet: true }), ['error', null]);
    t.deepEqual(bootstrap({ quiet: true, verbose: true }), ['verbose', null]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWxvZ2dlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JpbmFyeS9jcmVhdGUtbG9nZ2VyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sS0FBSyxDQUFDO0FBRXZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHN0QsU0FBUyxTQUFTLENBQUMsUUFBOEIsRUFBRTtJQUNqRCxPQUFPLFlBQVksQ0FBQztRQUNsQixLQUFLLEVBQUUsS0FBSztRQUNaLE9BQU8sRUFBRSxLQUFLO1FBQ2QsR0FBRyxLQUFLO0tBQ1QsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUFDLFFBQWdCLEVBQUUsTUFBa0I7SUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUM7SUFDekMsTUFBTSxFQUFFLENBQUM7SUFDVCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUM7QUFDdkMsQ0FBQztBQUVELElBQUksQ0FBQyxpREFBaUQsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzVELENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLG1CQUFtQixFQUFFLENBQUMsRUFBRTtRQUN4RCxZQUFZO1FBQ1osbUJBQW1CO0tBQ3BCLENBQUMsQ0FBQztJQUVILENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1FBQ3ZFLFlBQVk7UUFDWixxQkFBcUI7S0FDdEIsQ0FBQyxDQUFDO0lBRUgsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7UUFDdkUsWUFBWTtRQUNaLG1CQUFtQjtLQUNwQixDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUNULFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUN4RSxDQUFDLFlBQVksRUFBRSxtQkFBbUIsQ0FBQyxDQUNwQyxDQUFDO0lBRUYsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7UUFDbkUsWUFBWTtRQUNaLEVBQUU7S0FDSCxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUN6QixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDckQsWUFBWTtZQUNaLFlBQVk7U0FDYixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDN0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRTtRQUNmLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHVDQUF1QyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDbEQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFMUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7UUFDdkUsU0FBUztRQUNULElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7UUFDMUQsU0FBUztRQUNULElBQUk7S0FDTCxDQUFDLENBQUM7SUFFSCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFN0QsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFOUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFO1FBQzNELFNBQVM7UUFDVCxJQUFJO0tBQ0wsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7UUFDcEIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7UUFDbkIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtRQUNuQixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtRQUNuQixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtRQUNuQixDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDM0QsU0FBUztZQUNULElBQUk7U0FDTCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3RCLENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUMsQ0FBQztJQUVILENBQUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUU3RCxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFekQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQyxDQUFDLENBQUMifQ==