import fs from 'fs';
import path from 'path';
import { assert } from '@cosmjs/utils';
import test from 'ava';
import sinon from 'sinon';
import { Link } from '../../../lib/link';
import { TestLogger } from '../../../lib/testutils';
import { appFile } from '../../constants';
import { signingClient } from '../../utils/signing-client';
import { simappChain, wasmdChain } from './chains';
import { run } from './ics20';
const fsWriteFileSync = sinon.stub(fs, 'writeFileSync');
const fsReadFileSync = sinon.stub(fs, 'readFileSync');
const mnemonic = 'enlist hip relief stomach skate base shallow young switch frequent cry park';
const registryYaml = `
version: 1

chains:
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    rpc:
      - http://localhost:26658`;
const app = {
    src: 'local_wasm',
    dest: 'local_simapp',
};
test.beforeEach(() => {
    sinon.reset();
});
test.serial('ics20 create channels with new connection', async (t) => {
    const logger = new TestLogger();
    const ibcClientSimapp = await signingClient(simappChain, mnemonic);
    const ibcClientWasm = await signingClient(wasmdChain, mnemonic);
    const allConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const allConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const options = {
        home: '/home/user',
        mnemonic,
        src: 'local_wasm',
        dest: 'local_simapp',
        srcPort: 'transfer',
        destPort: 'custom',
        connections: null,
    };
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await run(options, app, logger);
    const args = fsWriteFileSync.getCall(0).args;
    const contentsRegexp = new RegExp(`src: local_wasm
dest: local_simapp
srcConnection: .+
destConnection: .+
`);
    t.assert(fsWriteFileSync.calledOnce);
    t.is(args[0], path.join(options.home, appFile));
    t.regex(args[1], contentsRegexp);
    t.is(logger.info.callCount, 6);
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Connection open/));
    t.assert(logger.info.calledWithMatch(/Created connections/));
    t.assert(logger.info.calledWithMatch(/Created channels/));
    const nextAllConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const srcConnectionIdMatch = /srcConnection: (?<connection>.+)/.exec(args[1]);
    const srcConnectionId = srcConnectionIdMatch?.groups?.connection;
    assert(srcConnectionId);
    const nextConnectionWasm = await ibcClientWasm.query.ibc.connection.connection(srcConnectionId);
    const nextAllConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const destConnectionIdMatch = /destConnection: (?<connection>.+)/.exec(args[1]);
    const destConnectionId = destConnectionIdMatch?.groups?.connection;
    assert(destConnectionId);
    const nextConnectionSimapp = await ibcClientSimapp.query.ibc.connection.connection(destConnectionId);
    t.is(nextAllConnectionsWasm.connections.length, allConnectionsWasm.connections.length + 1);
    t.is(nextAllConnectionsSimapp.connections.length, allConnectionsSimapp.connections.length + 1);
    t.assert(nextConnectionWasm.connection);
    t.assert(nextConnectionSimapp.connection);
});
test.serial('ics20 create channels with existing connection', async (t) => {
    const logger = new TestLogger();
    const ibcClientSimapp = await signingClient(simappChain, mnemonic);
    const ibcClientWasm = await signingClient(wasmdChain, mnemonic);
    const link = await Link.createWithNewConnections(ibcClientWasm, ibcClientSimapp);
    const allConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const allConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const options = {
        home: '/home/user',
        mnemonic,
        src: 'local_wasm',
        dest: 'local_simapp',
        srcPort: 'transfer',
        destPort: 'custom',
        connections: {
            src: link.endA.connectionID,
            dest: link.endB.connectionID,
        },
    };
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await run(options, app, logger);
    const args = fsWriteFileSync.getCall(0).args;
    const contentsRegexp = new RegExp(`src: local_wasm
dest: local_simapp
srcConnection: ${link.endA.connectionID}
destConnection: ${link.endB.connectionID}
`);
    t.assert(fsWriteFileSync.calledOnce);
    t.is(args[0], path.join(options.home, appFile));
    t.regex(args[1], contentsRegexp);
    t.assert(logger.info.calledThrice);
    t.assert(logger.info.calledWithMatch(/Used existing connections/));
    t.assert(logger.info.calledWithMatch(/Create channel/));
    t.assert(logger.info.calledWithMatch(/Created channels/));
    const nextAllConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const nextAllConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    t.is(nextAllConnectionsWasm.connections.length, allConnectionsWasm.connections.length);
    t.is(nextAllConnectionsSimapp.connections.length, allConnectionsSimapp.connections.length);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNzMjAuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2ljczIwLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFHMUIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTNELE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25ELE9BQU8sRUFBVyxHQUFHLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFdkMsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDeEQsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFFdEQsTUFBTSxRQUFRLEdBQ1osNkVBQTZFLENBQUM7QUFFaEYsTUFBTSxZQUFZLEdBQUc7Ozs7Ozs7Ozs7Ozs7OzsrQkFlVSxDQUFDO0FBRWhDLE1BQU0sR0FBRyxHQUFHO0lBQ1YsR0FBRyxFQUFFLFlBQVk7SUFDakIsSUFBSSxFQUFFLGNBQWM7Q0FDckIsQ0FBQztBQUVGLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ25C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