import fs from 'fs';
import test from 'ava';
import sinon from 'sinon';
import { Link } from '../../../lib/link';
import { TestLogger } from '../../../lib/testutils';
import { signingClient } from '../../utils/signing-client';
import { simappChain, wasmdChain } from './chains';
import { run } from './connections';
const fsReadFileSync = sinon.stub(fs, 'readFileSync');
const consoleLog = sinon.stub(console, 'log');
const mnemonic = 'enlist hip relief stomach skate base shallow young switch frequent cry park';
const registryYaml = `
version: 1

chains:
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    rpc:
      - http://localhost:26658`;
test.beforeEach(() => {
    sinon.reset();
});
test.serial('lists connections', async (t) => {
    const logger = new TestLogger();
    const ibcClientSimapp = await signingClient(simappChain, mnemonic);
    const ibcClientWasm = await signingClient(wasmdChain, mnemonic);
    const link = await Link.createWithNewConnections(ibcClientSimapp, ibcClientWasm);
    const options = {
        home: '/home/user',
        mnemonic,
        chain: 'local_simapp',
    };
    fsReadFileSync.returns(registryYaml);
    await run(options, logger);
    const tableRow = [link.endA.connectionID, link.endA.clientID, 0, 'Open'];
    const match = new RegExp(tableRow.join('\\s+'));
    t.assert(consoleLog.getCall(-1).calledWithMatch(match));
});
// TODO: #130
// test.serial('logs a message when no connections are found', async (t) => {
//   //
// });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbnMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2Nvbm5lY3Rpb25zLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBRXBCLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFHMUIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDbkQsT0FBTyxFQUFXLEdBQUcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN0RCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUU5QyxNQUFNLFFBQVEsR0FDWiw2RUFBNkUsQ0FBQztBQUVoRixNQUFNLFlBQVksR0FBRzs7Ozs7Ozs7Ozs7Ozs7OytCQWVVLENBQUM7QUFFaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDbkIsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDM0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztJQUVoQyxNQUFNLGVBQWUsR0FBRyxNQUFNLGFBQWEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDbkUsTUFBTSxhQUFhLEdBQUcsTUFBTSxhQUFhLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRWhFLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLHdCQUF3QixDQUM5QyxlQUFlLEVBQ2YsYUFBYSxDQUNkLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBWTtRQUN2QixJQUFJLEVBQUUsWUFBWTtRQUNsQixRQUFRO1FBQ1IsS0FBSyxFQUFFLGNBQWM7S0FDdEIsQ0FBQztJQUVGLGNBQWMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFckMsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFHLE1BQTRCLENBQUMsQ0FBQztJQUVsRCxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6RSxNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQyxDQUFDLENBQUM7QUFFSCxhQUFhO0FBQ2IsNkVBQTZFO0FBQzdFLE9BQU87QUFDUCxNQUFNIn0=