import fs from 'fs';
import os from 'os';
import test from 'ava';
import sinon from 'sinon';
import { IbcClient } from '../../../lib/ibcclient';
import { TestLogger } from '../../../lib/testutils';
import { run } from './balances';
const fsReadFileSync = sinon.stub(fs, 'readFileSync');
const mnemonic = 'accident harvest weasel surge source return tag supreme sorry isolate wave mammal';
function buildIbcArgs(rpc) {
    return [rpc, sinon.match.any, sinon.match.any, sinon.match.any];
}
const ibcClient = sinon.stub(IbcClient, 'connectWithSigner');
const musselnetArgs = buildIbcArgs('https://rpc.musselnet.cosmwasm.com:443');
const localWasmArgs = buildIbcArgs('http://localhost:26659');
const localSimappArgs = buildIbcArgs('http://localhost:26658');
async function createFakeIbcClient(amount, denom) {
    return {
        query: {
            bank: {
                unverified: {
                    balance: sinon.fake.returns({ amount, denom }),
                },
            },
        },
    };
}
test.beforeEach(() => {
    sinon.reset();
});
const registryYaml = `
version: 1

chains:
  musselnet:
    chain_id: musselnet-4
    # bech32 prefix for addresses
    prefix: wasm
    # this determines the gas payments we make (and defines the fee token)
    gas_price: 0.025umayo
    # the path we use to derive the private key from the mnemonic
    hd_path: m/44'/108'/0'/1'
    # you can include multiple RPC endpoints and it will rotate through them if
    # one is down
    rpc:
      - https://rpc.musselnet.cosmwasm.com:443
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    hd_path: m/44'/108'/0'/2'
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    hd_path: m/44'/108'/0'/3'
    rpc:
      - http://localhost:26658`;
test('lists chains with non-zero balance', async (t) => {
    const logger = new TestLogger();
    const options = {
        home: '/home/user',
        mnemonic,
    };
    fsReadFileSync.returns(registryYaml);
    ibcClient
        .withArgs(...musselnetArgs)
        .returns(createFakeIbcClient('1', 'musselnetdenom'))
        .withArgs(...localWasmArgs)
        .returns(createFakeIbcClient('2', 'wasmdenom'))
        .withArgs(...localSimappArgs)
        .returns(createFakeIbcClient('3', 'simappdenom'));
    await run(options, logger);
    t.assert(fsReadFileSync.calledOnce);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithExactly([
        'musselnet: 1musselnetdenom',
        'local_wasm: 2wasmdenom',
        'local_simapp: 3simappdenom',
    ].join(os.EOL)));
});
test('omits chains with zero balance', async (t) => {
    const logger = new TestLogger();
    const options = {
        home: '/home/user',
        mnemonic,
    };
    fsReadFileSync.returns(registryYaml);
    ibcClient
        .withArgs(...musselnetArgs)
        .returns(createFakeIbcClient('1', 'musselnetdenom'))
        .withArgs(...localWasmArgs)
        .returns(createFakeIbcClient('0', 'wasmdenom'))
        .withArgs(...localSimappArgs)
        .returns(createFakeIbcClient('3', 'simappdenom'));
    await run(options, logger);
    t.assert(fsReadFileSync.calledOnce);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithExactly(['musselnet: 1musselnetdenom', 'local_simapp: 3simappdenom'].join(os.EOL)));
});
test('informs when there are no funds on any balance', async (t) => {
    const logger = new TestLogger();
    const options = {
        home: '/home/user',
        mnemonic,
    };
    fsReadFileSync.returns(registryYaml);
    ibcClient
        .withArgs(...musselnetArgs)
        .returns(createFakeIbcClient('0', 'musselnetdenom'))
        .withArgs(...localWasmArgs)
        .returns(createFakeIbcClient('0', 'wasmdenom'))
        .withArgs(...localSimappArgs)
        .returns(createFakeIbcClient('0', 'simappdenom'));
    await run(options, logger);
    t.assert(fsReadFileSync.calledOnce);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithMatch(/No funds/));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFsYW5jZXMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iaW5hcnkvaWJjLXNldHVwL2NvbW1hbmRzL2JhbGFuY2VzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUVwQixPQUFPLElBQUksTUFBTSxLQUFLLENBQUM7QUFDdkIsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBRzFCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUdqQyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN0RCxNQUFNLFFBQVEsR0FDWixtRkFBbUYsQ0FBQztBQUV0RixTQUFTLFlBQVksQ0FBQyxHQUFXO0lBQy9CLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQVUsQ0FBQztBQUMzRSxDQUFDO0FBQ0QsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztBQUM3RCxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsd0NBQXdDLENBQUMsQ0FBQztBQUM3RSxNQUFNLGFBQWEsR0FBRyxZQUFZLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUM3RCxNQUFNLGVBQWUsR0FBRyxZQUFZLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUUvRCxLQUFLLFVBQVUsbUJBQW1CLENBQUMs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