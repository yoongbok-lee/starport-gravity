import fs from 'fs';
import path from 'path';
import { assert } from '@cosmjs/utils';
import test from 'ava';
import sinon from 'sinon';
import { TestLogger } from '../../../lib/testutils';
import { appFile } from '../../constants';
import { signingClient } from '../../utils/signing-client';
import { simappChain, wasmdChain } from './chains';
import { run } from './connect';
const fsWriteFileSync = sinon.stub(fs, 'writeFileSync');
const fsReadFileSync = sinon.stub(fs, 'readFileSync');
const mnemonic = 'enlist hip relief stomach skate base shallow young switch frequent cry park';
const registryYaml = `
version: 1

chains:
  local_wasm:
    chain_id: testing
    prefix: wasm
    gas_price: 0.025ucosm
    rpc:
      - http://localhost:26659
  local_simapp:
    chain_id: simd-testing
    prefix: cosmos
    gas_price: 0.025umuon
    rpc:
      - http://localhost:26658`;
const app = {
    src: 'local_wasm',
    dest: 'local_simapp',
};
test.beforeEach(() => {
    sinon.reset();
});
test.serial('connects two chains', async (t) => {
    const logger = new TestLogger();
    const ibcClientSimapp = await signingClient(simappChain, mnemonic);
    const ibcClientWasm = await signingClient(wasmdChain, mnemonic);
    const allConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const allConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const options = {
        home: '/home/user',
        mnemonic,
        src: 'local_simapp',
        dest: 'local_wasm',
    };
    fsReadFileSync.returns(registryYaml);
    fsWriteFileSync.returns();
    await run(options, app, logger);
    const args = fsWriteFileSync.getCall(0).args;
    const contentsRegexp = new RegExp(`src: local_wasm
dest: local_simapp
srcConnection: .+
destConnection: .+
`);
    t.assert(fsWriteFileSync.calledOnce);
    t.is(args[0], path.join(options.home, appFile));
    t.regex(args[1], contentsRegexp);
    t.assert(logger.info.calledOnce);
    t.assert(logger.info.calledWithMatch(/Created connections/));
    const nextAllConnectionsWasm = await ibcClientWasm.query.ibc.connection.allConnections();
    const destConnectionIdMatch = /destConnection: (?<connection>.+)/.exec(args[1]);
    const destConnectionId = destConnectionIdMatch?.groups?.connection;
    assert(destConnectionId);
    const nextConnectionWasm = await ibcClientWasm.query.ibc.connection.connection(destConnectionId);
    const nextAllConnectionsSimapp = await ibcClientSimapp.query.ibc.connection.allConnections();
    const srcConnectionIdMatch = /srcConnection: (?<connection>.+)/.exec(args[1]);
    const srcConnectionId = srcConnectionIdMatch?.groups?.connection;
    assert(srcConnectionId);
    const nextConnectionSimapp = await ibcClientSimapp.query.ibc.connection.connection(srcConnectionId);
    t.is(nextAllConnectionsWasm.connections.length, allConnectionsWasm.connections.length + 1);
    t.is(nextAllConnectionsSimapp.connections.length, allConnectionsSimapp.connections.length + 1);
    t.assert(nextConnectionWasm.connection);
    t.assert(nextConnectionSimapp.connection);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2JpbmFyeS9pYmMtc2V0dXAvY29tbWFuZHMvY29ubmVjdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLElBQUksTUFBTSxLQUFLLENBQUM7QUFDdkIsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBRzFCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTNELE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ25ELE9BQU8sRUFBVyxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFekMsTUFBTSxlQUFlLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDeEQsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFFdEQsTUFBTSxRQUFRLEdBQ1osNkVBQTZFLENBQUM7QUFFaEYsTUFBTSxZQUFZLEdBQUc7Ozs7Ozs7Ozs7Ozs7OzsrQkFlVSxDQUFDO0FBRWhDLE1BQU0sR0FBRyxHQUFHO0lBQ1YsR0FBRyxFQUFFLFlBQVk7SUFDakIsSUFBSSxFQUFFLGNBQWM7Q0FDckIsQ0FBQztBQUVGLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ25CLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNoQixDQUFDLENB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