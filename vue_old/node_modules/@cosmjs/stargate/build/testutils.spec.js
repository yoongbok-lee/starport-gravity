"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifyingDirectSecp256k1HdWallet = exports.ModifyingSecp256k1HdWallet = exports.tendermintIdMatcher = exports.nonNegativeIntegerMatcher = exports.nonExistentAddress = exports.validator = exports.unused = exports.faucet = exports.simapp = exports.fromOneElementArray = exports.makeRandomAddress = exports.makeRandomAddressBytes = exports.pendingWithoutSimapp = exports.simappEnabled = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const crypto_1 = require("@cosmjs/crypto");
const encoding_1 = require("@cosmjs/encoding");
const launchpad_1 = require("@cosmjs/launchpad");
const proto_signing_1 = require("@cosmjs/proto-signing");
const signing_1 = require("./codec/cosmos/tx/signing/v1beta1/signing");
const tx_1 = require("./codec/cosmos/tx/v1beta1/tx");
function simappEnabled() {
    return !!process.env.SIMAPP_ENABLED;
}
exports.simappEnabled = simappEnabled;
function pendingWithoutSimapp() {
    if (!simappEnabled()) {
        return pending("Set SIMAPP_ENABLED to enable Simapp based tests");
    }
}
exports.pendingWithoutSimapp = pendingWithoutSimapp;
function makeRandomAddressBytes() {
    return crypto_1.Random.getBytes(20);
}
exports.makeRandomAddressBytes = makeRandomAddressBytes;
function makeRandomAddress() {
    return encoding_1.Bech32.encode("cosmos", makeRandomAddressBytes());
}
exports.makeRandomAddress = makeRandomAddress;
/** Returns first element. Throws if array has a different length than 1. */
function fromOneElementArray(elements) {
    if (elements.length !== 1)
        throw new Error(`Expected exactly one element but got ${elements.length}`);
    return elements[0];
}
exports.fromOneElementArray = fromOneElementArray;
exports.simapp = {
    tendermintUrl: "localhost:26658",
    tendermintUrlWs: "ws://localhost:26658",
    tendermintUrlHttp: "http://localhost:26658",
    chainId: "simd-testing",
    denomStaking: "ustake",
    denomFee: "ucosm",
    blockTime: 1000,
};
exports.faucet = {
    mnemonic: "economy stock theory fatal elder harbor betray wasp final emotion task crumble siren bottom lizard educate guess current outdoor pair theory focus wife stone",
    pubkey0: {
        type: "tendermint/PubKeySecp256k1",
        value: "A08EGB7ro1ORuFhjOnZcSgwYlpe0DSFjVNUIkNNQxwKQ",
    },
    address0: "cosmos1pkptre7fdkl6gfrzlesjjvhxhlc3r4gmmk8rs6",
};
/** Unused account */
exports.unused = {
    pubkey: {
        type: "tendermint/PubKeySecp256k1",
        value: "ArkCaFUJ/IH+vKBmNRCdUVl3mCAhbopk9jjW4Ko4OfRQ",
    },
    address: "cosmos1cjsxept9rkggzxztslae9ndgpdyt2408lk850u",
    accountNumber: 16,
    sequence: 0,
    balanceStaking: "10000000",
    balanceFee: "1000000000",
};
exports.validator = {
    /**
     * From first gentx's auth_info.signer_infos in scripts/simapp/template/.simapp/config/genesis.json
     *
     * ```
     * jq ".app_state.genutil.gen_txs[0].auth_info.signer_infos[0].public_key" scripts/simapp/template/.simapp/config/genesis.json
     * ```
     */
    pubkey: {
        type: "tendermint/PubKeySecp256k1",
        value: "Ap1EN+TjP611NX0PicqFJXknbLmxBbhgoCgGtRF7SLQk",
    },
    /**
     * delegator_address from /cosmos.staking.v1beta1.MsgCreateValidator in scripts/simapp/template/.simapp/config/genesis.json
     *
     * ```
     * jq ".app_state.genutil.gen_txs[0].body.messages[0].delegator_address" scripts/simapp/template/.simapp/config/genesis.json
     * ```
     */
    delegatorAddress: "cosmos1acf9m2d35rqsk2e7kcgsmkh5ekdjcjh5n86vyq",
    /**
     * validator_address from /cosmos.staking.v1beta1.MsgCreateValidator in scripts/simapp/template/.simapp/config/genesis.json
     *
     * ```
     * jq ".app_state.genutil.gen_txs[0].body.messages[0].validator_address" scripts/simapp/template/.simapp/config/genesis.json
     * ```
     */
    validatorAddress: "cosmosvaloper1acf9m2d35rqsk2e7kcgsmkh5ekdjcjh5knwegn",
    accountNumber: 0,
    sequence: 1,
};
exports.nonExistentAddress = "cosmos1p79apjaufyphcmsn4g07cynqf0wyjuezqu84hd";
exports.nonNegativeIntegerMatcher = /^[0-9]+$/;
exports.tendermintIdMatcher = /^[0-9A-F]{64}$/;
/**
 * A class for testing clients using an Amino signer which modifies the transaction it receives before signing
 */
class ModifyingSecp256k1HdWallet extends launchpad_1.Secp256k1HdWallet {
    static async fromMnemonic(mnemonic, hdPath = proto_signing_1.makeCosmoshubPath(0), prefix = "cosmos") {
        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);
        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked);
        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);
        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;
        return new ModifyingSecp256k1HdWallet(mnemonicChecked, hdPath, privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);
    }
    async signAmino(signerAddress, signDoc) {
        const modifiedSignDoc = Object.assign(Object.assign({}, signDoc), { fee: {
                amount: launchpad_1.coins(3000, "ucosm"),
                gas: "333333",
            }, memo: "This was modified" });
        return super.signAmino(signerAddress, modifiedSignDoc);
    }
}
exports.ModifyingSecp256k1HdWallet = ModifyingSecp256k1HdWallet;
/**
 * A class for testing clients using a direct signer which modifies the transaction it receives before signing
 */
class ModifyingDirectSecp256k1HdWallet extends proto_signing_1.DirectSecp256k1HdWallet {
    static async fromMnemonic(mnemonic, hdPath = proto_signing_1.makeCosmoshubPath(0), prefix = "cosmos") {
        const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);
        const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked);
        const { privkey } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, seed, hdPath);
        const uncompressed = (await crypto_1.Secp256k1.makeKeypair(privkey)).pubkey;
        return new ModifyingDirectSecp256k1HdWallet(mnemonicChecked, hdPath, privkey, crypto_1.Secp256k1.compressPubkey(uncompressed), prefix);
    }
    async signDirect(address, signDoc) {
        const txBody = tx_1.TxBody.decode(signDoc.bodyBytes);
        const modifiedTxBody = tx_1.TxBody.fromPartial(Object.assign(Object.assign({}, txBody), { memo: "This was modified" }));
        const authInfo = tx_1.AuthInfo.decode(signDoc.authInfoBytes);
        const pubkeys = authInfo.signerInfos.map((signerInfo) => signerInfo.publicKey);
        const sequence = authInfo.signerInfos[0].sequence.toNumber();
        const modifiedFeeAmount = launchpad_1.coins(3000, "ucosm");
        const modifiedGasLimit = 333333;
        const modifiedSignDoc = Object.assign(Object.assign({}, signDoc), { bodyBytes: Uint8Array.from(tx_1.TxBody.encode(modifiedTxBody).finish()), authInfoBytes: proto_signing_1.makeAuthInfoBytes(pubkeys, modifiedFeeAmount, modifiedGasLimit, sequence, signing_1.SignMode.SIGN_MODE_DIRECT) });
        return super.signDirect(address, modifiedSignDoc);
    }
}
exports.ModifyingDirectSecp256k1HdWallet = ModifyingDirectSecp256k1HdWallet;
//# sourceMappingURL=testutils.spec.js.map