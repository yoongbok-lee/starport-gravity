"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/naming-convention */
const encoding_1 = require("@cosmjs/encoding");
const proto_signing_1 = require("@cosmjs/proto-signing");
const utils_1 = require("@cosmjs/utils");
const readonly_date_1 = require("readonly-date");
const tx_1 = require("./codec/cosmos/tx/v1beta1/tx");
const stargateclient_1 = require("./stargateclient");
const testutils_spec_1 = require("./testutils.spec");
describe("StargateClient", () => {
    describe("connect", () => {
        it("works", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            expect(client).toBeTruthy();
            client.disconnect();
        });
    });
    describe("getChainId", () => {
        it("works", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            expect(await client.getChainId()).toEqual(testutils_spec_1.simapp.chainId);
            client.disconnect();
        });
        it("caches chain ID", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const openedClient = client;
            const getCodeSpy = spyOn(openedClient.tmClient, "status").and.callThrough();
            expect(await client.getChainId()).toEqual(testutils_spec_1.simapp.chainId); // from network
            expect(await client.getChainId()).toEqual(testutils_spec_1.simapp.chainId); // from cache
            expect(getCodeSpy).toHaveBeenCalledTimes(1);
            client.disconnect();
        });
    });
    describe("getHeight", () => {
        it("works", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const height1 = await client.getHeight();
            expect(height1).toBeGreaterThan(0);
            await utils_1.sleep(testutils_spec_1.simapp.blockTime * 1.4); // tolerate chain being 40% slower than expected
            const height2 = await client.getHeight();
            expect(height2).toBeGreaterThanOrEqual(height1 + 1);
            expect(height2).toBeLessThanOrEqual(height1 + 2);
            client.disconnect();
        });
    });
    describe("getAccount", () => {
        it("works for unused account", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const account = await client.getAccount(testutils_spec_1.unused.address);
            utils_1.assert(account);
            expect(account).toEqual({
                address: testutils_spec_1.unused.address,
                pubkey: null,
                accountNumber: testutils_spec_1.unused.accountNumber,
                sequence: testutils_spec_1.unused.sequence,
            });
            client.disconnect();
        });
        it("works for account with pubkey and non-zero sequence", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const account = await client.getAccount(testutils_spec_1.validator.delegatorAddress);
            utils_1.assert(account);
            expect(account).toEqual({
                address: testutils_spec_1.validator.delegatorAddress,
                pubkey: testutils_spec_1.validator.pubkey,
                accountNumber: testutils_spec_1.validator.accountNumber,
                sequence: testutils_spec_1.validator.sequence,
            });
            client.disconnect();
        });
        it("returns null for non-existent address", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const account = await client.getAccount(testutils_spec_1.nonExistentAddress);
            expect(account).toBeNull();
            client.disconnect();
        });
    });
    describe("getSequence", () => {
        it("works for unused account", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const account = await client.getSequence(testutils_spec_1.unused.address);
            utils_1.assert(account);
            expect(account).toEqual({
                accountNumber: testutils_spec_1.unused.accountNumber,
                sequence: testutils_spec_1.unused.sequence,
            });
            client.disconnect();
        });
        it("returns null for non-existent address", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const account = await client.getSequence(testutils_spec_1.nonExistentAddress);
            expect(account).toBeNull();
            client.disconnect();
        });
    });
    describe("getBlock", () => {
        it("works for latest block", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const response = await client.getBlock();
            expect(response).toEqual(jasmine.objectContaining({
                id: jasmine.stringMatching(testutils_spec_1.tendermintIdMatcher),
                header: jasmine.objectContaining({
                    chainId: await client.getChainId(),
                }),
                txs: jasmine.arrayContaining([]),
            }));
            expect(response.header.height).toBeGreaterThanOrEqual(1);
            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeLessThan(readonly_date_1.ReadonlyDate.now());
            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeGreaterThanOrEqual(readonly_date_1.ReadonlyDate.now() - 5000);
            client.disconnect();
        });
        it("works for block by height", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const height = (await client.getBlock()).header.height;
            const response = await client.getBlock(height - 1);
            expect(response).toEqual(jasmine.objectContaining({
                id: jasmine.stringMatching(testutils_spec_1.tendermintIdMatcher),
                header: jasmine.objectContaining({
                    height: height - 1,
                    chainId: await client.getChainId(),
                }),
                txs: jasmine.arrayContaining([]),
            }));
            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeLessThan(readonly_date_1.ReadonlyDate.now());
            expect(new readonly_date_1.ReadonlyDate(response.header.time).getTime()).toBeGreaterThanOrEqual(readonly_date_1.ReadonlyDate.now() - 5000);
            client.disconnect();
        });
    });
    describe("getBalance", () => {
        it("works for different existing balances", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const response1 = await client.getBalance(testutils_spec_1.unused.address, testutils_spec_1.simapp.denomFee);
            expect(response1).toEqual({
                amount: testutils_spec_1.unused.balanceFee,
                denom: testutils_spec_1.simapp.denomFee,
            });
            const response2 = await client.getBalance(testutils_spec_1.unused.address, testutils_spec_1.simapp.denomStaking);
            expect(response2).toEqual({
                amount: testutils_spec_1.unused.balanceStaking,
                denom: testutils_spec_1.simapp.denomStaking,
            });
            client.disconnect();
        });
        it("returns null for non-existent balance", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const response = await client.getBalance(testutils_spec_1.unused.address, "gintonic");
            expect(response).toBeNull();
            client.disconnect();
        });
        it("returns null for non-existent address", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const response = await client.getBalance(testutils_spec_1.nonExistentAddress, testutils_spec_1.simapp.denomFee);
            expect(response).toBeNull();
            client.disconnect();
        });
    });
    describe("getAllBalancesUnverified", () => {
        it("returns all balances for unused account", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const balances = await client.getAllBalancesUnverified(testutils_spec_1.unused.address);
            expect(balances).toEqual([
                {
                    amount: testutils_spec_1.unused.balanceFee,
                    denom: testutils_spec_1.simapp.denomFee,
                },
                {
                    amount: testutils_spec_1.unused.balanceStaking,
                    denom: testutils_spec_1.simapp.denomStaking,
                },
            ]);
            client.disconnect();
        });
        it("returns an empty list for non-existent account", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const balances = await client.getAllBalancesUnverified(testutils_spec_1.nonExistentAddress);
            expect(balances).toEqual([]);
            client.disconnect();
        });
    });
    describe("broadcastTx", () => {
        it("broadcasts a transaction", async () => {
            testutils_spec_1.pendingWithoutSimapp();
            const client = await stargateclient_1.StargateClient.connect(testutils_spec_1.simapp.tendermintUrl);
            const wallet = await proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic(testutils_spec_1.faucet.mnemonic);
            const [{ address, pubkey: pubkeyBytes }] = await wallet.getAccounts();
            const pubkey = proto_signing_1.encodePubkey({
                type: "tendermint/PubKeySecp256k1",
                value: encoding_1.toBase64(pubkeyBytes),
            });
            const registry = new proto_signing_1.Registry();
            const txBodyFields = {
                typeUrl: "/cosmos.tx.v1beta1.TxBody",
                value: {
                    messages: [
                        {
                            typeUrl: "/cosmos.bank.v1beta1.MsgSend",
                            value: {
                                fromAddress: address,
                                toAddress: testutils_spec_1.makeRandomAddress(),
                                amount: [
                                    {
                                        denom: "ucosm",
                                        amount: "1234567",
                                    },
                                ],
                            },
                        },
                    ],
                },
            };
            const txBodyBytes = registry.encode(txBodyFields);
            const { accountNumber, sequence } = (await client.getSequence(address));
            const feeAmount = [
                {
                    amount: "2000",
                    denom: "ucosm",
                },
            ];
            const gasLimit = 200000;
            const authInfoBytes = proto_signing_1.makeAuthInfoBytes([pubkey], feeAmount, gasLimit, sequence);
            const chainId = await client.getChainId();
            const signDoc = proto_signing_1.makeSignDoc(txBodyBytes, authInfoBytes, chainId, accountNumber);
            const { signature } = await wallet.signDirect(address, signDoc);
            const txRaw = tx_1.TxRaw.fromPartial({
                bodyBytes: txBodyBytes,
                authInfoBytes: authInfoBytes,
                signatures: [encoding_1.fromBase64(signature.signature)],
            });
            const txRawBytes = Uint8Array.from(tx_1.TxRaw.encode(txRaw).finish());
            const txResult = await client.broadcastTx(txRawBytes);
            stargateclient_1.assertIsBroadcastTxSuccess(txResult);
            const { rawLog, transactionHash } = txResult;
            expect(rawLog).toMatch(/{"key":"amount","value":"1234567ucosm"}/);
            expect(transactionHash).toMatch(/^[0-9A-F]{64}$/);
            client.disconnect();
        });
    });
});
//# sourceMappingURL=stargateclient.spec.js.map