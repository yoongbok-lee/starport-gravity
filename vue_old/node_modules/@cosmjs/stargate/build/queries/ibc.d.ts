import { Channel } from "../codec/ibc/core/channel/v1/channel";
import { QueryChannelResponse, QueryChannelsResponse, QueryConnectionChannelsResponse, QueryNextSequenceReceiveResponse, QueryPacketAcknowledgementResponse, QueryPacketAcknowledgementsResponse, QueryPacketCommitmentResponse, QueryPacketCommitmentsResponse, QueryUnreceivedAcksResponse, QueryUnreceivedPacketsResponse } from "../codec/ibc/core/channel/v1/query";
import { QueryClientConnectionsResponse, QueryConnectionResponse, QueryConnectionsResponse } from "../codec/ibc/core/connection/v1/query";
import { QueryClient } from "./queryclient";
export interface IbcExtension {
    readonly ibc: {
        readonly channel: (portId: string, channelId: string) => Promise<Channel | null>;
        readonly packetCommitment: (portId: string, channelId: string, sequence: number) => Promise<Uint8Array>;
        readonly packetAcknowledgement: (portId: string, channelId: string, sequence: number) => Promise<Uint8Array>;
        readonly nextSequenceReceive: (portId: string, channelId: string) => Promise<number | null>;
        readonly unverified: {
            readonly channel: (portId: string, channelId: string) => Promise<QueryChannelResponse>;
            readonly channels: (paginationKey?: Uint8Array) => Promise<QueryChannelsResponse>;
            readonly connectionChannels: (connection: string, paginationKey?: Uint8Array) => Promise<QueryConnectionChannelsResponse>;
            readonly packetCommitment: (portId: string, channelId: string, sequence: number) => Promise<QueryPacketCommitmentResponse>;
            readonly packetCommitments: (portId: string, channelId: string, paginationKey?: Uint8Array) => Promise<QueryPacketCommitmentsResponse>;
            readonly packetAcknowledgement: (portId: string, channelId: string, sequence: number) => Promise<QueryPacketAcknowledgementResponse>;
            readonly packetAcknowledgements: (portId: string, channelId: string, paginationKey?: Uint8Array) => Promise<QueryPacketAcknowledgementsResponse>;
            readonly unreceivedPackets: (portId: string, channelId: string, packetCommitmentSequences: readonly number[]) => Promise<QueryUnreceivedPacketsResponse>;
            readonly unreceivedAcks: (portId: string, channelId: string, packetCommitmentSequences: readonly number[]) => Promise<QueryUnreceivedAcksResponse>;
            readonly nextSequenceReceive: (portId: string, channelId: string) => Promise<QueryNextSequenceReceiveResponse>;
            readonly connection: (connectionId: string) => Promise<QueryConnectionResponse>;
            readonly connections: (paginationKey?: Uint8Array) => Promise<QueryConnectionsResponse>;
            readonly clientConnections: (clientId: string) => Promise<QueryClientConnectionsResponse>;
        };
    };
}
export declare function setupIbcExtension(base: QueryClient): IbcExtension;
