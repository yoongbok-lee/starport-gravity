"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupAuthExtension = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const utils_1 = require("@cosmjs/utils");
const auth_1 = require("../codec/cosmos/auth/v1beta1/auth");
const query_1 = require("../codec/cosmos/auth/v1beta1/query");
const any_1 = require("../codec/google/protobuf/any");
const utils_2 = require("./utils");
function setupAuthExtension(base) {
    const rpc = utils_2.createRpc(base);
    // Use this service to get easy typed access to query methods
    // This cannot be used for proof verification
    const queryService = new query_1.QueryClientImpl(rpc);
    return {
        auth: {
            account: async (address) => {
                // https://github.com/cosmos/cosmos-sdk/blob/8cab43c8120fec5200c3459cbf4a92017bb6f287/x/auth/types/keys.go#L29-L32
                const key = Uint8Array.from([0x01, ...utils_2.toAccAddress(address)]);
                const responseData = await base.queryVerified("acc", key);
                if (responseData.length === 0)
                    return null;
                const account = any_1.Any.decode(responseData);
                switch (account.typeUrl) {
                    case "/cosmos.auth.v1beta1.BaseAccount": {
                        return auth_1.BaseAccount.decode(account.value);
                    }
                    default:
                        throw new Error(`Unsupported type: '${account.typeUrl}'`);
                }
            },
            unverified: {
                account: async (address) => {
                    const { account } = await queryService.Account({ address: address });
                    if (!account)
                        return null;
                    switch (account.typeUrl) {
                        case "/cosmos.auth.v1beta1.BaseAccount": {
                            utils_1.assert(account.value);
                            return auth_1.BaseAccount.decode(account.value);
                        }
                        default:
                            throw new Error(`Unsupported type: '${account.typeUrl}'`);
                    }
                },
            },
        },
    };
}
exports.setupAuthExtension = setupAuthExtension;
//# sourceMappingURL=auth.js.map