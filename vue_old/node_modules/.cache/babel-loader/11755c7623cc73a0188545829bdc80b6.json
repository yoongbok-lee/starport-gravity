{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.distribution.v1beta1/module/types/cosmos/distribution/v1beta1/tx.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.distribution.v1beta1/module/types/cosmos/distribution/v1beta1/tx.js","mtime":1620801165467},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvaG9tZS91YnVudHUvc3RhcnBvcnQtZ3Jhdml0eS92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS91YnVudHUvc3RhcnBvcnQtZ3Jhdml0eS92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9ob21lL3VidW50dS9zdGFycG9ydC1ncmF2aXR5L3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9ob21lL3VidW50dS9zdGFycG9ydC1ncmF2aXR5L3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQ4LWFycmF5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbmRleC1vZi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudXJsLnRvLWpzb24uanMiOwoKLyogZXNsaW50LWRpc2FibGUgKi8KaW1wb3J0IHsgUmVhZGVyLCBXcml0ZXIgfSBmcm9tICJwcm90b2J1ZmpzL21pbmltYWwiOwppbXBvcnQgeyBDb2luIH0gZnJvbSAiLi4vLi4vLi4vY29zbW9zL2Jhc2UvdjFiZXRhMS9jb2luIjsKZXhwb3J0IHZhciBwcm90b2J1ZlBhY2thZ2UgPSAiY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExIjsKdmFyIGJhc2VNc2dTZXRXaXRoZHJhd0FkZHJlc3MgPSB7CiAgZGVsZWdhdG9yQWRkcmVzczogIiIsCiAgd2l0aGRyYXdBZGRyZXNzOiAiIgp9OwpleHBvcnQgdmFyIE1zZ1NldFdpdGhkcmF3QWRkcmVzcyA9IHsKICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlKSB7CiAgICB2YXIgd3JpdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBXcml0ZXIuY3JlYXRlKCk7CgogICAgaWYgKG1lc3NhZ2UuZGVsZWdhdG9yQWRkcmVzcyAhPT0gIiIpIHsKICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UuZGVsZWdhdG9yQWRkcmVzcyk7CiAgICB9CgogICAgaWYgKG1lc3NhZ2Uud2l0aGRyYXdBZGRyZXNzICE9PSAiIikgewogICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS53aXRoZHJhd0FkZHJlc3MpOwogICAgfQoKICAgIHJldHVybiB3cml0ZXI7CiAgfSwKICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7CiAgICB2YXIgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gbmV3IFJlYWRlcihpbnB1dCkgOiBpbnB1dDsKICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoOwoKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ1NldFdpdGhkcmF3QWRkcmVzcyk7CgogICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHsKICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTsKCiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgbWVzc2FnZS5kZWxlZ2F0b3JBZGRyZXNzID0gcmVhZGVyLnN0cmluZygpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgMjoKICAgICAgICAgIG1lc3NhZ2Uud2l0aGRyYXdBZGRyZXNzID0gcmVhZGVyLnN0cmluZygpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBtZXNzYWdlOwogIH0sCiAgZnJvbUpTT046IGZ1bmN0aW9uIGZyb21KU09OKG9iamVjdCkgewogICAgdmFyIG1lc3NhZ2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlTXNnU2V0V2l0aGRyYXdBZGRyZXNzKTsKCiAgICBpZiAob2JqZWN0LmRlbGVnYXRvckFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZGVsZWdhdG9yQWRkcmVzcyAhPT0gbnVsbCkgewogICAgICBtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MgPSBTdHJpbmcob2JqZWN0LmRlbGVnYXRvckFkZHJlc3MpOwogICAgfSBlbHNlIHsKICAgICAgbWVzc2FnZS5kZWxlZ2F0b3JBZGRyZXNzID0gIiI7CiAgICB9CgogICAgaWYgKG9iamVjdC53aXRoZHJhd0FkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Qud2l0aGRyYXdBZGRyZXNzICE9PSBudWxsKSB7CiAgICAgIG1lc3NhZ2Uud2l0aGRyYXdBZGRyZXNzID0gU3RyaW5nKG9iamVjdC53aXRoZHJhd0FkZHJlc3MpOwogICAgfSBlbHNlIHsKICAgICAgbWVzc2FnZS53aXRoZHJhd0FkZHJlc3MgPSAiIjsKICAgIH0KCiAgICByZXR1cm4gbWVzc2FnZTsKICB9LAogIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKG1lc3NhZ2UpIHsKICAgIHZhciBvYmogPSB7fTsKICAgIG1lc3NhZ2UuZGVsZWdhdG9yQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIChvYmouZGVsZWdhdG9yQWRkcmVzcyA9IG1lc3NhZ2UuZGVsZWdhdG9yQWRkcmVzcyk7CiAgICBtZXNzYWdlLndpdGhkcmF3QWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIChvYmoud2l0aGRyYXdBZGRyZXNzID0gbWVzc2FnZS53aXRoZHJhd0FkZHJlc3MpOwogICAgcmV0dXJuIG9iajsKICB9LAogIGZyb21QYXJ0aWFsOiBmdW5jdGlvbiBmcm9tUGFydGlhbChvYmplY3QpIHsKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ1NldFdpdGhkcmF3QWRkcmVzcyk7CgogICAgaWYgKG9iamVjdC5kZWxlZ2F0b3JBZGRyZXNzICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmRlbGVnYXRvckFkZHJlc3MgIT09IG51bGwpIHsKICAgICAgbWVzc2FnZS5kZWxlZ2F0b3JBZGRyZXNzID0gb2JqZWN0LmRlbGVnYXRvckFkZHJlc3M7CiAgICB9IGVsc2UgewogICAgICBtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MgPSAiIjsKICAgIH0KCiAgICBpZiAob2JqZWN0LndpdGhkcmF3QWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC53aXRoZHJhd0FkZHJlc3MgIT09IG51bGwpIHsKICAgICAgbWVzc2FnZS53aXRoZHJhd0FkZHJlc3MgPSBvYmplY3Qud2l0aGRyYXdBZGRyZXNzOwogICAgfSBlbHNlIHsKICAgICAgbWVzc2FnZS53aXRoZHJhd0FkZHJlc3MgPSAiIjsKICAgIH0KCiAgICByZXR1cm4gbWVzc2FnZTsKICB9Cn07CnZhciBiYXNlTXNnU2V0V2l0aGRyYXdBZGRyZXNzUmVzcG9uc2UgPSB7fTsKZXhwb3J0IHZhciBNc2dTZXRXaXRoZHJhd0FkZHJlc3NSZXNwb25zZSA9IHsKICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZShfKSB7CiAgICB2YXIgd3JpdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBXcml0ZXIuY3JlYXRlKCk7CiAgICByZXR1cm4gd3JpdGVyOwogIH0sCiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkgewogICAgdmFyIHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSA/IG5ldyBSZWFkZXIoaW5wdXQpIDogaW5wdXQ7CiAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDsKCiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dTZXRXaXRoZHJhd0FkZHJlc3NSZXNwb25zZSk7CgogICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHsKICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTsKCiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG1lc3NhZ2U7CiAgfSwKICBmcm9tSlNPTjogZnVuY3Rpb24gZnJvbUpTT04oXykgewogICAgdmFyIG1lc3NhZ2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlTXNnU2V0V2l0aGRyYXdBZGRyZXNzUmVzcG9uc2UpOwoKICAgIHJldHVybiBtZXNzYWdlOwogIH0sCiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oXykgewogICAgdmFyIG9iaiA9IHt9OwogICAgcmV0dXJuIG9iajsKICB9LAogIGZyb21QYXJ0aWFsOiBmdW5jdGlvbiBmcm9tUGFydGlhbChfKSB7CiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dTZXRXaXRoZHJhd0FkZHJlc3NSZXNwb25zZSk7CgogICAgcmV0dXJuIG1lc3NhZ2U7CiAgfQp9Owp2YXIgYmFzZU1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkID0gewogIGRlbGVnYXRvckFkZHJlc3M6ICIiLAogIHZhbGlkYXRvckFkZHJlc3M6ICIiCn07CmV4cG9ydCB2YXIgTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQgPSB7CiAgZW5jb2RlOiBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSkgewogICAgdmFyIHdyaXRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogV3JpdGVyLmNyZWF0ZSgpOwoKICAgIGlmIChtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MgIT09ICIiKSB7CiAgICAgIHdyaXRlci51aW50MzIoMTApLnN0cmluZyhtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MpOwogICAgfQoKICAgIGlmIChtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgIT09ICIiKSB7CiAgICAgIHdyaXRlci51aW50MzIoMTgpLnN0cmluZyhtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MpOwogICAgfQoKICAgIHJldHVybiB3cml0ZXI7CiAgfSwKICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7CiAgICB2YXIgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gbmV3IFJlYWRlcihpbnB1dCkgOiBpbnB1dDsKICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoOwoKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkKTsKCiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkgewogICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpOwoKICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICBtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MgPSByZWFkZXIuc3RyaW5nKCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAyOgogICAgICAgICAgbWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzID0gcmVhZGVyLnN0cmluZygpOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBtZXNzYWdlOwogIH0sCiAgZnJvbUpTT046IGZ1bmN0aW9uIGZyb21KU09OKG9iamVjdCkgewogICAgdmFyIG1lc3NhZ2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQpOwoKICAgIGlmIChvYmplY3QuZGVsZWdhdG9yQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5kZWxlZ2F0b3JBZGRyZXNzICE9PSBudWxsKSB7CiAgICAgIG1lc3NhZ2UuZGVsZWdhdG9yQWRkcmVzcyA9IFN0cmluZyhvYmplY3QuZGVsZWdhdG9yQWRkcmVzcyk7CiAgICB9IGVsc2UgewogICAgICBtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MgPSAiIjsKICAgIH0KCiAgICBpZiAob2JqZWN0LnZhbGlkYXRvckFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudmFsaWRhdG9yQWRkcmVzcyAhPT0gbnVsbCkgewogICAgICBtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgPSBTdHJpbmcob2JqZWN0LnZhbGlkYXRvckFkZHJlc3MpOwogICAgfSBlbHNlIHsKICAgICAgbWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzID0gIiI7CiAgICB9CgogICAgcmV0dXJuIG1lc3NhZ2U7CiAgfSwKICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihtZXNzYWdlKSB7CiAgICB2YXIgb2JqID0ge307CiAgICBtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiAob2JqLmRlbGVnYXRvckFkZHJlc3MgPSBtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MpOwogICAgbWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzICE9PSB1bmRlZmluZWQgJiYgKG9iai52YWxpZGF0b3JBZGRyZXNzID0gbWVzc2FnZS52YWxpZGF0b3JBZGRyZXNzKTsKICAgIHJldHVybiBvYmo7CiAgfSwKICBmcm9tUGFydGlhbDogZnVuY3Rpb24gZnJvbVBhcnRpYWwob2JqZWN0KSB7CiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZCk7CgogICAgaWYgKG9iamVjdC5kZWxlZ2F0b3JBZGRyZXNzICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmRlbGVnYXRvckFkZHJlc3MgIT09IG51bGwpIHsKICAgICAgbWVzc2FnZS5kZWxlZ2F0b3JBZGRyZXNzID0gb2JqZWN0LmRlbGVnYXRvckFkZHJlc3M7CiAgICB9IGVsc2UgewogICAgICBtZXNzYWdlLmRlbGVnYXRvckFkZHJlc3MgPSAiIjsKICAgIH0KCiAgICBpZiAob2JqZWN0LnZhbGlkYXRvckFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudmFsaWRhdG9yQWRkcmVzcyAhPT0gbnVsbCkgewogICAgICBtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgPSBvYmplY3QudmFsaWRhdG9yQWRkcmVzczsKICAgIH0gZWxzZSB7CiAgICAgIG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyA9ICIiOwogICAgfQoKICAgIHJldHVybiBtZXNzYWdlOwogIH0KfTsKdmFyIGJhc2VNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlID0ge307CmV4cG9ydCB2YXIgTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmRSZXNwb25zZSA9IHsKICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZShfKSB7CiAgICB2YXIgd3JpdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBXcml0ZXIuY3JlYXRlKCk7CiAgICByZXR1cm4gd3JpdGVyOwogIH0sCiAgZGVjb2RlOiBmdW5jdGlvbiBkZWNvZGUoaW5wdXQsIGxlbmd0aCkgewogICAgdmFyIHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSA/IG5ldyBSZWFkZXIoaW5wdXQpIDogaW5wdXQ7CiAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDsKCiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlKTsKCiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkgewogICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpOwoKICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbWVzc2FnZTsKICB9LAogIGZyb21KU09OOiBmdW5jdGlvbiBmcm9tSlNPTihfKSB7CiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlKTsKCiAgICByZXR1cm4gbWVzc2FnZTsKICB9LAogIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKF8pIHsKICAgIHZhciBvYmogPSB7fTsKICAgIHJldHVybiBvYmo7CiAgfSwKICBmcm9tUGFydGlhbDogZnVuY3Rpb24gZnJvbVBhcnRpYWwoXykgewogICAgdmFyIG1lc3NhZ2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmRSZXNwb25zZSk7CgogICAgcmV0dXJuIG1lc3NhZ2U7CiAgfQp9Owp2YXIgYmFzZU1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvbiA9IHsKICB2YWxpZGF0b3JBZGRyZXNzOiAiIgp9OwpleHBvcnQgdmFyIE1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvbiA9IHsKICBlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlKSB7CiAgICB2YXIgd3JpdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBXcml0ZXIuY3JlYXRlKCk7CgogICAgaWYgKG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyAhPT0gIiIpIHsKICAgICAgd3JpdGVyLnVpbnQzMigxMCkuc3RyaW5nKG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyk7CiAgICB9CgogICAgcmV0dXJuIHdyaXRlcjsKICB9LAogIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlKGlucHV0LCBsZW5ndGgpIHsKICAgIHZhciByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgPyBuZXcgUmVhZGVyKGlucHV0KSA6IGlucHV0OwogICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7CgogICAgdmFyIG1lc3NhZ2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlTXNnV2l0aGRyYXdWYWxpZGF0b3JDb21taXNzaW9uKTsKCiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkgewogICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpOwoKICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICBtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgPSByZWFkZXIuc3RyaW5nKCk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIG1lc3NhZ2U7CiAgfSwKICBmcm9tSlNPTjogZnVuY3Rpb24gZnJvbUpTT04ob2JqZWN0KSB7CiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb24pOwoKICAgIGlmIChvYmplY3QudmFsaWRhdG9yQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC52YWxpZGF0b3JBZGRyZXNzICE9PSBudWxsKSB7CiAgICAgIG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyA9IFN0cmluZyhvYmplY3QudmFsaWRhdG9yQWRkcmVzcyk7CiAgICB9IGVsc2UgewogICAgICBtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgPSAiIjsKICAgIH0KCiAgICByZXR1cm4gbWVzc2FnZTsKICB9LAogIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKG1lc3NhZ2UpIHsKICAgIHZhciBvYmogPSB7fTsKICAgIG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyAhPT0gdW5kZWZpbmVkICYmIChvYmoudmFsaWRhdG9yQWRkcmVzcyA9IG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyk7CiAgICByZXR1cm4gb2JqOwogIH0sCiAgZnJvbVBhcnRpYWw6IGZ1bmN0aW9uIGZyb21QYXJ0aWFsKG9iamVjdCkgewogICAgdmFyIG1lc3NhZ2UgPSBfb2JqZWN0U3ByZWFkKHt9LCBiYXNlTXNnV2l0aGRyYXdWYWxpZGF0b3JDb21taXNzaW9uKTsKCiAgICBpZiAob2JqZWN0LnZhbGlkYXRvckFkZHJlc3MgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QudmFsaWRhdG9yQWRkcmVzcyAhPT0gbnVsbCkgewogICAgICBtZXNzYWdlLnZhbGlkYXRvckFkZHJlc3MgPSBvYmplY3QudmFsaWRhdG9yQWRkcmVzczsKICAgIH0gZWxzZSB7CiAgICAgIG1lc3NhZ2UudmFsaWRhdG9yQWRkcmVzcyA9ICIiOwogICAgfQoKICAgIHJldHVybiBtZXNzYWdlOwogIH0KfTsKdmFyIGJhc2VNc2dXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb25SZXNwb25zZSA9IHt9OwpleHBvcnQgdmFyIE1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvblJlc3BvbnNlID0gewogIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlKF8pIHsKICAgIHZhciB3cml0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFdyaXRlci5jcmVhdGUoKTsKICAgIHJldHVybiB3cml0ZXI7CiAgfSwKICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7CiAgICB2YXIgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gbmV3IFJlYWRlcihpbnB1dCkgOiBpbnB1dDsKICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoOwoKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvblJlc3BvbnNlKTsKCiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkgewogICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpOwoKICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbWVzc2FnZTsKICB9LAogIGZyb21KU09OOiBmdW5jdGlvbiBmcm9tSlNPTihfKSB7CiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb25SZXNwb25zZSk7CgogICAgcmV0dXJuIG1lc3NhZ2U7CiAgfSwKICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihfKSB7CiAgICB2YXIgb2JqID0ge307CiAgICByZXR1cm4gb2JqOwogIH0sCiAgZnJvbVBhcnRpYWw6IGZ1bmN0aW9uIGZyb21QYXJ0aWFsKF8pIHsKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvblJlc3BvbnNlKTsKCiAgICByZXR1cm4gbWVzc2FnZTsKICB9Cn07CnZhciBiYXNlTXNnRnVuZENvbW11bml0eVBvb2wgPSB7CiAgZGVwb3NpdG9yOiAiIgp9OwpleHBvcnQgdmFyIE1zZ0Z1bmRDb21tdW5pdHlQb29sID0gewogIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UpIHsKICAgIHZhciB3cml0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFdyaXRlci5jcmVhdGUoKTsKCiAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobWVzc2FnZS5hbW91bnQpLAogICAgICAgIF9zdGVwOwoKICAgIHRyeSB7CiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgdmFyIHYgPSBfc3RlcC52YWx1ZTsKICAgICAgICBDb2luLmVuY29kZSh2LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpOwogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgIH0gZmluYWxseSB7CiAgICAgIF9pdGVyYXRvci5mKCk7CiAgICB9CgogICAgaWYgKG1lc3NhZ2UuZGVwb3NpdG9yICE9PSAiIikgewogICAgICB3cml0ZXIudWludDMyKDE4KS5zdHJpbmcobWVzc2FnZS5kZXBvc2l0b3IpOwogICAgfQoKICAgIHJldHVybiB3cml0ZXI7CiAgfSwKICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7CiAgICB2YXIgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gbmV3IFJlYWRlcihpbnB1dCkgOiBpbnB1dDsKICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoOwoKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ0Z1bmRDb21tdW5pdHlQb29sKTsKCiAgICBtZXNzYWdlLmFtb3VudCA9IFtdOwoKICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7CiAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7CgogICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIG1lc3NhZ2UuYW1vdW50LnB1c2goQ29pbi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBtZXNzYWdlLmRlcG9zaXRvciA9IHJlYWRlci5zdHJpbmcoKTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbWVzc2FnZTsKICB9LAogIGZyb21KU09OOiBmdW5jdGlvbiBmcm9tSlNPTihvYmplY3QpIHsKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ0Z1bmRDb21tdW5pdHlQb29sKTsKCiAgICBtZXNzYWdlLmFtb3VudCA9IFtdOwoKICAgIGlmIChvYmplY3QuYW1vdW50ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmFtb3VudCAhPT0gbnVsbCkgewogICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG9iamVjdC5hbW91bnQpLAogICAgICAgICAgX3N0ZXAyOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGUgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICBtZXNzYWdlLmFtb3VudC5wdXNoKENvaW4uZnJvbUpTT04oZSkpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yMi5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgIH0KICAgIH0KCiAgICBpZiAob2JqZWN0LmRlcG9zaXRvciAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5kZXBvc2l0b3IgIT09IG51bGwpIHsKICAgICAgbWVzc2FnZS5kZXBvc2l0b3IgPSBTdHJpbmcob2JqZWN0LmRlcG9zaXRvcik7CiAgICB9IGVsc2UgewogICAgICBtZXNzYWdlLmRlcG9zaXRvciA9ICIiOwogICAgfQoKICAgIHJldHVybiBtZXNzYWdlOwogIH0sCiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04obWVzc2FnZSkgewogICAgdmFyIG9iaiA9IHt9OwoKICAgIGlmIChtZXNzYWdlLmFtb3VudCkgewogICAgICBvYmouYW1vdW50ID0gbWVzc2FnZS5hbW91bnQubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgcmV0dXJuIGUgPyBDb2luLnRvSlNPTihlKSA6IHVuZGVmaW5lZDsKICAgICAgfSk7CiAgICB9IGVsc2UgewogICAgICBvYmouYW1vdW50ID0gW107CiAgICB9CgogICAgbWVzc2FnZS5kZXBvc2l0b3IgIT09IHVuZGVmaW5lZCAmJiAob2JqLmRlcG9zaXRvciA9IG1lc3NhZ2UuZGVwb3NpdG9yKTsKICAgIHJldHVybiBvYmo7CiAgfSwKICBmcm9tUGFydGlhbDogZnVuY3Rpb24gZnJvbVBhcnRpYWwob2JqZWN0KSB7CiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dGdW5kQ29tbXVuaXR5UG9vbCk7CgogICAgbWVzc2FnZS5hbW91bnQgPSBbXTsKCiAgICBpZiAob2JqZWN0LmFtb3VudCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5hbW91bnQgIT09IG51bGwpIHsKICAgICAgdmFyIF9pdGVyYXRvcjMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvYmplY3QuYW1vdW50KSwKICAgICAgICAgIF9zdGVwMzsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBlID0gX3N0ZXAzLnZhbHVlOwogICAgICAgICAgbWVzc2FnZS5hbW91bnQucHVzaChDb2luLmZyb21QYXJ0aWFsKGUpKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICB9CiAgICB9CgogICAgaWYgKG9iamVjdC5kZXBvc2l0b3IgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZGVwb3NpdG9yICE9PSBudWxsKSB7CiAgICAgIG1lc3NhZ2UuZGVwb3NpdG9yID0gb2JqZWN0LmRlcG9zaXRvcjsKICAgIH0gZWxzZSB7CiAgICAgIG1lc3NhZ2UuZGVwb3NpdG9yID0gIiI7CiAgICB9CgogICAgcmV0dXJuIG1lc3NhZ2U7CiAgfQp9Owp2YXIgYmFzZU1zZ0Z1bmRDb21tdW5pdHlQb29sUmVzcG9uc2UgPSB7fTsKZXhwb3J0IHZhciBNc2dGdW5kQ29tbXVuaXR5UG9vbFJlc3BvbnNlID0gewogIGVuY29kZTogZnVuY3Rpb24gZW5jb2RlKF8pIHsKICAgIHZhciB3cml0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IFdyaXRlci5jcmVhdGUoKTsKICAgIHJldHVybiB3cml0ZXI7CiAgfSwKICBkZWNvZGU6IGZ1bmN0aW9uIGRlY29kZShpbnB1dCwgbGVuZ3RoKSB7CiAgICB2YXIgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gbmV3IFJlYWRlcihpbnB1dCkgOiBpbnB1dDsKICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoOwoKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ0Z1bmRDb21tdW5pdHlQb29sUmVzcG9uc2UpOwoKICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7CiAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7CgogICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykgewogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIHJldHVybiBtZXNzYWdlOwogIH0sCiAgZnJvbUpTT046IGZ1bmN0aW9uIGZyb21KU09OKF8pIHsKICAgIHZhciBtZXNzYWdlID0gX29iamVjdFNwcmVhZCh7fSwgYmFzZU1zZ0Z1bmRDb21tdW5pdHlQb29sUmVzcG9uc2UpOwoKICAgIHJldHVybiBtZXNzYWdlOwogIH0sCiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oXykgewogICAgdmFyIG9iaiA9IHt9OwogICAgcmV0dXJuIG9iajsKICB9LAogIGZyb21QYXJ0aWFsOiBmdW5jdGlvbiBmcm9tUGFydGlhbChfKSB7CiAgICB2YXIgbWVzc2FnZSA9IF9vYmplY3RTcHJlYWQoe30sIGJhc2VNc2dGdW5kQ29tbXVuaXR5UG9vbFJlc3BvbnNlKTsKCiAgICByZXR1cm4gbWVzc2FnZTsKICB9Cn07CmV4cG9ydCB2YXIgTXNnQ2xpZW50SW1wbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTXNnQ2xpZW50SW1wbChycGMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNc2dDbGllbnRJbXBsKTsKCiAgICB0aGlzLnJwYyA9IHJwYzsKICB9CgogIF9jcmVhdGVDbGFzcyhNc2dDbGllbnRJbXBsLCBbewogICAga2V5OiAiU2V0V2l0aGRyYXdBZGRyZXNzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRXaXRoZHJhd0FkZHJlc3MocmVxdWVzdCkgewogICAgICB2YXIgZGF0YSA9IE1zZ1NldFdpdGhkcmF3QWRkcmVzcy5lbmNvZGUocmVxdWVzdCkuZmluaXNoKCk7CiAgICAgIHZhciBwcm9taXNlID0gdGhpcy5ycGMucmVxdWVzdCgiY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZyIsICJTZXRXaXRoZHJhd0FkZHJlc3MiLCBkYXRhKTsKICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIHJldHVybiBNc2dTZXRXaXRoZHJhd0FkZHJlc3NSZXNwb25zZS5kZWNvZGUobmV3IFJlYWRlcihkYXRhKSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIldpdGhkcmF3RGVsZWdhdG9yUmV3YXJkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBXaXRoZHJhd0RlbGVnYXRvclJld2FyZChyZXF1ZXN0KSB7CiAgICAgIHZhciBkYXRhID0gTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQuZW5jb2RlKHJlcXVlc3QpLmZpbmlzaCgpOwogICAgICB2YXIgcHJvbWlzZSA9IHRoaXMucnBjLnJlcXVlc3QoImNvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5Nc2ciLCAiV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQiLCBkYXRhKTsKICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIHJldHVybiBNc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZFJlc3BvbnNlLmRlY29kZShuZXcgUmVhZGVyKGRhdGEpKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiV2l0aGRyYXdWYWxpZGF0b3JDb21taXNzaW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb24ocmVxdWVzdCkgewogICAgICB2YXIgZGF0YSA9IE1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvbi5lbmNvZGUocmVxdWVzdCkuZmluaXNoKCk7CiAgICAgIHZhciBwcm9taXNlID0gdGhpcy5ycGMucmVxdWVzdCgiY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZyIsICJXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb24iLCBkYXRhKTsKICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIHJldHVybiBNc2dXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb25SZXNwb25zZS5kZWNvZGUobmV3IFJlYWRlcihkYXRhKSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIkZ1bmRDb21tdW5pdHlQb29sIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBGdW5kQ29tbXVuaXR5UG9vbChyZXF1ZXN0KSB7CiAgICAgIHZhciBkYXRhID0gTXNnRnVuZENvbW11bml0eVBvb2wuZW5jb2RlKHJlcXVlc3QpLmZpbmlzaCgpOwogICAgICB2YXIgcHJvbWlzZSA9IHRoaXMucnBjLnJlcXVlc3QoImNvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5Nc2ciLCAiRnVuZENvbW11bml0eVBvb2wiLCBkYXRhKTsKICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIHJldHVybiBNc2dGdW5kQ29tbXVuaXR5UG9vbFJlc3BvbnNlLmRlY29kZShuZXcgUmVhZGVyKGRhdGEpKTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTXNnQ2xpZW50SW1wbDsKfSgpOw=="},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.distribution.v1beta1/module/types/cosmos/distribution/v1beta1/tx.js"],"names":["Reader","Writer","Coin","protobufPackage","baseMsgSetWithdrawAddress","delegatorAddress","withdrawAddress","MsgSetWithdrawAddress","encode","message","writer","create","uint32","string","decode","input","length","reader","Uint8Array","end","undefined","len","pos","tag","skipType","fromJSON","object","String","toJSON","obj","fromPartial","baseMsgSetWithdrawAddressResponse","MsgSetWithdrawAddressResponse","_","baseMsgWithdrawDelegatorReward","validatorAddress","MsgWithdrawDelegatorReward","baseMsgWithdrawDelegatorRewardResponse","MsgWithdrawDelegatorRewardResponse","baseMsgWithdrawValidatorCommission","MsgWithdrawValidatorCommission","baseMsgWithdrawValidatorCommissionResponse","MsgWithdrawValidatorCommissionResponse","baseMsgFundCommunityPool","depositor","MsgFundCommunityPool","amount","v","fork","ldelim","push","e","map","baseMsgFundCommunityPoolResponse","MsgFundCommunityPoolResponse","MsgClientImpl","rpc","request","data","finish","promise","then"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { Reader, Writer } from \"protobufjs/minimal\";\nimport { Coin } from \"../../../cosmos/base/v1beta1/coin\";\nexport const protobufPackage = \"cosmos.distribution.v1beta1\";\nconst baseMsgSetWithdrawAddress = {\n    delegatorAddress: \"\",\n    withdrawAddress: \"\",\n};\nexport const MsgSetWithdrawAddress = {\n    encode(message, writer = Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.withdrawAddress !== \"\") {\n            writer.uint32(18).string(message.withdrawAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgSetWithdrawAddress };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.withdrawAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgSetWithdrawAddress };\n        if (object.delegatorAddress !== undefined &&\n            object.delegatorAddress !== null) {\n            message.delegatorAddress = String(object.delegatorAddress);\n        }\n        else {\n            message.delegatorAddress = \"\";\n        }\n        if (object.withdrawAddress !== undefined &&\n            object.withdrawAddress !== null) {\n            message.withdrawAddress = String(object.withdrawAddress);\n        }\n        else {\n            message.withdrawAddress = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.withdrawAddress !== undefined &&\n            (obj.withdrawAddress = message.withdrawAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgSetWithdrawAddress };\n        if (object.delegatorAddress !== undefined &&\n            object.delegatorAddress !== null) {\n            message.delegatorAddress = object.delegatorAddress;\n        }\n        else {\n            message.delegatorAddress = \"\";\n        }\n        if (object.withdrawAddress !== undefined &&\n            object.withdrawAddress !== null) {\n            message.withdrawAddress = object.withdrawAddress;\n        }\n        else {\n            message.withdrawAddress = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgSetWithdrawAddressResponse = {};\nexport const MsgSetWithdrawAddressResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgSetWithdrawAddressResponse,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = {\n            ...baseMsgSetWithdrawAddressResponse,\n        };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = {\n            ...baseMsgSetWithdrawAddressResponse,\n        };\n        return message;\n    },\n};\nconst baseMsgWithdrawDelegatorReward = {\n    delegatorAddress: \"\",\n    validatorAddress: \"\",\n};\nexport const MsgWithdrawDelegatorReward = {\n    encode(message, writer = Writer.create()) {\n        if (message.delegatorAddress !== \"\") {\n            writer.uint32(10).string(message.delegatorAddress);\n        }\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(18).string(message.validatorAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgWithdrawDelegatorReward,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.delegatorAddress = reader.string();\n                    break;\n                case 2:\n                    message.validatorAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseMsgWithdrawDelegatorReward,\n        };\n        if (object.delegatorAddress !== undefined &&\n            object.delegatorAddress !== null) {\n            message.delegatorAddress = String(object.delegatorAddress);\n        }\n        else {\n            message.delegatorAddress = \"\";\n        }\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = String(object.validatorAddress);\n        }\n        else {\n            message.validatorAddress = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.delegatorAddress !== undefined &&\n            (obj.delegatorAddress = message.delegatorAddress);\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseMsgWithdrawDelegatorReward,\n        };\n        if (object.delegatorAddress !== undefined &&\n            object.delegatorAddress !== null) {\n            message.delegatorAddress = object.delegatorAddress;\n        }\n        else {\n            message.delegatorAddress = \"\";\n        }\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = object.validatorAddress;\n        }\n        else {\n            message.validatorAddress = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgWithdrawDelegatorRewardResponse = {};\nexport const MsgWithdrawDelegatorRewardResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgWithdrawDelegatorRewardResponse,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = {\n            ...baseMsgWithdrawDelegatorRewardResponse,\n        };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = {\n            ...baseMsgWithdrawDelegatorRewardResponse,\n        };\n        return message;\n    },\n};\nconst baseMsgWithdrawValidatorCommission = { validatorAddress: \"\" };\nexport const MsgWithdrawValidatorCommission = {\n    encode(message, writer = Writer.create()) {\n        if (message.validatorAddress !== \"\") {\n            writer.uint32(10).string(message.validatorAddress);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgWithdrawValidatorCommission,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.validatorAddress = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = {\n            ...baseMsgWithdrawValidatorCommission,\n        };\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = String(object.validatorAddress);\n        }\n        else {\n            message.validatorAddress = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.validatorAddress !== undefined &&\n            (obj.validatorAddress = message.validatorAddress);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = {\n            ...baseMsgWithdrawValidatorCommission,\n        };\n        if (object.validatorAddress !== undefined &&\n            object.validatorAddress !== null) {\n            message.validatorAddress = object.validatorAddress;\n        }\n        else {\n            message.validatorAddress = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgWithdrawValidatorCommissionResponse = {};\nexport const MsgWithdrawValidatorCommissionResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgWithdrawValidatorCommissionResponse,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = {\n            ...baseMsgWithdrawValidatorCommissionResponse,\n        };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = {\n            ...baseMsgWithdrawValidatorCommissionResponse,\n        };\n        return message;\n    },\n};\nconst baseMsgFundCommunityPool = { depositor: \"\" };\nexport const MsgFundCommunityPool = {\n    encode(message, writer = Writer.create()) {\n        for (const v of message.amount) {\n            Coin.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.depositor !== \"\") {\n            writer.uint32(18).string(message.depositor);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseMsgFundCommunityPool };\n        message.amount = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.amount.push(Coin.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.depositor = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseMsgFundCommunityPool };\n        message.amount = [];\n        if (object.amount !== undefined && object.amount !== null) {\n            for (const e of object.amount) {\n                message.amount.push(Coin.fromJSON(e));\n            }\n        }\n        if (object.depositor !== undefined && object.depositor !== null) {\n            message.depositor = String(object.depositor);\n        }\n        else {\n            message.depositor = \"\";\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        if (message.amount) {\n            obj.amount = message.amount.map((e) => (e ? Coin.toJSON(e) : undefined));\n        }\n        else {\n            obj.amount = [];\n        }\n        message.depositor !== undefined && (obj.depositor = message.depositor);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseMsgFundCommunityPool };\n        message.amount = [];\n        if (object.amount !== undefined && object.amount !== null) {\n            for (const e of object.amount) {\n                message.amount.push(Coin.fromPartial(e));\n            }\n        }\n        if (object.depositor !== undefined && object.depositor !== null) {\n            message.depositor = object.depositor;\n        }\n        else {\n            message.depositor = \"\";\n        }\n        return message;\n    },\n};\nconst baseMsgFundCommunityPoolResponse = {};\nexport const MsgFundCommunityPoolResponse = {\n    encode(_, writer = Writer.create()) {\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = {\n            ...baseMsgFundCommunityPoolResponse,\n        };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(_) {\n        const message = {\n            ...baseMsgFundCommunityPoolResponse,\n        };\n        return message;\n    },\n    toJSON(_) {\n        const obj = {};\n        return obj;\n    },\n    fromPartial(_) {\n        const message = {\n            ...baseMsgFundCommunityPoolResponse,\n        };\n        return message;\n    },\n};\nexport class MsgClientImpl {\n    constructor(rpc) {\n        this.rpc = rpc;\n    }\n    SetWithdrawAddress(request) {\n        const data = MsgSetWithdrawAddress.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.distribution.v1beta1.Msg\", \"SetWithdrawAddress\", data);\n        return promise.then((data) => MsgSetWithdrawAddressResponse.decode(new Reader(data)));\n    }\n    WithdrawDelegatorReward(request) {\n        const data = MsgWithdrawDelegatorReward.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.distribution.v1beta1.Msg\", \"WithdrawDelegatorReward\", data);\n        return promise.then((data) => MsgWithdrawDelegatorRewardResponse.decode(new Reader(data)));\n    }\n    WithdrawValidatorCommission(request) {\n        const data = MsgWithdrawValidatorCommission.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.distribution.v1beta1.Msg\", \"WithdrawValidatorCommission\", data);\n        return promise.then((data) => MsgWithdrawValidatorCommissionResponse.decode(new Reader(data)));\n    }\n    FundCommunityPool(request) {\n        const data = MsgFundCommunityPool.encode(request).finish();\n        const promise = this.rpc.request(\"cosmos.distribution.v1beta1.Msg\", \"FundCommunityPool\", data);\n        return promise.then((data) => MsgFundCommunityPoolResponse.decode(new Reader(data)));\n    }\n}\n"]}]}