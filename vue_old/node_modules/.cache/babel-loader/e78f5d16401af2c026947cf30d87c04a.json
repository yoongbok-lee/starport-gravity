{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/module/index.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/module/index.js","mtime":1620801165479},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3VidW50dS9zdGFycG9ydC1ncmF2aXR5L3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKLy8gVEhJUyBGSUxFIElTIEdFTkVSQVRFRCBBVVRPTUFUSUNBTExZLiBETyBOT1QgTU9ESUZZLgppbXBvcnQgeyBTaWduaW5nU3RhcmdhdGVDbGllbnQgfSBmcm9tICJAY29zbWpzL3N0YXJnYXRlIjsKaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICJAY29zbWpzL3Byb3RvLXNpZ25pbmciOwppbXBvcnQgeyBBcGkgfSBmcm9tICIuL3Jlc3QiOwppbXBvcnQgeyBNc2dDcmVhdGVWYWxpZGF0b3IgfSBmcm9tICIuL3R5cGVzL2Nvc21vcy9zdGFraW5nL3YxYmV0YTEvdHgiOwppbXBvcnQgeyBNc2dCZWdpblJlZGVsZWdhdGUgfSBmcm9tICIuL3R5cGVzL2Nvc21vcy9zdGFraW5nL3YxYmV0YTEvdHgiOwppbXBvcnQgeyBNc2dVbmRlbGVnYXRlIH0gZnJvbSAiLi90eXBlcy9jb3Ntb3Mvc3Rha2luZy92MWJldGExL3R4IjsKaW1wb3J0IHsgTXNnRGVsZWdhdGUgfSBmcm9tICIuL3R5cGVzL2Nvc21vcy9zdGFraW5nL3YxYmV0YTEvdHgiOwppbXBvcnQgeyBNc2dFZGl0VmFsaWRhdG9yIH0gZnJvbSAiLi90eXBlcy9jb3Ntb3Mvc3Rha2luZy92MWJldGExL3R4IjsKdmFyIHR5cGVzID0gW1siL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnQ3JlYXRlVmFsaWRhdG9yIiwgTXNnQ3JlYXRlVmFsaWRhdG9yXSwgWyIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dCZWdpblJlZGVsZWdhdGUiLCBNc2dCZWdpblJlZGVsZWdhdGVdLCBbIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ1VuZGVsZWdhdGUiLCBNc2dVbmRlbGVnYXRlXSwgWyIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dEZWxlZ2F0ZSIsIE1zZ0RlbGVnYXRlXSwgWyIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dFZGl0VmFsaWRhdG9yIiwgTXNnRWRpdFZhbGlkYXRvcl1dOwp2YXIgcmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkodHlwZXMpOwp2YXIgZGVmYXVsdEZlZSA9IHsKICBhbW91bnQ6IFtdLAogIGdhczogIjIwMDAwMCIKfTsKCnZhciB0eENsaWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUod2FsbGV0KSB7CiAgICB2YXIgX3JlZjIsCiAgICAgICAgYWRkciwKICAgICAgICBjbGllbnQsCiAgICAgICAgYWRkcmVzcywKICAgICAgICBfYXJncyA9IGFyZ3VtZW50czsKCiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9yZWYyID0gX2FyZ3MubGVuZ3RoID4gMSAmJiBfYXJnc1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMV0gOiB7CiAgICAgICAgICAgICAgYWRkcjogImh0dHA6Ly9sb2NhbGhvc3Q6MjY2NTciCiAgICAgICAgICAgIH0sIGFkZHIgPSBfcmVmMi5hZGRyOwoKICAgICAgICAgICAgaWYgKHdhbGxldCkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIndhbGxldCBpcyByZXF1aXJlZCIpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgIHJldHVybiBTaWduaW5nU3RhcmdhdGVDbGllbnQuY29ubmVjdFdpdGhTaWduZXIoYWRkciwgd2FsbGV0LCB7CiAgICAgICAgICAgICAgcmVnaXN0cnk6IHJlZ2lzdHJ5CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgY2xpZW50ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgIHJldHVybiB3YWxsZXQuZ2V0QWNjb3VudHMoKTsKCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGFkZHJlc3MgPSBfY29udGV4dC5zZW50WzBdLmFkZHJlc3M7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICBzaWduQW5kQnJvYWRjYXN0OiBmdW5jdGlvbiBzaWduQW5kQnJvYWRjYXN0KG1zZ3MsIF9yZWYzKSB7CiAgICAgICAgICAgICAgICB2YXIgX3JlZjMkZmVlID0gX3JlZjMuZmVlLAogICAgICAgICAgICAgICAgICAgIGZlZSA9IF9yZWYzJGZlZSA9PT0gdm9pZCAwID8gZGVmYXVsdEZlZSA6IF9yZWYzJGZlZSwKICAgICAgICAgICAgICAgICAgICBfcmVmMyRtZW1vID0gX3JlZjMubWVtbywKICAgICAgICAgICAgICAgICAgICBtZW1vID0gX3JlZjMkbWVtbyA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYzJG1lbW87CiAgICAgICAgICAgICAgICByZXR1cm4gbWVtbyA/IGNsaWVudC5zaWduQW5kQnJvYWRjYXN0KGFkZHJlc3MsIG1zZ3MsIGZlZSwgbWVtbykgOiBjbGllbnQuc2lnbkFuZEJyb2FkY2FzdChhZGRyZXNzLCBtc2dzLCBmZWUpOwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbXNnQ3JlYXRlVmFsaWRhdG9yOiBmdW5jdGlvbiBtc2dDcmVhdGVWYWxpZGF0b3IoZGF0YSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgdHlwZVVybDogIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0NyZWF0ZVZhbGlkYXRvciIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbXNnQmVnaW5SZWRlbGVnYXRlOiBmdW5jdGlvbiBtc2dCZWdpblJlZGVsZWdhdGUoZGF0YSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgdHlwZVVybDogIi9jb3Ntb3Muc3Rha2luZy52MWJldGExLk1zZ0JlZ2luUmVkZWxlZ2F0ZSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbXNnVW5kZWxlZ2F0ZTogZnVuY3Rpb24gbXNnVW5kZWxlZ2F0ZShkYXRhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICB0eXBlVXJsOiAiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnVW5kZWxlZ2F0ZSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbXNnRGVsZWdhdGU6IGZ1bmN0aW9uIG1zZ0RlbGVnYXRlKGRhdGEpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIHR5cGVVcmw6ICIvY29zbW9zLnN0YWtpbmcudjFiZXRhMS5Nc2dEZWxlZ2F0ZSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbXNnRWRpdFZhbGlkYXRvcjogZnVuY3Rpb24gbXNnRWRpdFZhbGlkYXRvcihkYXRhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICB0eXBlVXJsOiAiL2Nvc21vcy5zdGFraW5nLnYxYmV0YTEuTXNnRWRpdFZhbGlkYXRvciIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiB0eENsaWVudChfeCkgewogICAgcmV0dXJuIF9yZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCk7Cgp2YXIgcXVlcnlDbGllbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICB2YXIgX3JlZjUsCiAgICAgICAgYWRkciwKICAgICAgICBfYXJnczIgPSBhcmd1bWVudHM7CgogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX3JlZjUgPSBfYXJnczIubGVuZ3RoID4gMCAmJiBfYXJnczJbMF0gIT09IHVuZGVmaW5lZCA/IF9hcmdzMlswXSA6IHsKICAgICAgICAgICAgICBhZGRyOiAiaHR0cDovL2xvY2FsaG9zdDoxMzE3IgogICAgICAgICAgICB9LCBhZGRyID0gX3JlZjUuYWRkcjsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIG5ldyBBcGkoewogICAgICAgICAgICAgIGJhc2VVcmw6IGFkZHIKICAgICAgICAgICAgfSkpOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTIpOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIHF1ZXJ5Q2xpZW50KCkgewogICAgcmV0dXJuIF9yZWY0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKZXhwb3J0IHsgdHhDbGllbnQsIHF1ZXJ5Q2xpZW50IH07"},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.staking.v1beta1/module/index.js"],"names":["SigningStargateClient","Registry","Api","MsgCreateValidator","MsgBeginRedelegate","MsgUndelegate","MsgDelegate","MsgEditValidator","types","registry","defaultFee","amount","gas","txClient","wallet","addr","Error","connectWithSigner","client","getAccounts","address","signAndBroadcast","msgs","fee","memo","msgCreateValidator","data","typeUrl","value","msgBeginRedelegate","msgUndelegate","msgDelegate","msgEditValidator","queryClient","baseUrl"],"mappings":"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","sourcesContent":["// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgCreateValidator } from \"./types/cosmos/staking/v1beta1/tx\";\nimport { MsgBeginRedelegate } from \"./types/cosmos/staking/v1beta1/tx\";\nimport { MsgUndelegate } from \"./types/cosmos/staking/v1beta1/tx\";\nimport { MsgDelegate } from \"./types/cosmos/staking/v1beta1/tx\";\nimport { MsgEditValidator } from \"./types/cosmos/staking/v1beta1/tx\";\nconst types = [\n    [\"/cosmos.staking.v1beta1.MsgCreateValidator\", MsgCreateValidator],\n    [\"/cosmos.staking.v1beta1.MsgBeginRedelegate\", MsgBeginRedelegate],\n    [\"/cosmos.staking.v1beta1.MsgUndelegate\", MsgUndelegate],\n    [\"/cosmos.staking.v1beta1.MsgDelegate\", MsgDelegate],\n    [\"/cosmos.staking.v1beta1.MsgEditValidator\", MsgEditValidator],\n];\nconst registry = new Registry(types);\nconst defaultFee = {\n    amount: [],\n    gas: \"200000\",\n};\nconst txClient = async (wallet, { addr: addr } = { addr: \"http://localhost:26657\" }) => {\n    if (!wallet)\n        throw new Error(\"wallet is required\");\n    const client = await SigningStargateClient.connectWithSigner(addr, wallet, { registry });\n    const { address } = (await wallet.getAccounts())[0];\n    return {\n        signAndBroadcast: (msgs, { fee = defaultFee, memo = null }) => memo ? client.signAndBroadcast(address, msgs, fee, memo) : client.signAndBroadcast(address, msgs, fee),\n        msgCreateValidator: (data) => ({ typeUrl: \"/cosmos.staking.v1beta1.MsgCreateValidator\", value: data }),\n        msgBeginRedelegate: (data) => ({ typeUrl: \"/cosmos.staking.v1beta1.MsgBeginRedelegate\", value: data }),\n        msgUndelegate: (data) => ({ typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\", value: data }),\n        msgDelegate: (data) => ({ typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\", value: data }),\n        msgEditValidator: (data) => ({ typeUrl: \"/cosmos.staking.v1beta1.MsgEditValidator\", value: data }),\n    };\n};\nconst queryClient = async ({ addr: addr } = { addr: \"http://localhost:1317\" }) => {\n    return new Api({ baseUrl: addr });\n};\nexport { txClient, queryClient, };\n"]}]}