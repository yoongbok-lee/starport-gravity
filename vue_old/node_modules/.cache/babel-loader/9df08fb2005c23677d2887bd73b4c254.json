{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/module/types/gravity/genesis.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/module/types/gravity/genesis.js","mtime":1620801165447},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/module/types/gravity/genesis.js"],"names":["Long","util","configure","Writer","Reader","Valset","Erc20ToDenom","MsgValsetConfirm","MsgConfirmBatch","MsgConfirmLogicCall","MsgSetOrchestratorAddress","OutgoingTxBatch","OutgoingLogicCall","OutgoingTransferTx","Attestation","protobufPackage","baseParams","gravityId","contractSourceHash","bridgeEthereumAddress","bridgeChainId","signedValsetsWindow","signedBatchesWindow","signedClaimsWindow","targetBatchTimeout","averageBlockTime","averageEthereumBlockTime","unbondSlashingValsetsWindow","Params","encode","message","writer","create","uint32","string","uint64","slashFractionValset","length","bytes","slashFractionBatch","slashFractionClaim","slashFractionConflictingClaim","decode","input","reader","Uint8Array","end","undefined","len","pos","tag","longToNumber","skipType","fromJSON","object","String","Number","bytesFromBase64","toJSON","obj","base64FromBytes","fromPartial","baseGenesisState","lastObservedNonce","GenesisState","params","fork","ldelim","valsets","v","valsetConfirms","batches","batchConfirms","logicCalls","logicCallConfirms","attestations","delegateKeys","erc20ToDenoms","unbatchedTransfers","push","e","map","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byteLength","fromCharCode","join","long","gt","MAX_SAFE_INTEGER","Error","toNumber"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport * as Long from \"long\";\nimport { util, configure, Writer, Reader } from \"protobufjs/minimal\";\nimport { Valset, Erc20ToDenom } from \"../gravity/types\";\nimport { MsgValsetConfirm, MsgConfirmBatch, MsgConfirmLogicCall, MsgSetOrchestratorAddress, } from \"../gravity/msgs\";\nimport { OutgoingTxBatch, OutgoingLogicCall, OutgoingTransferTx, } from \"../gravity/batch\";\nimport { Attestation } from \"../gravity/attestation\";\nexport const protobufPackage = \"gravity.v1\";\nconst baseParams = {\n    gravityId: \"\",\n    contractSourceHash: \"\",\n    bridgeEthereumAddress: \"\",\n    bridgeChainId: 0,\n    signedValsetsWindow: 0,\n    signedBatchesWindow: 0,\n    signedClaimsWindow: 0,\n    targetBatchTimeout: 0,\n    averageBlockTime: 0,\n    averageEthereumBlockTime: 0,\n    unbondSlashingValsetsWindow: 0,\n};\nexport const Params = {\n    encode(message, writer = Writer.create()) {\n        if (message.gravityId !== \"\") {\n            writer.uint32(10).string(message.gravityId);\n        }\n        if (message.contractSourceHash !== \"\") {\n            writer.uint32(18).string(message.contractSourceHash);\n        }\n        if (message.bridgeEthereumAddress !== \"\") {\n            writer.uint32(34).string(message.bridgeEthereumAddress);\n        }\n        if (message.bridgeChainId !== 0) {\n            writer.uint32(40).uint64(message.bridgeChainId);\n        }\n        if (message.signedValsetsWindow !== 0) {\n            writer.uint32(48).uint64(message.signedValsetsWindow);\n        }\n        if (message.signedBatchesWindow !== 0) {\n            writer.uint32(56).uint64(message.signedBatchesWindow);\n        }\n        if (message.signedClaimsWindow !== 0) {\n            writer.uint32(64).uint64(message.signedClaimsWindow);\n        }\n        if (message.targetBatchTimeout !== 0) {\n            writer.uint32(80).uint64(message.targetBatchTimeout);\n        }\n        if (message.averageBlockTime !== 0) {\n            writer.uint32(88).uint64(message.averageBlockTime);\n        }\n        if (message.averageEthereumBlockTime !== 0) {\n            writer.uint32(96).uint64(message.averageEthereumBlockTime);\n        }\n        if (message.slashFractionValset.length !== 0) {\n            writer.uint32(106).bytes(message.slashFractionValset);\n        }\n        if (message.slashFractionBatch.length !== 0) {\n            writer.uint32(114).bytes(message.slashFractionBatch);\n        }\n        if (message.slashFractionClaim.length !== 0) {\n            writer.uint32(122).bytes(message.slashFractionClaim);\n        }\n        if (message.slashFractionConflictingClaim.length !== 0) {\n            writer.uint32(130).bytes(message.slashFractionConflictingClaim);\n        }\n        if (message.unbondSlashingValsetsWindow !== 0) {\n            writer.uint32(136).uint64(message.unbondSlashingValsetsWindow);\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseParams };\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.gravityId = reader.string();\n                    break;\n                case 2:\n                    message.contractSourceHash = reader.string();\n                    break;\n                case 4:\n                    message.bridgeEthereumAddress = reader.string();\n                    break;\n                case 5:\n                    message.bridgeChainId = longToNumber(reader.uint64());\n                    break;\n                case 6:\n                    message.signedValsetsWindow = longToNumber(reader.uint64());\n                    break;\n                case 7:\n                    message.signedBatchesWindow = longToNumber(reader.uint64());\n                    break;\n                case 8:\n                    message.signedClaimsWindow = longToNumber(reader.uint64());\n                    break;\n                case 10:\n                    message.targetBatchTimeout = longToNumber(reader.uint64());\n                    break;\n                case 11:\n                    message.averageBlockTime = longToNumber(reader.uint64());\n                    break;\n                case 12:\n                    message.averageEthereumBlockTime = longToNumber(reader.uint64());\n                    break;\n                case 13:\n                    message.slashFractionValset = reader.bytes();\n                    break;\n                case 14:\n                    message.slashFractionBatch = reader.bytes();\n                    break;\n                case 15:\n                    message.slashFractionClaim = reader.bytes();\n                    break;\n                case 16:\n                    message.slashFractionConflictingClaim = reader.bytes();\n                    break;\n                case 17:\n                    message.unbondSlashingValsetsWindow = longToNumber(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseParams };\n        if (object.gravityId !== undefined && object.gravityId !== null) {\n            message.gravityId = String(object.gravityId);\n        }\n        else {\n            message.gravityId = \"\";\n        }\n        if (object.contractSourceHash !== undefined &&\n            object.contractSourceHash !== null) {\n            message.contractSourceHash = String(object.contractSourceHash);\n        }\n        else {\n            message.contractSourceHash = \"\";\n        }\n        if (object.bridgeEthereumAddress !== undefined &&\n            object.bridgeEthereumAddress !== null) {\n            message.bridgeEthereumAddress = String(object.bridgeEthereumAddress);\n        }\n        else {\n            message.bridgeEthereumAddress = \"\";\n        }\n        if (object.bridgeChainId !== undefined && object.bridgeChainId !== null) {\n            message.bridgeChainId = Number(object.bridgeChainId);\n        }\n        else {\n            message.bridgeChainId = 0;\n        }\n        if (object.signedValsetsWindow !== undefined &&\n            object.signedValsetsWindow !== null) {\n            message.signedValsetsWindow = Number(object.signedValsetsWindow);\n        }\n        else {\n            message.signedValsetsWindow = 0;\n        }\n        if (object.signedBatchesWindow !== undefined &&\n            object.signedBatchesWindow !== null) {\n            message.signedBatchesWindow = Number(object.signedBatchesWindow);\n        }\n        else {\n            message.signedBatchesWindow = 0;\n        }\n        if (object.signedClaimsWindow !== undefined &&\n            object.signedClaimsWindow !== null) {\n            message.signedClaimsWindow = Number(object.signedClaimsWindow);\n        }\n        else {\n            message.signedClaimsWindow = 0;\n        }\n        if (object.targetBatchTimeout !== undefined &&\n            object.targetBatchTimeout !== null) {\n            message.targetBatchTimeout = Number(object.targetBatchTimeout);\n        }\n        else {\n            message.targetBatchTimeout = 0;\n        }\n        if (object.averageBlockTime !== undefined &&\n            object.averageBlockTime !== null) {\n            message.averageBlockTime = Number(object.averageBlockTime);\n        }\n        else {\n            message.averageBlockTime = 0;\n        }\n        if (object.averageEthereumBlockTime !== undefined &&\n            object.averageEthereumBlockTime !== null) {\n            message.averageEthereumBlockTime = Number(object.averageEthereumBlockTime);\n        }\n        else {\n            message.averageEthereumBlockTime = 0;\n        }\n        if (object.slashFractionValset !== undefined &&\n            object.slashFractionValset !== null) {\n            message.slashFractionValset = bytesFromBase64(object.slashFractionValset);\n        }\n        if (object.slashFractionBatch !== undefined &&\n            object.slashFractionBatch !== null) {\n            message.slashFractionBatch = bytesFromBase64(object.slashFractionBatch);\n        }\n        if (object.slashFractionClaim !== undefined &&\n            object.slashFractionClaim !== null) {\n            message.slashFractionClaim = bytesFromBase64(object.slashFractionClaim);\n        }\n        if (object.slashFractionConflictingClaim !== undefined &&\n            object.slashFractionConflictingClaim !== null) {\n            message.slashFractionConflictingClaim = bytesFromBase64(object.slashFractionConflictingClaim);\n        }\n        if (object.unbondSlashingValsetsWindow !== undefined &&\n            object.unbondSlashingValsetsWindow !== null) {\n            message.unbondSlashingValsetsWindow = Number(object.unbondSlashingValsetsWindow);\n        }\n        else {\n            message.unbondSlashingValsetsWindow = 0;\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.gravityId !== undefined && (obj.gravityId = message.gravityId);\n        message.contractSourceHash !== undefined &&\n            (obj.contractSourceHash = message.contractSourceHash);\n        message.bridgeEthereumAddress !== undefined &&\n            (obj.bridgeEthereumAddress = message.bridgeEthereumAddress);\n        message.bridgeChainId !== undefined &&\n            (obj.bridgeChainId = message.bridgeChainId);\n        message.signedValsetsWindow !== undefined &&\n            (obj.signedValsetsWindow = message.signedValsetsWindow);\n        message.signedBatchesWindow !== undefined &&\n            (obj.signedBatchesWindow = message.signedBatchesWindow);\n        message.signedClaimsWindow !== undefined &&\n            (obj.signedClaimsWindow = message.signedClaimsWindow);\n        message.targetBatchTimeout !== undefined &&\n            (obj.targetBatchTimeout = message.targetBatchTimeout);\n        message.averageBlockTime !== undefined &&\n            (obj.averageBlockTime = message.averageBlockTime);\n        message.averageEthereumBlockTime !== undefined &&\n            (obj.averageEthereumBlockTime = message.averageEthereumBlockTime);\n        message.slashFractionValset !== undefined &&\n            (obj.slashFractionValset = base64FromBytes(message.slashFractionValset !== undefined\n                ? message.slashFractionValset\n                : new Uint8Array()));\n        message.slashFractionBatch !== undefined &&\n            (obj.slashFractionBatch = base64FromBytes(message.slashFractionBatch !== undefined\n                ? message.slashFractionBatch\n                : new Uint8Array()));\n        message.slashFractionClaim !== undefined &&\n            (obj.slashFractionClaim = base64FromBytes(message.slashFractionClaim !== undefined\n                ? message.slashFractionClaim\n                : new Uint8Array()));\n        message.slashFractionConflictingClaim !== undefined &&\n            (obj.slashFractionConflictingClaim = base64FromBytes(message.slashFractionConflictingClaim !== undefined\n                ? message.slashFractionConflictingClaim\n                : new Uint8Array()));\n        message.unbondSlashingValsetsWindow !== undefined &&\n            (obj.unbondSlashingValsetsWindow = message.unbondSlashingValsetsWindow);\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseParams };\n        if (object.gravityId !== undefined && object.gravityId !== null) {\n            message.gravityId = object.gravityId;\n        }\n        else {\n            message.gravityId = \"\";\n        }\n        if (object.contractSourceHash !== undefined &&\n            object.contractSourceHash !== null) {\n            message.contractSourceHash = object.contractSourceHash;\n        }\n        else {\n            message.contractSourceHash = \"\";\n        }\n        if (object.bridgeEthereumAddress !== undefined &&\n            object.bridgeEthereumAddress !== null) {\n            message.bridgeEthereumAddress = object.bridgeEthereumAddress;\n        }\n        else {\n            message.bridgeEthereumAddress = \"\";\n        }\n        if (object.bridgeChainId !== undefined && object.bridgeChainId !== null) {\n            message.bridgeChainId = object.bridgeChainId;\n        }\n        else {\n            message.bridgeChainId = 0;\n        }\n        if (object.signedValsetsWindow !== undefined &&\n            object.signedValsetsWindow !== null) {\n            message.signedValsetsWindow = object.signedValsetsWindow;\n        }\n        else {\n            message.signedValsetsWindow = 0;\n        }\n        if (object.signedBatchesWindow !== undefined &&\n            object.signedBatchesWindow !== null) {\n            message.signedBatchesWindow = object.signedBatchesWindow;\n        }\n        else {\n            message.signedBatchesWindow = 0;\n        }\n        if (object.signedClaimsWindow !== undefined &&\n            object.signedClaimsWindow !== null) {\n            message.signedClaimsWindow = object.signedClaimsWindow;\n        }\n        else {\n            message.signedClaimsWindow = 0;\n        }\n        if (object.targetBatchTimeout !== undefined &&\n            object.targetBatchTimeout !== null) {\n            message.targetBatchTimeout = object.targetBatchTimeout;\n        }\n        else {\n            message.targetBatchTimeout = 0;\n        }\n        if (object.averageBlockTime !== undefined &&\n            object.averageBlockTime !== null) {\n            message.averageBlockTime = object.averageBlockTime;\n        }\n        else {\n            message.averageBlockTime = 0;\n        }\n        if (object.averageEthereumBlockTime !== undefined &&\n            object.averageEthereumBlockTime !== null) {\n            message.averageEthereumBlockTime = object.averageEthereumBlockTime;\n        }\n        else {\n            message.averageEthereumBlockTime = 0;\n        }\n        if (object.slashFractionValset !== undefined &&\n            object.slashFractionValset !== null) {\n            message.slashFractionValset = object.slashFractionValset;\n        }\n        else {\n            message.slashFractionValset = new Uint8Array();\n        }\n        if (object.slashFractionBatch !== undefined &&\n            object.slashFractionBatch !== null) {\n            message.slashFractionBatch = object.slashFractionBatch;\n        }\n        else {\n            message.slashFractionBatch = new Uint8Array();\n        }\n        if (object.slashFractionClaim !== undefined &&\n            object.slashFractionClaim !== null) {\n            message.slashFractionClaim = object.slashFractionClaim;\n        }\n        else {\n            message.slashFractionClaim = new Uint8Array();\n        }\n        if (object.slashFractionConflictingClaim !== undefined &&\n            object.slashFractionConflictingClaim !== null) {\n            message.slashFractionConflictingClaim =\n                object.slashFractionConflictingClaim;\n        }\n        else {\n            message.slashFractionConflictingClaim = new Uint8Array();\n        }\n        if (object.unbondSlashingValsetsWindow !== undefined &&\n            object.unbondSlashingValsetsWindow !== null) {\n            message.unbondSlashingValsetsWindow = object.unbondSlashingValsetsWindow;\n        }\n        else {\n            message.unbondSlashingValsetsWindow = 0;\n        }\n        return message;\n    },\n};\nconst baseGenesisState = { lastObservedNonce: 0 };\nexport const GenesisState = {\n    encode(message, writer = Writer.create()) {\n        if (message.params !== undefined) {\n            Params.encode(message.params, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.lastObservedNonce !== 0) {\n            writer.uint32(16).uint64(message.lastObservedNonce);\n        }\n        for (const v of message.valsets) {\n            Valset.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.valsetConfirms) {\n            MsgValsetConfirm.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        for (const v of message.batches) {\n            OutgoingTxBatch.encode(v, writer.uint32(42).fork()).ldelim();\n        }\n        for (const v of message.batchConfirms) {\n            MsgConfirmBatch.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        for (const v of message.logicCalls) {\n            OutgoingLogicCall.encode(v, writer.uint32(58).fork()).ldelim();\n        }\n        for (const v of message.logicCallConfirms) {\n            MsgConfirmLogicCall.encode(v, writer.uint32(66).fork()).ldelim();\n        }\n        for (const v of message.attestations) {\n            Attestation.encode(v, writer.uint32(74).fork()).ldelim();\n        }\n        for (const v of message.delegateKeys) {\n            MsgSetOrchestratorAddress.encode(v, writer.uint32(82).fork()).ldelim();\n        }\n        for (const v of message.erc20ToDenoms) {\n            Erc20ToDenom.encode(v, writer.uint32(90).fork()).ldelim();\n        }\n        for (const v of message.unbatchedTransfers) {\n            OutgoingTransferTx.encode(v, writer.uint32(98).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode(input, length) {\n        const reader = input instanceof Uint8Array ? new Reader(input) : input;\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = { ...baseGenesisState };\n        message.valsets = [];\n        message.valsetConfirms = [];\n        message.batches = [];\n        message.batchConfirms = [];\n        message.logicCalls = [];\n        message.logicCallConfirms = [];\n        message.attestations = [];\n        message.delegateKeys = [];\n        message.erc20ToDenoms = [];\n        message.unbatchedTransfers = [];\n        while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n                case 1:\n                    message.params = Params.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.lastObservedNonce = longToNumber(reader.uint64());\n                    break;\n                case 3:\n                    message.valsets.push(Valset.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.valsetConfirms.push(MsgValsetConfirm.decode(reader, reader.uint32()));\n                    break;\n                case 5:\n                    message.batches.push(OutgoingTxBatch.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.batchConfirms.push(MsgConfirmBatch.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.logicCalls.push(OutgoingLogicCall.decode(reader, reader.uint32()));\n                    break;\n                case 8:\n                    message.logicCallConfirms.push(MsgConfirmLogicCall.decode(reader, reader.uint32()));\n                    break;\n                case 9:\n                    message.attestations.push(Attestation.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.delegateKeys.push(MsgSetOrchestratorAddress.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    message.erc20ToDenoms.push(Erc20ToDenom.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    message.unbatchedTransfers.push(OutgoingTransferTx.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromJSON(object) {\n        const message = { ...baseGenesisState };\n        message.valsets = [];\n        message.valsetConfirms = [];\n        message.batches = [];\n        message.batchConfirms = [];\n        message.logicCalls = [];\n        message.logicCallConfirms = [];\n        message.attestations = [];\n        message.delegateKeys = [];\n        message.erc20ToDenoms = [];\n        message.unbatchedTransfers = [];\n        if (object.params !== undefined && object.params !== null) {\n            message.params = Params.fromJSON(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        if (object.lastObservedNonce !== undefined &&\n            object.lastObservedNonce !== null) {\n            message.lastObservedNonce = Number(object.lastObservedNonce);\n        }\n        else {\n            message.lastObservedNonce = 0;\n        }\n        if (object.valsets !== undefined && object.valsets !== null) {\n            for (const e of object.valsets) {\n                message.valsets.push(Valset.fromJSON(e));\n            }\n        }\n        if (object.valsetConfirms !== undefined && object.valsetConfirms !== null) {\n            for (const e of object.valsetConfirms) {\n                message.valsetConfirms.push(MsgValsetConfirm.fromJSON(e));\n            }\n        }\n        if (object.batches !== undefined && object.batches !== null) {\n            for (const e of object.batches) {\n                message.batches.push(OutgoingTxBatch.fromJSON(e));\n            }\n        }\n        if (object.batchConfirms !== undefined && object.batchConfirms !== null) {\n            for (const e of object.batchConfirms) {\n                message.batchConfirms.push(MsgConfirmBatch.fromJSON(e));\n            }\n        }\n        if (object.logicCalls !== undefined && object.logicCalls !== null) {\n            for (const e of object.logicCalls) {\n                message.logicCalls.push(OutgoingLogicCall.fromJSON(e));\n            }\n        }\n        if (object.logicCallConfirms !== undefined &&\n            object.logicCallConfirms !== null) {\n            for (const e of object.logicCallConfirms) {\n                message.logicCallConfirms.push(MsgConfirmLogicCall.fromJSON(e));\n            }\n        }\n        if (object.attestations !== undefined && object.attestations !== null) {\n            for (const e of object.attestations) {\n                message.attestations.push(Attestation.fromJSON(e));\n            }\n        }\n        if (object.delegateKeys !== undefined && object.delegateKeys !== null) {\n            for (const e of object.delegateKeys) {\n                message.delegateKeys.push(MsgSetOrchestratorAddress.fromJSON(e));\n            }\n        }\n        if (object.erc20ToDenoms !== undefined && object.erc20ToDenoms !== null) {\n            for (const e of object.erc20ToDenoms) {\n                message.erc20ToDenoms.push(Erc20ToDenom.fromJSON(e));\n            }\n        }\n        if (object.unbatchedTransfers !== undefined &&\n            object.unbatchedTransfers !== null) {\n            for (const e of object.unbatchedTransfers) {\n                message.unbatchedTransfers.push(OutgoingTransferTx.fromJSON(e));\n            }\n        }\n        return message;\n    },\n    toJSON(message) {\n        const obj = {};\n        message.params !== undefined &&\n            (obj.params = message.params ? Params.toJSON(message.params) : undefined);\n        message.lastObservedNonce !== undefined &&\n            (obj.lastObservedNonce = message.lastObservedNonce);\n        if (message.valsets) {\n            obj.valsets = message.valsets.map((e) => e ? Valset.toJSON(e) : undefined);\n        }\n        else {\n            obj.valsets = [];\n        }\n        if (message.valsetConfirms) {\n            obj.valsetConfirms = message.valsetConfirms.map((e) => e ? MsgValsetConfirm.toJSON(e) : undefined);\n        }\n        else {\n            obj.valsetConfirms = [];\n        }\n        if (message.batches) {\n            obj.batches = message.batches.map((e) => e ? OutgoingTxBatch.toJSON(e) : undefined);\n        }\n        else {\n            obj.batches = [];\n        }\n        if (message.batchConfirms) {\n            obj.batchConfirms = message.batchConfirms.map((e) => e ? MsgConfirmBatch.toJSON(e) : undefined);\n        }\n        else {\n            obj.batchConfirms = [];\n        }\n        if (message.logicCalls) {\n            obj.logicCalls = message.logicCalls.map((e) => e ? OutgoingLogicCall.toJSON(e) : undefined);\n        }\n        else {\n            obj.logicCalls = [];\n        }\n        if (message.logicCallConfirms) {\n            obj.logicCallConfirms = message.logicCallConfirms.map((e) => e ? MsgConfirmLogicCall.toJSON(e) : undefined);\n        }\n        else {\n            obj.logicCallConfirms = [];\n        }\n        if (message.attestations) {\n            obj.attestations = message.attestations.map((e) => e ? Attestation.toJSON(e) : undefined);\n        }\n        else {\n            obj.attestations = [];\n        }\n        if (message.delegateKeys) {\n            obj.delegateKeys = message.delegateKeys.map((e) => e ? MsgSetOrchestratorAddress.toJSON(e) : undefined);\n        }\n        else {\n            obj.delegateKeys = [];\n        }\n        if (message.erc20ToDenoms) {\n            obj.erc20ToDenoms = message.erc20ToDenoms.map((e) => e ? Erc20ToDenom.toJSON(e) : undefined);\n        }\n        else {\n            obj.erc20ToDenoms = [];\n        }\n        if (message.unbatchedTransfers) {\n            obj.unbatchedTransfers = message.unbatchedTransfers.map((e) => e ? OutgoingTransferTx.toJSON(e) : undefined);\n        }\n        else {\n            obj.unbatchedTransfers = [];\n        }\n        return obj;\n    },\n    fromPartial(object) {\n        const message = { ...baseGenesisState };\n        message.valsets = [];\n        message.valsetConfirms = [];\n        message.batches = [];\n        message.batchConfirms = [];\n        message.logicCalls = [];\n        message.logicCallConfirms = [];\n        message.attestations = [];\n        message.delegateKeys = [];\n        message.erc20ToDenoms = [];\n        message.unbatchedTransfers = [];\n        if (object.params !== undefined && object.params !== null) {\n            message.params = Params.fromPartial(object.params);\n        }\n        else {\n            message.params = undefined;\n        }\n        if (object.lastObservedNonce !== undefined &&\n            object.lastObservedNonce !== null) {\n            message.lastObservedNonce = object.lastObservedNonce;\n        }\n        else {\n            message.lastObservedNonce = 0;\n        }\n        if (object.valsets !== undefined && object.valsets !== null) {\n            for (const e of object.valsets) {\n                message.valsets.push(Valset.fromPartial(e));\n            }\n        }\n        if (object.valsetConfirms !== undefined && object.valsetConfirms !== null) {\n            for (const e of object.valsetConfirms) {\n                message.valsetConfirms.push(MsgValsetConfirm.fromPartial(e));\n            }\n        }\n        if (object.batches !== undefined && object.batches !== null) {\n            for (const e of object.batches) {\n                message.batches.push(OutgoingTxBatch.fromPartial(e));\n            }\n        }\n        if (object.batchConfirms !== undefined && object.batchConfirms !== null) {\n            for (const e of object.batchConfirms) {\n                message.batchConfirms.push(MsgConfirmBatch.fromPartial(e));\n            }\n        }\n        if (object.logicCalls !== undefined && object.logicCalls !== null) {\n            for (const e of object.logicCalls) {\n                message.logicCalls.push(OutgoingLogicCall.fromPartial(e));\n            }\n        }\n        if (object.logicCallConfirms !== undefined &&\n            object.logicCallConfirms !== null) {\n            for (const e of object.logicCallConfirms) {\n                message.logicCallConfirms.push(MsgConfirmLogicCall.fromPartial(e));\n            }\n        }\n        if (object.attestations !== undefined && object.attestations !== null) {\n            for (const e of object.attestations) {\n                message.attestations.push(Attestation.fromPartial(e));\n            }\n        }\n        if (object.delegateKeys !== undefined && object.delegateKeys !== null) {\n            for (const e of object.delegateKeys) {\n                message.delegateKeys.push(MsgSetOrchestratorAddress.fromPartial(e));\n            }\n        }\n        if (object.erc20ToDenoms !== undefined && object.erc20ToDenoms !== null) {\n            for (const e of object.erc20ToDenoms) {\n                message.erc20ToDenoms.push(Erc20ToDenom.fromPartial(e));\n            }\n        }\n        if (object.unbatchedTransfers !== undefined &&\n            object.unbatchedTransfers !== null) {\n            for (const e of object.unbatchedTransfers) {\n                message.unbatchedTransfers.push(OutgoingTransferTx.fromPartial(e));\n            }\n        }\n        return message;\n    },\n};\nvar globalThis = (() => {\n    if (typeof globalThis !== \"undefined\")\n        return globalThis;\n    if (typeof self !== \"undefined\")\n        return self;\n    if (typeof window !== \"undefined\")\n        return window;\n    if (typeof global !== \"undefined\")\n        return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob ||\n    ((b64) => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for (let i = 0; i < bin.length; ++i) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa ||\n    ((bin) => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    for (let i = 0; i < arr.byteLength; ++i) {\n        bin.push(String.fromCharCode(arr[i]));\n    }\n    return btoa(bin.join(\"\"));\n}\nfunction longToNumber(long) {\n    if (long.gt(Number.MAX_SAFE_INTEGER)) {\n        throw new globalThis.Error(\"Value is larger than Number.MAX_SAFE_INTEGER\");\n    }\n    return long.toNumber();\n}\nif (util.Long !== Long) {\n    util.Long = Long;\n    configure();\n}\n"]}]}