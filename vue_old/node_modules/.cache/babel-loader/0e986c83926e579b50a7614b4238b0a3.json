{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.crisis.v1beta1/index.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.crisis.v1beta1/index.js","mtime":1620801165463},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.crisis.v1beta1/index.js"],"names":["txClient","queryClient","SpVuexError","initTxClient","vuexGetters","addr","initQueryClient","getStructure","template","structure","fields","Object","entries","key","value","field","name","type","push","getDefaultState","_Structure","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","getters","getTypeStructure","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","action","payload","sendMsgVerifyInvariant","fee","memo","msgVerifyInvariant","msg","signAndBroadcast","amount","gas","result","toString","MsgVerifyInvariant"],"mappings":"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","sourcesContent":["import { txClient, queryClient } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        _Structure: {},\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(subscription);\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(subscription);\n        }\n    },\n    getters: {\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('init');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach((subscription) => {\n                dispatch(subscription.action, subscription.payload);\n            });\n        },\n        async sendMsgVerifyInvariant({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgVerifyInvariant(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgVerifyInvariant:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVerifyInvariant:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async MsgVerifyInvariant({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgVerifyInvariant(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgVerifyInvariant:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgVerifyInvariant:Create', 'Could not create message.');\n                }\n            }\n        },\n    }\n};\n"]}]}