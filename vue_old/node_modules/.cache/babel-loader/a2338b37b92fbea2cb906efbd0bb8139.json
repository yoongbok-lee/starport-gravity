{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.vesting.v1beta1/index.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.vesting.v1beta1/index.js","mtime":1620801165483},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.vesting.v1beta1/index.js"],"names":["txClient","queryClient","SpVuexError","BaseVestingAccount","ContinuousVestingAccount","DelayedVestingAccount","Period","PeriodicVestingAccount","initTxClient","vuexGetters","addr","initQueryClient","getStructure","template","structure","fields","Object","entries","key","value","field","name","type","push","getDefaultState","_Structure","fromPartial","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","getters","getTypeStructure","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","action","payload","sendMsgCreateVestingAccount","fee","memo","msgCreateVestingAccount","msg","signAndBroadcast","amount","gas","result","toString","MsgCreateVestingAccount"],"mappings":"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","sourcesContent":["import { txClient, queryClient } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { BaseVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { ContinuousVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { DelayedVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { Period } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nimport { PeriodicVestingAccount } from \"./module/types/cosmos/vesting/v1beta1/vesting\";\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        _Structure: {\n            BaseVestingAccount: getStructure(BaseVestingAccount.fromPartial({})),\n            ContinuousVestingAccount: getStructure(ContinuousVestingAccount.fromPartial({})),\n            DelayedVestingAccount: getStructure(DelayedVestingAccount.fromPartial({})),\n            Period: getStructure(Period.fromPartial({})),\n            PeriodicVestingAccount: getStructure(PeriodicVestingAccount.fromPartial({})),\n        },\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(subscription);\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(subscription);\n        }\n    },\n    getters: {\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('init');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach((subscription) => {\n                dispatch(subscription.action, subscription.payload);\n            });\n        },\n        async sendMsgCreateVestingAccount({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateVestingAccount(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async MsgCreateVestingAccount({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateVestingAccount(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateVestingAccount:Create', 'Could not create message.');\n                }\n            }\n        },\n    }\n};\n"]}]}