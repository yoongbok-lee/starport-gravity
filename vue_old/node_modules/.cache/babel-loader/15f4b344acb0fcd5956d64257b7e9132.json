{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.distribution.v1beta1/module/index.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.distribution.v1beta1/module/index.js","mtime":1620801165463},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3VidW50dS9zdGFycG9ydC1ncmF2aXR5L3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKLy8gVEhJUyBGSUxFIElTIEdFTkVSQVRFRCBBVVRPTUFUSUNBTExZLiBETyBOT1QgTU9ESUZZLgppbXBvcnQgeyBTaWduaW5nU3RhcmdhdGVDbGllbnQgfSBmcm9tICJAY29zbWpzL3N0YXJnYXRlIjsKaW1wb3J0IHsgUmVnaXN0cnkgfSBmcm9tICJAY29zbWpzL3Byb3RvLXNpZ25pbmciOwppbXBvcnQgeyBBcGkgfSBmcm9tICIuL3Jlc3QiOwppbXBvcnQgeyBNc2dXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb24gfSBmcm9tICIuL3R5cGVzL2Nvc21vcy9kaXN0cmlidXRpb24vdjFiZXRhMS90eCI7CmltcG9ydCB7IE1zZ1NldFdpdGhkcmF3QWRkcmVzcyB9IGZyb20gIi4vdHlwZXMvY29zbW9zL2Rpc3RyaWJ1dGlvbi92MWJldGExL3R4IjsKaW1wb3J0IHsgTXNnRnVuZENvbW11bml0eVBvb2wgfSBmcm9tICIuL3R5cGVzL2Nvc21vcy9kaXN0cmlidXRpb24vdjFiZXRhMS90eCI7CmltcG9ydCB7IE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkIH0gZnJvbSAiLi90eXBlcy9jb3Ntb3MvZGlzdHJpYnV0aW9uL3YxYmV0YTEvdHgiOwp2YXIgdHlwZXMgPSBbWyIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvbiIsIE1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvbl0sIFsiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5Nc2dTZXRXaXRoZHJhd0FkZHJlc3MiLCBNc2dTZXRXaXRoZHJhd0FkZHJlc3NdLCBbIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuTXNnRnVuZENvbW11bml0eVBvb2wiLCBNc2dGdW5kQ29tbXVuaXR5UG9vbF0sIFsiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5Nc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZCIsIE1zZ1dpdGhkcmF3RGVsZWdhdG9yUmV3YXJkXV07CnZhciByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeSh0eXBlcyk7CnZhciBkZWZhdWx0RmVlID0gewogIGFtb3VudDogW10sCiAgZ2FzOiAiMjAwMDAwIgp9OwoKdmFyIHR4Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh3YWxsZXQpIHsKICAgIHZhciBfcmVmMiwKICAgICAgICBhZGRyLAogICAgICAgIGNsaWVudCwKICAgICAgICBhZGRyZXNzLAogICAgICAgIF9hcmdzID0gYXJndW1lbnRzOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX3JlZjIgPSBfYXJncy5sZW5ndGggPiAxICYmIF9hcmdzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnc1sxXSA6IHsKICAgICAgICAgICAgICBhZGRyOiAiaHR0cDovL2xvY2FsaG9zdDoyNjY1NyIKICAgICAgICAgICAgfSwgYWRkciA9IF9yZWYyLmFkZHI7CgogICAgICAgICAgICBpZiAod2FsbGV0KSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigid2FsbGV0IGlzIHJlcXVpcmVkIik7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgcmV0dXJuIFNpZ25pbmdTdGFyZ2F0ZUNsaWVudC5jb25uZWN0V2l0aFNpZ25lcihhZGRyLCB3YWxsZXQsIHsKICAgICAgICAgICAgICByZWdpc3RyeTogcmVnaXN0cnkKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICBjbGllbnQgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgcmV0dXJuIHdhbGxldC5nZXRBY2NvdW50cygpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgYWRkcmVzcyA9IF9jb250ZXh0LnNlbnRbMF0uYWRkcmVzczsKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHNpZ25BbmRCcm9hZGNhc3Q6IGZ1bmN0aW9uIHNpZ25BbmRCcm9hZGNhc3QobXNncywgX3JlZjMpIHsKICAgICAgICAgICAgICAgIHZhciBfcmVmMyRmZWUgPSBfcmVmMy5mZWUsCiAgICAgICAgICAgICAgICAgICAgZmVlID0gX3JlZjMkZmVlID09PSB2b2lkIDAgPyBkZWZhdWx0RmVlIDogX3JlZjMkZmVlLAogICAgICAgICAgICAgICAgICAgIF9yZWYzJG1lbW8gPSBfcmVmMy5tZW1vLAogICAgICAgICAgICAgICAgICAgIG1lbW8gPSBfcmVmMyRtZW1vID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjMkbWVtbzsKICAgICAgICAgICAgICAgIHJldHVybiBtZW1vID8gY2xpZW50LnNpZ25BbmRCcm9hZGNhc3QoYWRkcmVzcywgbXNncywgZmVlLCBtZW1vKSA6IGNsaWVudC5zaWduQW5kQnJvYWRjYXN0KGFkZHJlc3MsIG1zZ3MsIGZlZSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBtc2dXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb246IGZ1bmN0aW9uIG1zZ1dpdGhkcmF3VmFsaWRhdG9yQ29tbWlzc2lvbihkYXRhKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICB0eXBlVXJsOiAiL2Nvc21vcy5kaXN0cmlidXRpb24udjFiZXRhMS5Nc2dXaXRoZHJhd1ZhbGlkYXRvckNvbW1pc3Npb24iLAogICAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIG1zZ1NldFdpdGhkcmF3QWRkcmVzczogZnVuY3Rpb24gbXNnU2V0V2l0aGRyYXdBZGRyZXNzKGRhdGEpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIHR5cGVVcmw6ICIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ1NldFdpdGhkcmF3QWRkcmVzcyIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgbXNnRnVuZENvbW11bml0eVBvb2w6IGZ1bmN0aW9uIG1zZ0Z1bmRDb21tdW5pdHlQb29sKGRhdGEpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgIHR5cGVVcmw6ICIvY29zbW9zLmRpc3RyaWJ1dGlvbi52MWJldGExLk1zZ0Z1bmRDb21tdW5pdHlQb29sIiwKICAgICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBtc2dXaXRoZHJhd0RlbGVnYXRvclJld2FyZDogZnVuY3Rpb24gbXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQoZGF0YSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgdHlwZVVybDogIi9jb3Ntb3MuZGlzdHJpYnV0aW9uLnYxYmV0YTEuTXNnV2l0aGRyYXdEZWxlZ2F0b3JSZXdhcmQiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gdHhDbGllbnQoX3gpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwoKdmFyIHF1ZXJ5Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgdmFyIF9yZWY1LAogICAgICAgIGFkZHIsCiAgICAgICAgX2FyZ3MyID0gYXJndW1lbnRzOwoKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9yZWY1ID0gX2FyZ3MyLmxlbmd0aCA+IDAgJiYgX2FyZ3MyWzBdICE9PSB1bmRlZmluZWQgPyBfYXJnczJbMF0gOiB7CiAgICAgICAgICAgICAgYWRkcjogImh0dHA6Ly9sb2NhbGhvc3Q6MTMxNyIKICAgICAgICAgICAgfSwgYWRkciA9IF9yZWY1LmFkZHI7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBuZXcgQXBpKHsKICAgICAgICAgICAgICBiYXNlVXJsOiBhZGRyCiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBxdWVyeUNsaWVudCgpIHsKICAgIHJldHVybiBfcmVmNC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTsKCmV4cG9ydCB7IHR4Q2xpZW50LCBxdWVyeUNsaWVudCB9Ow=="},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/cosmos/cosmos-sdk/cosmos.distribution.v1beta1/module/index.js"],"names":["SigningStargateClient","Registry","Api","MsgWithdrawValidatorCommission","MsgSetWithdrawAddress","MsgFundCommunityPool","MsgWithdrawDelegatorReward","types","registry","defaultFee","amount","gas","txClient","wallet","addr","Error","connectWithSigner","client","getAccounts","address","signAndBroadcast","msgs","fee","memo","msgWithdrawValidatorCommission","data","typeUrl","value","msgSetWithdrawAddress","msgFundCommunityPool","msgWithdrawDelegatorReward","queryClient","baseUrl"],"mappings":";;AAAA;AACA,SAASA,qBAAT,QAAsC,kBAAtC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,8BAAT,QAA+C,wCAA/C;AACA,SAASC,qBAAT,QAAsC,wCAAtC;AACA,SAASC,oBAAT,QAAqC,wCAArC;AACA,SAASC,0BAAT,QAA2C,wCAA3C;AACA,IAAMC,KAAK,GAAG,CACV,CAAC,6DAAD,EAAgEJ,8BAAhE,CADU,EAEV,CAAC,oDAAD,EAAuDC,qBAAvD,CAFU,EAGV,CAAC,mDAAD,EAAsDC,oBAAtD,CAHU,EAIV,CAAC,yDAAD,EAA4DC,0BAA5D,CAJU,CAAd;AAMA,IAAME,QAAQ,GAAG,IAAIP,QAAJ,CAAaM,KAAb,CAAjB;AACA,IAAME,UAAU,GAAG;AACfC,EAAAA,MAAM,EAAE,EADO;AAEfC,EAAAA,GAAG,EAAE;AAFU,CAAnB;;AAIA,IAAMC,QAAQ;AAAA,qEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4EAAgC;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAhC,EAAuBA,IAAvB,SAAiBA,IAAjB;;AAAA,gBACRD,MADQ;AAAA;AAAA;AAAA;;AAAA,kBAEH,IAAIE,KAAJ,CAAU,oBAAV,CAFG;;AAAA;AAAA;AAAA,mBAGQf,qBAAqB,CAACgB,iBAAtB,CAAwCF,IAAxC,EAA8CD,MAA9C,EAAsD;AAAEL,cAAAA,QAAQ,EAARA;AAAF,aAAtD,CAHR;;AAAA;AAGPS,YAAAA,MAHO;AAAA;AAAA,mBAIcJ,MAAM,CAACK,WAAP,EAJd;;AAAA;AAILC,YAAAA,OAJK,iBAIoC,CAJpC,EAILA,OAJK;AAAA,6CAKN;AACHC,cAAAA,gBAAgB,EAAE,0BAACC,IAAD;AAAA,sCAASC,GAAT;AAAA,oBAASA,GAAT,0BAAeb,UAAf;AAAA,uCAA2Bc,IAA3B;AAAA,oBAA2BA,IAA3B,2BAAkC,IAAlC;AAAA,uBAA6CA,IAAI,GAAGN,MAAM,CAACG,gBAAP,CAAwBD,OAAxB,EAAiCE,IAAjC,EAAuCC,GAAvC,EAA4CC,IAA5C,CAAH,GAAuDN,MAAM,CAACG,gBAAP,CAAwBD,OAAxB,EAAiCE,IAAjC,EAAuCC,GAAvC,CAAxG;AAAA,eADf;AAEHE,cAAAA,8BAA8B,EAAE,wCAACC,IAAD;AAAA,uBAAW;AAAEC,kBAAAA,OAAO,EAAE,6DAAX;AAA0EC,kBAAAA,KAAK,EAAEF;AAAjF,iBAAX;AAAA,eAF7B;AAGHG,cAAAA,qBAAqB,EAAE,+BAACH,IAAD;AAAA,uBAAW;AAAEC,kBAAAA,OAAO,EAAE,oDAAX;AAAiEC,kBAAAA,KAAK,EAAEF;AAAxE,iBAAX;AAAA,eAHpB;AAIHI,cAAAA,oBAAoB,EAAE,8BAACJ,IAAD;AAAA,uBAAW;AAAEC,kBAAAA,OAAO,EAAE,mDAAX;AAAgEC,kBAAAA,KAAK,EAAEF;AAAvE,iBAAX;AAAA,eAJnB;AAKHK,cAAAA,0BAA0B,EAAE,oCAACL,IAAD;AAAA,uBAAW;AAAEC,kBAAAA,OAAO,EAAE,yDAAX;AAAsEC,kBAAAA,KAAK,EAAEF;AAA7E,iBAAX;AAAA;AALzB,aALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARb,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAaA,IAAMmB,WAAW;AAAA,sEAAG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+EAAwB;AAAEjB,cAAAA,IAAI,EAAE;AAAR,aAAxB,EAAeA,IAAf,SAASA,IAAT;AAAA,8CACT,IAAIZ,GAAJ,CAAQ;AAAE8B,cAAAA,OAAO,EAAElB;AAAX,aAAR,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXiB,WAAW;AAAA;AAAA;AAAA,GAAjB;;AAGA,SAASnB,QAAT,EAAmBmB,WAAnB","sourcesContent":["// THIS FILE IS GENERATED AUTOMATICALLY. DO NOT MODIFY.\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { Registry } from \"@cosmjs/proto-signing\";\nimport { Api } from \"./rest\";\nimport { MsgWithdrawValidatorCommission } from \"./types/cosmos/distribution/v1beta1/tx\";\nimport { MsgSetWithdrawAddress } from \"./types/cosmos/distribution/v1beta1/tx\";\nimport { MsgFundCommunityPool } from \"./types/cosmos/distribution/v1beta1/tx\";\nimport { MsgWithdrawDelegatorReward } from \"./types/cosmos/distribution/v1beta1/tx\";\nconst types = [\n    [\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\", MsgWithdrawValidatorCommission],\n    [\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", MsgSetWithdrawAddress],\n    [\"/cosmos.distribution.v1beta1.MsgFundCommunityPool\", MsgFundCommunityPool],\n    [\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", MsgWithdrawDelegatorReward],\n];\nconst registry = new Registry(types);\nconst defaultFee = {\n    amount: [],\n    gas: \"200000\",\n};\nconst txClient = async (wallet, { addr: addr } = { addr: \"http://localhost:26657\" }) => {\n    if (!wallet)\n        throw new Error(\"wallet is required\");\n    const client = await SigningStargateClient.connectWithSigner(addr, wallet, { registry });\n    const { address } = (await wallet.getAccounts())[0];\n    return {\n        signAndBroadcast: (msgs, { fee = defaultFee, memo = null }) => memo ? client.signAndBroadcast(address, msgs, fee, memo) : client.signAndBroadcast(address, msgs, fee),\n        msgWithdrawValidatorCommission: (data) => ({ typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\", value: data }),\n        msgSetWithdrawAddress: (data) => ({ typeUrl: \"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", value: data }),\n        msgFundCommunityPool: (data) => ({ typeUrl: \"/cosmos.distribution.v1beta1.MsgFundCommunityPool\", value: data }),\n        msgWithdrawDelegatorReward: (data) => ({ typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", value: data }),\n    };\n};\nconst queryClient = async ({ addr: addr } = { addr: \"http://localhost:1317\" }) => {\n    return new Api({ baseUrl: addr });\n};\nexport { txClient, queryClient, };\n"]}]}