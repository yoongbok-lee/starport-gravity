{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/index.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/index.js","mtime":1620801165443},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvaG9tZS91YnVudHUvc3RhcnBvcnQtZ3Jhdml0eS92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL2hvbWUvdWJ1bnR1L3N0YXJwb3J0LWdyYXZpdHkvdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IF90eXBlb2YgZnJvbSAiL2hvbWUvdWJ1bnR1L3N0YXJwb3J0LWdyYXZpdHkvdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL2hvbWUvdWJ1bnR1L3N0YXJwb3J0LWdyYXZpdHkvdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3VidW50dS9zdGFycG9ydC1ncmF2aXR5L3Z1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXMtYXJyYXkuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiOwppbXBvcnQgeyB0eENsaWVudCwgcXVlcnlDbGllbnQgfSBmcm9tICcuL21vZHVsZSc7IC8vIEB0cy1pZ25vcmUKCmltcG9ydCB7IFNwVnVleEVycm9yIH0gZnJvbSAnQHN0YXJwb3J0L3Z1ZXgnOwppbXBvcnQgeyBCcmlkZ2VWYWxpZGF0b3IgfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L3R5cGVzIjsKaW1wb3J0IHsgVmFsc2V0IH0gZnJvbSAiLi9tb2R1bGUvdHlwZXMvZ3Jhdml0eS90eXBlcyI7CmltcG9ydCB7IExhc3RPYnNlcnZlZEV0aGVyZXVtQmxvY2tIZWlnaHQgfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L3R5cGVzIjsKaW1wb3J0IHsgRXJjMjBUb0Rlbm9tIH0gZnJvbSAiLi9tb2R1bGUvdHlwZXMvZ3Jhdml0eS90eXBlcyI7CmltcG9ydCB7IE91dGdvaW5nVHhCYXRjaCB9IGZyb20gIi4vbW9kdWxlL3R5cGVzL2dyYXZpdHkvYmF0Y2giOwppbXBvcnQgeyBPdXRnb2luZ1RyYW5zZmVyVHggfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L2JhdGNoIjsKaW1wb3J0IHsgT3V0Z29pbmdMb2dpY0NhbGwgfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L2JhdGNoIjsKaW1wb3J0IHsgT3JjaGVzdHJhdG9yQWRkcmVzcyB9IGZyb20gIi4vbW9kdWxlL3R5cGVzL2dyYXZpdHkvb3JjaGVzdHJhdG9yQWRkcmVzcyI7CmltcG9ydCB7IEF0dGVzdGF0aW9uIH0gZnJvbSAiLi9tb2R1bGUvdHlwZXMvZ3Jhdml0eS9hdHRlc3RhdGlvbiI7CmltcG9ydCB7IEVyYzIwVG9rZW4gfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L2F0dGVzdGF0aW9uIjsKaW1wb3J0IHsgSURTZXQgfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L3Bvb2wiOwppbXBvcnQgeyBCYXRjaEZlZXMgfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L3Bvb2wiOwppbXBvcnQgeyBDb3Ntb3NUb0V0aCB9IGZyb20gIi4vbW9kdWxlL3R5cGVzL2dyYXZpdHkvY29zbW9zVG9FdGgiOwppbXBvcnQgeyBQYXJhbXMgfSBmcm9tICIuL21vZHVsZS90eXBlcy9ncmF2aXR5L2dlbmVzaXMiOwoKZnVuY3Rpb24gaW5pdFR4Q2xpZW50KF94KSB7CiAgcmV0dXJuIF9pbml0VHhDbGllbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2luaXRUeENsaWVudCgpIHsKICBfaW5pdFR4Q2xpZW50ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNjModnVleEdldHRlcnMpIHsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNjMkKF9jb250ZXh0NjMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NjMucHJldiA9IF9jb250ZXh0NjMubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dDYzLm5leHQgPSAyOwogICAgICAgICAgICByZXR1cm4gdHhDbGllbnQodnVleEdldHRlcnNbJ2NvbW1vbi93YWxsZXQvc2lnbmVyJ10sIHsKICAgICAgICAgICAgICBhZGRyOiB2dWV4R2V0dGVyc1snY29tbW9uL2Vudi9hcGlUZW5kZXJtaW50J10KICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2My5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0NjMuc2VudCk7CgogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NjMuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTYzKTsKICB9KSk7CiAgcmV0dXJuIF9pbml0VHhDbGllbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gaW5pdFF1ZXJ5Q2xpZW50KF94MikgewogIHJldHVybiBfaW5pdFF1ZXJ5Q2xpZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9pbml0UXVlcnlDbGllbnQoKSB7CiAgX2luaXRRdWVyeUNsaWVudCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTY0KHZ1ZXhHZXR0ZXJzKSB7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTY0JChfY29udGV4dDY0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDY0LnByZXYgPSBfY29udGV4dDY0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQ2NC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Q2xpZW50KHsKICAgICAgICAgICAgICBhZGRyOiB2dWV4R2V0dGVyc1snY29tbW9uL2Vudi9hcGlDb3Ntb3MnXQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDY0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ2NC5zZW50KTsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2NC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlNjQpOwogIH0pKTsKICByZXR1cm4gX2luaXRRdWVyeUNsaWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBnZXRTdHJ1Y3R1cmUodGVtcGxhdGUpIHsKICB2YXIgc3RydWN0dXJlID0gewogICAgZmllbGRzOiBbXQogIH07CgogIGZvciAodmFyIF9pID0gMCwgX09iamVjdCRlbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGVtcGxhdGUpOyBfaSA8IF9PYmplY3QkZW50cmllcy5sZW5ndGg7IF9pKyspIHsKICAgIHZhciBfT2JqZWN0JGVudHJpZXMkX2kgPSBfc2xpY2VkVG9BcnJheShfT2JqZWN0JGVudHJpZXNbX2ldLCAyKSwKICAgICAgICBrZXkgPSBfT2JqZWN0JGVudHJpZXMkX2lbMF0sCiAgICAgICAgdmFsdWUgPSBfT2JqZWN0JGVudHJpZXMkX2lbMV07CgogICAgdmFyIGZpZWxkID0ge307CiAgICBmaWVsZC5uYW1lID0ga2V5OwogICAgZmllbGQudHlwZSA9IF90eXBlb2YodmFsdWUpOwogICAgc3RydWN0dXJlLmZpZWxkcy5wdXNoKGZpZWxkKTsKICB9CgogIHJldHVybiBzdHJ1Y3R1cmU7Cn0KCnZhciBnZXREZWZhdWx0U3RhdGUgPSBmdW5jdGlvbiBnZXREZWZhdWx0U3RhdGUoKSB7CiAgcmV0dXJuIHsKICAgIFBhcmFtczoge30sCiAgICBDdXJyZW50VmFsc2V0OiB7fSwKICAgIFZhbHNldFJlcXVlc3Q6IHt9LAogICAgVmFsc2V0Q29uZmlybToge30sCiAgICBWYWxzZXRDb25maXJtc0J5Tm9uY2U6IHt9LAogICAgTGFzdFZhbHNldFJlcXVlc3RzOiB7fSwKICAgIExhc3RQZW5kaW5nVmFsc2V0UmVxdWVzdEJ5QWRkcjoge30sCiAgICBMYXN0UGVuZGluZ0JhdGNoUmVxdWVzdEJ5QWRkcjoge30sCiAgICBMYXN0UGVuZGluZ0xvZ2ljQ2FsbEJ5QWRkcjoge30sCiAgICBMYXN0RXZlbnROb25jZUJ5QWRkcjoge30sCiAgICBCYXRjaEZlZXM6IHt9LAogICAgT3V0Z29pbmdUeEJhdGNoZXM6IHt9LAogICAgT3V0Z29pbmdMb2dpY0NhbGxzOiB7fSwKICAgIEJhdGNoUmVxdWVzdEJ5Tm9uY2U6IHt9LAogICAgQmF0Y2hDb25maXJtczoge30sCiAgICBMb2dpY0NvbmZpcm1zOiB7fSwKICAgIEVyYzIwVG9EZW5vbToge30sCiAgICBEZW5vbVRvRXJjMjA6IHt9LAogICAgR2V0RGVsZWdhdGVLZXlCeVZhbGlkYXRvcjoge30sCiAgICBHZXREZWxlZ2F0ZUtleUJ5RXRoOiB7fSwKICAgIEdldERlbGVnYXRlS2V5QnlPcmNoZXN0cmF0b3I6IHt9LAogICAgR2V0UGVuZGluZ1NlbmRUb0V0aDoge30sCiAgICBPcmNoZXN0cmF0b3JBZGRyZXNzQWxsOiB7fSwKICAgIENvc21vc1RvRXRoQWxsOiB7fSwKICAgIFZhbHNldFVwZGF0ZUNsYWltOiB7fSwKICAgIF9TdHJ1Y3R1cmU6IHsKICAgICAgQnJpZGdlVmFsaWRhdG9yOiBnZXRTdHJ1Y3R1cmUoQnJpZGdlVmFsaWRhdG9yLmZyb21QYXJ0aWFsKHt9KSksCiAgICAgIFZhbHNldDogZ2V0U3RydWN0dXJlKFZhbHNldC5mcm9tUGFydGlhbCh7fSkpLAogICAgICBMYXN0T2JzZXJ2ZWRFdGhlcmV1bUJsb2NrSGVpZ2h0OiBnZXRTdHJ1Y3R1cmUoTGFzdE9ic2VydmVkRXRoZXJldW1CbG9ja0hlaWdodC5mcm9tUGFydGlhbCh7fSkpLAogICAgICBFcmMyMFRvRGVub206IGdldFN0cnVjdHVyZShFcmMyMFRvRGVub20uZnJvbVBhcnRpYWwoe30pKSwKICAgICAgT3V0Z29pbmdUeEJhdGNoOiBnZXRTdHJ1Y3R1cmUoT3V0Z29pbmdUeEJhdGNoLmZyb21QYXJ0aWFsKHt9KSksCiAgICAgIE91dGdvaW5nVHJhbnNmZXJUeDogZ2V0U3RydWN0dXJlKE91dGdvaW5nVHJhbnNmZXJUeC5mcm9tUGFydGlhbCh7fSkpLAogICAgICBPdXRnb2luZ0xvZ2ljQ2FsbDogZ2V0U3RydWN0dXJlKE91dGdvaW5nTG9naWNDYWxsLmZyb21QYXJ0aWFsKHt9KSksCiAgICAgIE9yY2hlc3RyYXRvckFkZHJlc3M6IGdldFN0cnVjdHVyZShPcmNoZXN0cmF0b3JBZGRyZXNzLmZyb21QYXJ0aWFsKHt9KSksCiAgICAgIEF0dGVzdGF0aW9uOiBnZXRTdHJ1Y3R1cmUoQXR0ZXN0YXRpb24uZnJvbVBhcnRpYWwoe30pKSwKICAgICAgRXJjMjBUb2tlbjogZ2V0U3RydWN0dXJlKEVyYzIwVG9rZW4uZnJvbVBhcnRpYWwoe30pKSwKICAgICAgSURTZXQ6IGdldFN0cnVjdHVyZShJRFNldC5mcm9tUGFydGlhbCh7fSkpLAogICAgICBCYXRjaEZlZXM6IGdldFN0cnVjdHVyZShCYXRjaEZlZXMuZnJvbVBhcnRpYWwoe30pKSwKICAgICAgQ29zbW9zVG9FdGg6IGdldFN0cnVjdHVyZShDb3Ntb3NUb0V0aC5mcm9tUGFydGlhbCh7fSkpLAogICAgICBQYXJhbXM6IGdldFN0cnVjdHVyZShQYXJhbXMuZnJvbVBhcnRpYWwoe30pKQogICAgfSwKICAgIF9TdWJzY3JpcHRpb25zOiBuZXcgU2V0KCkKICB9Owp9OyAvLyBpbml0aWFsIHN0YXRlCgoKdmFyIHN0YXRlID0gZ2V0RGVmYXVsdFN0YXRlKCk7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBtdXRhdGlvbnM6IHsKICAgIFJFU0VUX1NUQVRFOiBmdW5jdGlvbiBSRVNFVF9TVEFURShzdGF0ZSkgewogICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCBnZXREZWZhdWx0U3RhdGUoKSk7CiAgICB9LAogICAgUVVFUlk6IGZ1bmN0aW9uIFFVRVJZKHN0YXRlLCBfcmVmKSB7CiAgICAgIHZhciBxdWVyeSA9IF9yZWYucXVlcnksCiAgICAgICAgICBrZXkgPSBfcmVmLmtleSwKICAgICAgICAgIHZhbHVlID0gX3JlZi52YWx1ZTsKICAgICAgc3RhdGVbcXVlcnldW0pTT04uc3RyaW5naWZ5KGtleSldID0gdmFsdWU7CiAgICB9LAogICAgU1VCU0NSSUJFOiBmdW5jdGlvbiBTVUJTQ1JJQkUoc3RhdGUsIHN1YnNjcmlwdGlvbikgewogICAgICBzdGF0ZS5fU3Vic2NyaXB0aW9ucy5hZGQoc3Vic2NyaXB0aW9uKTsKICAgIH0sCiAgICBVTlNVQlNDUklCRTogZnVuY3Rpb24gVU5TVUJTQ1JJQkUoc3RhdGUsIHN1YnNjcmlwdGlvbikgewogICAgICBzdGF0ZS5fU3Vic2NyaXB0aW9uc1siZGVsZXRlIl0oc3Vic2NyaXB0aW9uKTsKICAgIH0KICB9LAogIGdldHRlcnM6IHsKICAgIGdldFBhcmFtczogZnVuY3Rpb24gZ2V0UGFyYW1zKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRQYXJhbXMkSlNPTiRzdDsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkUGFyYW1zJEpTT04kc3QgPSBzdGF0ZS5QYXJhbXNbSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRQYXJhbXMkSlNPTiRzdCAhPT0gdm9pZCAwID8gX3N0YXRlJFBhcmFtcyRKU09OJHN0IDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0Q3VycmVudFZhbHNldDogZnVuY3Rpb24gZ2V0Q3VycmVudFZhbHNldChzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkQ3VycmVudFZhbHNldCQ7CgogICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgICBpZiAoIXBhcmFtcy5xdWVyeSkgewogICAgICAgICAgcGFyYW1zLnF1ZXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoX3N0YXRlJEN1cnJlbnRWYWxzZXQkID0gc3RhdGUuQ3VycmVudFZhbHNldFtKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJEN1cnJlbnRWYWxzZXQkICE9PSB2b2lkIDAgPyBfc3RhdGUkQ3VycmVudFZhbHNldCQgOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXRWYWxzZXRSZXF1ZXN0OiBmdW5jdGlvbiBnZXRWYWxzZXRSZXF1ZXN0KHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRWYWxzZXRSZXF1ZXN0JDsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkVmFsc2V0UmVxdWVzdCQgPSBzdGF0ZS5WYWxzZXRSZXF1ZXN0W0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkVmFsc2V0UmVxdWVzdCQgIT09IHZvaWQgMCA/IF9zdGF0ZSRWYWxzZXRSZXF1ZXN0JCA6IHt9OwogICAgICB9OwogICAgfSwKICAgIGdldFZhbHNldENvbmZpcm06IGZ1bmN0aW9uIGdldFZhbHNldENvbmZpcm0oc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJFZhbHNldENvbmZpcm0kOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRWYWxzZXRDb25maXJtJCA9IHN0YXRlLlZhbHNldENvbmZpcm1bSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRWYWxzZXRDb25maXJtJCAhPT0gdm9pZCAwID8gX3N0YXRlJFZhbHNldENvbmZpcm0kIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0VmFsc2V0Q29uZmlybXNCeU5vbmNlOiBmdW5jdGlvbiBnZXRWYWxzZXRDb25maXJtc0J5Tm9uY2Uoc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJFZhbHNldENvbmZpcm1zOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRWYWxzZXRDb25maXJtcyA9IHN0YXRlLlZhbHNldENvbmZpcm1zQnlOb25jZVtKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJFZhbHNldENvbmZpcm1zICE9PSB2b2lkIDAgPyBfc3RhdGUkVmFsc2V0Q29uZmlybXMgOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXRMYXN0VmFsc2V0UmVxdWVzdHM6IGZ1bmN0aW9uIGdldExhc3RWYWxzZXRSZXF1ZXN0cyhzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkTGFzdFZhbHNldFJlcXU7CgogICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgICBpZiAoIXBhcmFtcy5xdWVyeSkgewogICAgICAgICAgcGFyYW1zLnF1ZXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoX3N0YXRlJExhc3RWYWxzZXRSZXF1ID0gc3RhdGUuTGFzdFZhbHNldFJlcXVlc3RzW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkTGFzdFZhbHNldFJlcXUgIT09IHZvaWQgMCA/IF9zdGF0ZSRMYXN0VmFsc2V0UmVxdSA6IHt9OwogICAgICB9OwogICAgfSwKICAgIGdldExhc3RQZW5kaW5nVmFsc2V0UmVxdWVzdEJ5QWRkcjogZnVuY3Rpb24gZ2V0TGFzdFBlbmRpbmdWYWxzZXRSZXF1ZXN0QnlBZGRyKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRMYXN0UGVuZGluZ1ZhbDsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkTGFzdFBlbmRpbmdWYWwgPSBzdGF0ZS5MYXN0UGVuZGluZ1ZhbHNldFJlcXVlc3RCeUFkZHJbSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRMYXN0UGVuZGluZ1ZhbCAhPT0gdm9pZCAwID8gX3N0YXRlJExhc3RQZW5kaW5nVmFsIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0TGFzdFBlbmRpbmdCYXRjaFJlcXVlc3RCeUFkZHI6IGZ1bmN0aW9uIGdldExhc3RQZW5kaW5nQmF0Y2hSZXF1ZXN0QnlBZGRyKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRMYXN0UGVuZGluZ0JhdDsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkTGFzdFBlbmRpbmdCYXQgPSBzdGF0ZS5MYXN0UGVuZGluZ0JhdGNoUmVxdWVzdEJ5QWRkcltKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJExhc3RQZW5kaW5nQmF0ICE9PSB2b2lkIDAgPyBfc3RhdGUkTGFzdFBlbmRpbmdCYXQgOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXRMYXN0UGVuZGluZ0xvZ2ljQ2FsbEJ5QWRkcjogZnVuY3Rpb24gZ2V0TGFzdFBlbmRpbmdMb2dpY0NhbGxCeUFkZHIoc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJExhc3RQZW5kaW5nTG9nOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRMYXN0UGVuZGluZ0xvZyA9IHN0YXRlLkxhc3RQZW5kaW5nTG9naWNDYWxsQnlBZGRyW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkTGFzdFBlbmRpbmdMb2cgIT09IHZvaWQgMCA/IF9zdGF0ZSRMYXN0UGVuZGluZ0xvZyA6IHt9OwogICAgICB9OwogICAgfSwKICAgIGdldExhc3RFdmVudE5vbmNlQnlBZGRyOiBmdW5jdGlvbiBnZXRMYXN0RXZlbnROb25jZUJ5QWRkcihzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkTGFzdEV2ZW50Tm9uY2U7CgogICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgICBpZiAoIXBhcmFtcy5xdWVyeSkgewogICAgICAgICAgcGFyYW1zLnF1ZXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoX3N0YXRlJExhc3RFdmVudE5vbmNlID0gc3RhdGUuTGFzdEV2ZW50Tm9uY2VCeUFkZHJbSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRMYXN0RXZlbnROb25jZSAhPT0gdm9pZCAwID8gX3N0YXRlJExhc3RFdmVudE5vbmNlIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0QmF0Y2hGZWVzOiBmdW5jdGlvbiBnZXRCYXRjaEZlZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJEJhdGNoRmVlcyRKU09OOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRCYXRjaEZlZXMkSlNPTiA9IHN0YXRlLkJhdGNoRmVlc1tKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJEJhdGNoRmVlcyRKU09OICE9PSB2b2lkIDAgPyBfc3RhdGUkQmF0Y2hGZWVzJEpTT04gOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXRPdXRnb2luZ1R4QmF0Y2hlczogZnVuY3Rpb24gZ2V0T3V0Z29pbmdUeEJhdGNoZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJE91dGdvaW5nVHhCYXRjOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRPdXRnb2luZ1R4QmF0YyA9IHN0YXRlLk91dGdvaW5nVHhCYXRjaGVzW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkT3V0Z29pbmdUeEJhdGMgIT09IHZvaWQgMCA/IF9zdGF0ZSRPdXRnb2luZ1R4QmF0YyA6IHt9OwogICAgICB9OwogICAgfSwKICAgIGdldE91dGdvaW5nTG9naWNDYWxsczogZnVuY3Rpb24gZ2V0T3V0Z29pbmdMb2dpY0NhbGxzKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRPdXRnb2luZ0xvZ2ljQzsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkT3V0Z29pbmdMb2dpY0MgPSBzdGF0ZS5PdXRnb2luZ0xvZ2ljQ2FsbHNbSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRPdXRnb2luZ0xvZ2ljQyAhPT0gdm9pZCAwID8gX3N0YXRlJE91dGdvaW5nTG9naWNDIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0QmF0Y2hSZXF1ZXN0QnlOb25jZTogZnVuY3Rpb24gZ2V0QmF0Y2hSZXF1ZXN0QnlOb25jZShzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkQmF0Y2hSZXF1ZXN0Qnk7CgogICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgICBpZiAoIXBhcmFtcy5xdWVyeSkgewogICAgICAgICAgcGFyYW1zLnF1ZXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoX3N0YXRlJEJhdGNoUmVxdWVzdEJ5ID0gc3RhdGUuQmF0Y2hSZXF1ZXN0QnlOb25jZVtKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJEJhdGNoUmVxdWVzdEJ5ICE9PSB2b2lkIDAgPyBfc3RhdGUkQmF0Y2hSZXF1ZXN0QnkgOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXRCYXRjaENvbmZpcm1zOiBmdW5jdGlvbiBnZXRCYXRjaENvbmZpcm1zKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRCYXRjaENvbmZpcm1zJDsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkQmF0Y2hDb25maXJtcyQgPSBzdGF0ZS5CYXRjaENvbmZpcm1zW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkQmF0Y2hDb25maXJtcyQgIT09IHZvaWQgMCA/IF9zdGF0ZSRCYXRjaENvbmZpcm1zJCA6IHt9OwogICAgICB9OwogICAgfSwKICAgIGdldExvZ2ljQ29uZmlybXM6IGZ1bmN0aW9uIGdldExvZ2ljQ29uZmlybXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJExvZ2ljQ29uZmlybXMkOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRMb2dpY0NvbmZpcm1zJCA9IHN0YXRlLkxvZ2ljQ29uZmlybXNbSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRMb2dpY0NvbmZpcm1zJCAhPT0gdm9pZCAwID8gX3N0YXRlJExvZ2ljQ29uZmlybXMkIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0RXJjMjBUb0Rlbm9tOiBmdW5jdGlvbiBnZXRFcmMyMFRvRGVub20oc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJEVyYzIwVG9EZW5vbSRKOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRFcmMyMFRvRGVub20kSiA9IHN0YXRlLkVyYzIwVG9EZW5vbVtKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJEVyYzIwVG9EZW5vbSRKICE9PSB2b2lkIDAgPyBfc3RhdGUkRXJjMjBUb0Rlbm9tJEogOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXREZW5vbVRvRXJjMjA6IGZ1bmN0aW9uIGdldERlbm9tVG9FcmMyMChzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkRGVub21Ub0VyYzIwJEo7CgogICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgICBpZiAoIXBhcmFtcy5xdWVyeSkgewogICAgICAgICAgcGFyYW1zLnF1ZXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoX3N0YXRlJERlbm9tVG9FcmMyMCRKID0gc3RhdGUuRGVub21Ub0VyYzIwW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkRGVub21Ub0VyYzIwJEogIT09IHZvaWQgMCA/IF9zdGF0ZSREZW5vbVRvRXJjMjAkSiA6IHt9OwogICAgICB9OwogICAgfSwKICAgIGdldEdldERlbGVnYXRlS2V5QnlWYWxpZGF0b3I6IGZ1bmN0aW9uIGdldEdldERlbGVnYXRlS2V5QnlWYWxpZGF0b3Ioc3RhdGUpIHsKICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX3N0YXRlJEdldERlbGVnYXRlS2V5OwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRHZXREZWxlZ2F0ZUtleSA9IHN0YXRlLkdldERlbGVnYXRlS2V5QnlWYWxpZGF0b3JbSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRHZXREZWxlZ2F0ZUtleSAhPT0gdm9pZCAwID8gX3N0YXRlJEdldERlbGVnYXRlS2V5IDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0R2V0RGVsZWdhdGVLZXlCeUV0aDogZnVuY3Rpb24gZ2V0R2V0RGVsZWdhdGVLZXlCeUV0aChzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkR2V0RGVsZWdhdGVLZXkyOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRHZXREZWxlZ2F0ZUtleTIgPSBzdGF0ZS5HZXREZWxlZ2F0ZUtleUJ5RXRoW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkR2V0RGVsZWdhdGVLZXkyICE9PSB2b2lkIDAgPyBfc3RhdGUkR2V0RGVsZWdhdGVLZXkyIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0R2V0RGVsZWdhdGVLZXlCeU9yY2hlc3RyYXRvcjogZnVuY3Rpb24gZ2V0R2V0RGVsZWdhdGVLZXlCeU9yY2hlc3RyYXRvcihzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkR2V0RGVsZWdhdGVLZXkzOwoKICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKCiAgICAgICAgaWYgKCFwYXJhbXMucXVlcnkpIHsKICAgICAgICAgIHBhcmFtcy5xdWVyeSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKF9zdGF0ZSRHZXREZWxlZ2F0ZUtleTMgPSBzdGF0ZS5HZXREZWxlZ2F0ZUtleUJ5T3JjaGVzdHJhdG9yW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkR2V0RGVsZWdhdGVLZXkzICE9PSB2b2lkIDAgPyBfc3RhdGUkR2V0RGVsZWdhdGVLZXkzIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0R2V0UGVuZGluZ1NlbmRUb0V0aDogZnVuY3Rpb24gZ2V0R2V0UGVuZGluZ1NlbmRUb0V0aChzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkR2V0UGVuZGluZ1NlbmQ7CgogICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgICBpZiAoIXBhcmFtcy5xdWVyeSkgewogICAgICAgICAgcGFyYW1zLnF1ZXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoX3N0YXRlJEdldFBlbmRpbmdTZW5kID0gc3RhdGUuR2V0UGVuZGluZ1NlbmRUb0V0aFtKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJEdldFBlbmRpbmdTZW5kICE9PSB2b2lkIDAgPyBfc3RhdGUkR2V0UGVuZGluZ1NlbmQgOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXRPcmNoZXN0cmF0b3JBZGRyZXNzQWxsOiBmdW5jdGlvbiBnZXRPcmNoZXN0cmF0b3JBZGRyZXNzQWxsKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRPcmNoZXN0cmF0b3JBZDsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkT3JjaGVzdHJhdG9yQWQgPSBzdGF0ZS5PcmNoZXN0cmF0b3JBZGRyZXNzQWxsW0pTT04uc3RyaW5naWZ5KHBhcmFtcyldKSAhPT0gbnVsbCAmJiBfc3RhdGUkT3JjaGVzdHJhdG9yQWQgIT09IHZvaWQgMCA/IF9zdGF0ZSRPcmNoZXN0cmF0b3JBZCA6IHt9OwogICAgICB9OwogICAgfSwKICAgIGdldENvc21vc1RvRXRoQWxsOiBmdW5jdGlvbiBnZXRDb3Ntb3NUb0V0aEFsbChzdGF0ZSkgewogICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc3RhdGUkQ29zbW9zVG9FdGhBbGw7CgogICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9OwoKICAgICAgICBpZiAoIXBhcmFtcy5xdWVyeSkgewogICAgICAgICAgcGFyYW1zLnF1ZXJ5ID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAoX3N0YXRlJENvc21vc1RvRXRoQWxsID0gc3RhdGUuQ29zbW9zVG9FdGhBbGxbSlNPTi5zdHJpbmdpZnkocGFyYW1zKV0pICE9PSBudWxsICYmIF9zdGF0ZSRDb3Ntb3NUb0V0aEFsbCAhPT0gdm9pZCAwID8gX3N0YXRlJENvc21vc1RvRXRoQWxsIDoge307CiAgICAgIH07CiAgICB9LAogICAgZ2V0VmFsc2V0VXBkYXRlQ2xhaW06IGZ1bmN0aW9uIGdldFZhbHNldFVwZGF0ZUNsYWltKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIF9zdGF0ZSRWYWxzZXRVcGRhdGVDbDsKCiAgICAgICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307CgogICAgICAgIGlmICghcGFyYW1zLnF1ZXJ5KSB7CiAgICAgICAgICBwYXJhbXMucXVlcnkgPSBudWxsOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIChfc3RhdGUkVmFsc2V0VXBkYXRlQ2wgPSBzdGF0ZS5WYWxzZXRVcGRhdGVDbGFpbVtKU09OLnN0cmluZ2lmeShwYXJhbXMpXSkgIT09IG51bGwgJiYgX3N0YXRlJFZhbHNldFVwZGF0ZUNsICE9PSB2b2lkIDAgPyBfc3RhdGUkVmFsc2V0VXBkYXRlQ2wgOiB7fTsKICAgICAgfTsKICAgIH0sCiAgICBnZXRUeXBlU3RydWN0dXJlOiBmdW5jdGlvbiBnZXRUeXBlU3RydWN0dXJlKHN0YXRlKSB7CiAgICAgIHJldHVybiBmdW5jdGlvbiAodHlwZSkgewogICAgICAgIHJldHVybiBzdGF0ZS5fU3RydWN0dXJlW3R5cGVdLmZpZWxkczsKICAgICAgfTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoX3JlZjIpIHsKICAgICAgdmFyIGRpc3BhdGNoID0gX3JlZjIuZGlzcGF0Y2gsCiAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYyLnJvb3RHZXR0ZXJzOwogICAgICBjb25zb2xlLmxvZygnaW5pdCcpOwoKICAgICAgaWYgKHJvb3RHZXR0ZXJzWydjb21tb24vZW52L2NsaWVudCddKSB7CiAgICAgICAgcm9vdEdldHRlcnNbJ2NvbW1vbi9lbnYvY2xpZW50J10ub24oJ25ld2Jsb2NrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgZGlzcGF0Y2goJ1N0b3JlVXBkYXRlJyk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICByZXNldFN0YXRlOiBmdW5jdGlvbiByZXNldFN0YXRlKF9yZWYzKSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICAgIGNvbW1pdCgnUkVTRVRfU1RBVEUnKTsKICAgIH0sCiAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoX3JlZjQsIHN1YnNjcmlwdGlvbikgewogICAgICB2YXIgY29tbWl0ID0gX3JlZjQuY29tbWl0OwogICAgICBjb21taXQoJ1VOU1VCU0NSSUJFJywgc3Vic2NyaXB0aW9uKTsKICAgIH0sCiAgICBTdG9yZVVwZGF0ZTogZnVuY3Rpb24gU3RvcmVVcGRhdGUoX3JlZjUpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgc3RhdGUsIGRpc3BhdGNoOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjUuc3RhdGUsIGRpc3BhdGNoID0gX3JlZjUuZGlzcGF0Y2g7CgogICAgICAgICAgICAgICAgc3RhdGUuX1N1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7CiAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKHN1YnNjcmlwdGlvbi5hY3Rpb24sIHN1YnNjcmlwdGlvbi5wYXlsb2FkKTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlQYXJhbXM6IGZ1bmN0aW9uIFF1ZXJ5UGFyYW1zKF9yZWY2LCBfcmVmNykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjckb3B0aW9ucywgX3JlZjckb3B0aW9ucyRzdWJzY3JpLCBzdWJzY3JpYmUsIF9yZWY3JG9wdGlvbnMkYWxsLCBhbGwsIGtleSwgX3JlZjckcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRQYXJhbXMsIHZhbHVlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjYuY29tbWl0LCByb290R2V0dGVycyA9IF9yZWY2LnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjYuZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWY3JG9wdGlvbnMgPSBfcmVmNy5vcHRpb25zLCBfcmVmNyRvcHRpb25zJHN1YnNjcmkgPSBfcmVmNyRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjckb3B0aW9ucyRzdWJzY3JpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY3JG9wdGlvbnMkc3Vic2NyaSwgX3JlZjckb3B0aW9ucyRhbGwgPSBfcmVmNyRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjckb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjckb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWY3LnBhcmFtcyksIF9yZWY3JHF1ZXJ5ID0gX3JlZjcucXVlcnksIHF1ZXJ5ID0gX3JlZjckcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNyRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjsKCiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnNlbnQucXVlcnlQYXJhbXMocXVlcnkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDIuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc2VudC5xdWVyeVBhcmFtcygpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnQwID0gX2NvbnRleHQyLnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQyLnQwOwogICAgICAgICAgICAgICAgY29tbWl0KCdRVUVSWScsIHsKICAgICAgICAgICAgICAgICAgcXVlcnk6ICdQYXJhbXMnLAogICAgICAgICAgICAgICAgICBrZXk6IHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlKSBjb21taXQoJ1NVQlNDUklCRScsIHsKICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnUXVlcnlQYXJhbXMnLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldFBhcmFtcyA9IGdldHRlcnNbJ2dldFBhcmFtcyddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRQYXJhbXMgIT09IHZvaWQgMCA/IF9nZXR0ZXJzJGdldFBhcmFtcyA6IHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjI7CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDEgPSBfY29udGV4dDJbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBTcFZ1ZXhFcnJvcignUXVlcnlDbGllbnQ6UXVlcnlQYXJhbXMnLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMiwgMjJdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5Q3VycmVudFZhbHNldDogZnVuY3Rpb24gUXVlcnlDdXJyZW50VmFsc2V0KF9yZWY4LCBfcmVmOSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjkkb3B0aW9ucywgX3JlZjkkb3B0aW9ucyRzdWJzY3JpLCBzdWJzY3JpYmUsIF9yZWY5JG9wdGlvbnMkYWxsLCBhbGwsIGtleSwgX3JlZjkkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRDdXJyZW50VmEsIHZhbHVlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjguY29tbWl0LCByb290R2V0dGVycyA9IF9yZWY4LnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjguZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWY5JG9wdGlvbnMgPSBfcmVmOS5vcHRpb25zLCBfcmVmOSRvcHRpb25zJHN1YnNjcmkgPSBfcmVmOSRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjkkb3B0aW9ucyRzdWJzY3JpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY5JG9wdGlvbnMkc3Vic2NyaSwgX3JlZjkkb3B0aW9ucyRhbGwgPSBfcmVmOSRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjkkb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjkkb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWY5LnBhcmFtcyksIF9yZWY5JHF1ZXJ5ID0gX3JlZjkucXVlcnksIHF1ZXJ5ID0gX3JlZjkkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmOSRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMjsKCiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnNlbnQucXVlcnlDdXJyZW50VmFsc2V0KHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnQwID0gX2NvbnRleHQzLnNlbnQuZGF0YTsKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnNlbnQucXVlcnlDdXJyZW50VmFsc2V0KCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDMuc2VudC5kYXRhOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgdmFsdWUgPSBfY29udGV4dDMudDA7CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0N1cnJlbnRWYWxzZXQnLAogICAgICAgICAgICAgICAgICBrZXk6IHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlKSBjb21taXQoJ1NVQlNDUklCRScsIHsKICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnUXVlcnlDdXJyZW50VmFsc2V0JywKICAgICAgICAgICAgICAgICAgcGF5bG9hZDogewogICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGFsbDogYWxsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRDdXJyZW50VmEgPSBnZXR0ZXJzWydnZXRDdXJyZW50VmFsc2V0J10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldEN1cnJlbnRWYSAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0Q3VycmVudFZhIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLnByZXYgPSAyMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0My50MSA9IF9jb250ZXh0M1siY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUN1cnJlbnRWYWxzZXQnLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIG51bGwsIFtbMiwgMjJdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5VmFsc2V0UmVxdWVzdDogZnVuY3Rpb24gUXVlcnlWYWxzZXRSZXF1ZXN0KF9yZWYxMCwgX3JlZjExKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmMTEkb3B0aW9ucywgX3JlZjExJG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWYxMSRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWYxMSRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldFZhbHNldFJlcSwgdmFsdWUsIG5leHRfdmFsdWVzLCBfaTIsIF9PYmplY3Qka2V5cywgcHJvcDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMC5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjEwLnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjEwLmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmMTEkb3B0aW9ucyA9IF9yZWYxMS5vcHRpb25zLCBfcmVmMTEkb3B0aW9ucyRzdWJzY3IgPSBfcmVmMTEkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWYxMSRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTEkb3B0aW9ucyRzdWJzY3IsIF9yZWYxMSRvcHRpb25zJGFsbCA9IF9yZWYxMSRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjExJG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxMSRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjExLnBhcmFtcyksIF9yZWYxMSRxdWVyeSA9IF9yZWYxMS5xdWVyeSwgcXVlcnkgPSBfcmVmMTEkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMTEkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zZW50LnF1ZXJ5VmFsc2V0UmVxdWVzdChxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC50MCA9IF9jb250ZXh0NC5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zZW50LnF1ZXJ5VmFsc2V0UmVxdWVzdCgpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQ0LnQwOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgaWYgKCEoYWxsICYmIHZhbHVlLnBhZ2luYXRpb24gJiYgdmFsdWUucGFnaW5hdGlvbi5uZXh0S2V5ICE9IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnNlbnQucXVlcnlWYWxzZXRSZXF1ZXN0KF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcXVlcnkpLCB7fSwgewogICAgICAgICAgICAgICAgICAncGFnaW5hdGlvbi5rZXknOiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIG5leHRfdmFsdWVzID0gX2NvbnRleHQ0LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgICBmb3IgKF9pMiA9IDAsIF9PYmplY3Qka2V5cyA9IE9iamVjdC5rZXlzKG5leHRfdmFsdWVzKTsgX2kyIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2kyKyspIHsKICAgICAgICAgICAgICAgICAgcHJvcCA9IF9PYmplY3Qka2V5c1tfaTJdOwoKICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlW3Byb3BdKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5leHRfdmFsdWVzW3Byb3BdKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBuZXh0X3ZhbHVlc1twcm9wXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnVmFsc2V0UmVxdWVzdCcsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeVZhbHNldFJlcXVlc3QnLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldFZhbHNldFJlcSA9IGdldHRlcnNbJ2dldFZhbHNldFJlcXVlc3QnXSh7CiAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICB9KSkgIT09IG51bGwgJiYgX2dldHRlcnMkZ2V0VmFsc2V0UmVxICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRWYWxzZXRSZXEgOiB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDMxOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0LnQxID0gX2NvbnRleHQ0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgU3BWdWV4RXJyb3IoJ1F1ZXJ5Q2xpZW50OlF1ZXJ5VmFsc2V0UmVxdWVzdCcsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCwgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlWYWxzZXRDb25maXJtOiBmdW5jdGlvbiBRdWVyeVZhbHNldENvbmZpcm0oX3JlZjEyLCBfcmVmMTMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcm9vdEdldHRlcnMsIGdldHRlcnMsIF9yZWYxMyRvcHRpb25zLCBfcmVmMTMkb3B0aW9ucyRzdWJzY3IsIHN1YnNjcmliZSwgX3JlZjEzJG9wdGlvbnMkYWxsLCBhbGwsIGtleSwgX3JlZjEzJHF1ZXJ5LCBxdWVyeSwgX2dldHRlcnMkZ2V0VmFsc2V0Q29uLCB2YWx1ZSwgbmV4dF92YWx1ZXMsIF9pMywgX09iamVjdCRrZXlzMiwgcHJvcDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYxMi5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjEyLnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjEyLmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmMTMkb3B0aW9ucyA9IF9yZWYxMy5vcHRpb25zLCBfcmVmMTMkb3B0aW9ucyRzdWJzY3IgPSBfcmVmMTMkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWYxMyRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTMkb3B0aW9ucyRzdWJzY3IsIF9yZWYxMyRvcHRpb25zJGFsbCA9IF9yZWYxMyRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjEzJG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxMyRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjEzLnBhcmFtcyksIF9yZWYxMyRxdWVyeSA9IF9yZWYxMy5xdWVyeSwgcXVlcnkgPSBfcmVmMTMkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMTMkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zZW50LnF1ZXJ5VmFsc2V0Q29uZmlybShxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS50MCA9IF9jb250ZXh0NS5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zZW50LnF1ZXJ5VmFsc2V0Q29uZmlybSgpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ1LnQwID0gX2NvbnRleHQ1LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQ1LnQwOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgaWYgKCEoYWxsICYmIHZhbHVlLnBhZ2luYXRpb24gJiYgdmFsdWUucGFnaW5hdGlvbi5uZXh0S2V5ICE9IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnNlbnQucXVlcnlWYWxzZXRDb25maXJtKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcXVlcnkpLCB7fSwgewogICAgICAgICAgICAgICAgICAncGFnaW5hdGlvbi5rZXknOiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIG5leHRfdmFsdWVzID0gX2NvbnRleHQ1LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgICBmb3IgKF9pMyA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyhuZXh0X3ZhbHVlcyk7IF9pMyA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTMrKykgewogICAgICAgICAgICAgICAgICBwcm9wID0gX09iamVjdCRrZXlzMltfaTNdOwoKICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlW3Byb3BdKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5leHRfdmFsdWVzW3Byb3BdKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBuZXh0X3ZhbHVlc1twcm9wXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnVmFsc2V0Q29uZmlybScsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeVZhbHNldENvbmZpcm0nLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldFZhbHNldENvbiA9IGdldHRlcnNbJ2dldFZhbHNldENvbmZpcm0nXSh7CiAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICB9KSkgIT09IG51bGwgJiYgX2dldHRlcnMkZ2V0VmFsc2V0Q29uICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRWYWxzZXRDb24gOiB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDMxOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1LnQxID0gX2NvbnRleHQ1WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgU3BWdWV4RXJyb3IoJ1F1ZXJ5Q2xpZW50OlF1ZXJ5VmFsc2V0Q29uZmlybScsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSwgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlWYWxzZXRDb25maXJtc0J5Tm9uY2U6IGZ1bmN0aW9uIFF1ZXJ5VmFsc2V0Q29uZmlybXNCeU5vbmNlKF9yZWYxNCwgX3JlZjE1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmMTUkb3B0aW9ucywgX3JlZjE1JG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWYxNSRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWYxNSRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldFZhbHNldENvbjIsIHZhbHVlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjE0LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmMTQucm9vdEdldHRlcnMsIGdldHRlcnMgPSBfcmVmMTQuZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWYxNSRvcHRpb25zID0gX3JlZjE1Lm9wdGlvbnMsIF9yZWYxNSRvcHRpb25zJHN1YnNjciA9IF9yZWYxNSRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjE1JG9wdGlvbnMkc3Vic2NyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYxNSRvcHRpb25zJHN1YnNjciwgX3JlZjE1JG9wdGlvbnMkYWxsID0gX3JlZjE1JG9wdGlvbnMuYWxsLCBhbGwgPSBfcmVmMTUkb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjE1JG9wdGlvbnMkYWxsLCBrZXkgPSBPYmplY3QuYXNzaWduKHt9LCBfcmVmMTUucGFyYW1zKSwgX3JlZjE1JHF1ZXJ5ID0gX3JlZjE1LnF1ZXJ5LCBxdWVyeSA9IF9yZWYxNSRxdWVyeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYxNSRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5wcmV2ID0gMjsKCiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LnNlbnQucXVlcnlWYWxzZXRDb25maXJtc0J5Tm9uY2Uoa2V5Lm5vbmNlLCBxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni50MCA9IF9jb250ZXh0Ni5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zZW50LnF1ZXJ5VmFsc2V0Q29uZmlybXNCeU5vbmNlKGtleS5ub25jZSk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDYudDAgPSBfY29udGV4dDYuc2VudC5kYXRhOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgdmFsdWUgPSBfY29udGV4dDYudDA7CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ1ZhbHNldENvbmZpcm1zQnlOb25jZScsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeVZhbHNldENvbmZpcm1zQnlOb25jZScsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCAoX2dldHRlcnMkZ2V0VmFsc2V0Q29uMiA9IGdldHRlcnNbJ2dldFZhbHNldENvbmZpcm1zQnlOb25jZSddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRWYWxzZXRDb24yICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRWYWxzZXRDb24yIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAyMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ni50MSA9IF9jb250ZXh0NlsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeVZhbHNldENvbmZpcm1zQnlOb25jZScsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNiwgbnVsbCwgW1syLCAyMl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlMYXN0VmFsc2V0UmVxdWVzdHM6IGZ1bmN0aW9uIFF1ZXJ5TGFzdFZhbHNldFJlcXVlc3RzKF9yZWYxNiwgX3JlZjE3KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmMTckb3B0aW9ucywgX3JlZjE3JG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWYxNyRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWYxNyRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldExhc3RWYWxzZSwgdmFsdWU7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTYuY29tbWl0LCByb290R2V0dGVycyA9IF9yZWYxNi5yb290R2V0dGVycywgZ2V0dGVycyA9IF9yZWYxNi5nZXR0ZXJzOwogICAgICAgICAgICAgICAgX3JlZjE3JG9wdGlvbnMgPSBfcmVmMTcub3B0aW9ucywgX3JlZjE3JG9wdGlvbnMkc3Vic2NyID0gX3JlZjE3JG9wdGlvbnMuc3Vic2NyaWJlLCBzdWJzY3JpYmUgPSBfcmVmMTckb3B0aW9ucyRzdWJzY3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjE3JG9wdGlvbnMkc3Vic2NyLCBfcmVmMTckb3B0aW9ucyRhbGwgPSBfcmVmMTckb3B0aW9ucy5hbGwsIGFsbCA9IF9yZWYxNyRvcHRpb25zJGFsbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTckb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWYxNy5wYXJhbXMpLCBfcmVmMTckcXVlcnkgPSBfcmVmMTcucXVlcnksIHF1ZXJ5ID0gX3JlZjE3JHF1ZXJ5ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjE3JHF1ZXJ5OwogICAgICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc2VudC5xdWVyeUxhc3RWYWxzZXRSZXF1ZXN0cyhxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny50MCA9IF9jb250ZXh0Ny5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zZW50LnF1ZXJ5TGFzdFZhbHNldFJlcXVlc3RzKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDcudDAgPSBfY29udGV4dDcuc2VudC5kYXRhOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgdmFsdWUgPSBfY29udGV4dDcudDA7CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0xhc3RWYWxzZXRSZXF1ZXN0cycsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeUxhc3RWYWxzZXRSZXF1ZXN0cycsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCAoX2dldHRlcnMkZ2V0TGFzdFZhbHNlID0gZ2V0dGVyc1snZ2V0TGFzdFZhbHNldFJlcXVlc3RzJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldExhc3RWYWxzZSAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0TGFzdFZhbHNlIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSAyMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny50MSA9IF9jb250ZXh0N1siY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUxhc3RWYWxzZXRSZXF1ZXN0cycsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNywgbnVsbCwgW1syLCAyMl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlMYXN0UGVuZGluZ1ZhbHNldFJlcXVlc3RCeUFkZHI6IGZ1bmN0aW9uIFF1ZXJ5TGFzdFBlbmRpbmdWYWxzZXRSZXF1ZXN0QnlBZGRyKF9yZWYxOCwgX3JlZjE5KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmMTkkb3B0aW9ucywgX3JlZjE5JG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWYxOSRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWYxOSRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldExhc3RQZW5kaSwgdmFsdWUsIG5leHRfdmFsdWVzLCBfaTQsIF9PYmplY3Qka2V5czMsIHByb3A7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMTguY29tbWl0LCByb290R2V0dGVycyA9IF9yZWYxOC5yb290R2V0dGVycywgZ2V0dGVycyA9IF9yZWYxOC5nZXR0ZXJzOwogICAgICAgICAgICAgICAgX3JlZjE5JG9wdGlvbnMgPSBfcmVmMTkub3B0aW9ucywgX3JlZjE5JG9wdGlvbnMkc3Vic2NyID0gX3JlZjE5JG9wdGlvbnMuc3Vic2NyaWJlLCBzdWJzY3JpYmUgPSBfcmVmMTkkb3B0aW9ucyRzdWJzY3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjE5JG9wdGlvbnMkc3Vic2NyLCBfcmVmMTkkb3B0aW9ucyRhbGwgPSBfcmVmMTkkb3B0aW9ucy5hbGwsIGFsbCA9IF9yZWYxOSRvcHRpb25zJGFsbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTkkb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWYxOS5wYXJhbXMpLCBfcmVmMTkkcXVlcnkgPSBfcmVmMTkucXVlcnksIHF1ZXJ5ID0gX3JlZjE5JHF1ZXJ5ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjE5JHF1ZXJ5OwogICAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc2VudC5xdWVyeUxhc3RQZW5kaW5nVmFsc2V0UmVxdWVzdEJ5QWRkcihxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC50MCA9IF9jb250ZXh0OC5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5zZW50LnF1ZXJ5TGFzdFBlbmRpbmdWYWxzZXRSZXF1ZXN0QnlBZGRyKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDgudDAgPSBfY29udGV4dDguc2VudC5kYXRhOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgdmFsdWUgPSBfY29udGV4dDgudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ4Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguc2VudC5xdWVyeUxhc3RQZW5kaW5nVmFsc2V0UmVxdWVzdEJ5QWRkcihfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHF1ZXJ5KSwge30sIHsKICAgICAgICAgICAgICAgICAgJ3BhZ2luYXRpb24ua2V5JzogdmFsdWUucGFnaW5hdGlvbi5uZXh0S2V5CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICBuZXh0X3ZhbHVlcyA9IF9jb250ZXh0OC5zZW50LmRhdGE7CgogICAgICAgICAgICAgICAgZm9yIChfaTQgPSAwLCBfT2JqZWN0JGtleXMzID0gT2JqZWN0LmtleXMobmV4dF92YWx1ZXMpOyBfaTQgPCBfT2JqZWN0JGtleXMzLmxlbmd0aDsgX2k0KyspIHsKICAgICAgICAgICAgICAgICAgcHJvcCA9IF9PYmplY3Qka2V5czNbX2k0XTsKCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5leHRfdmFsdWVzW3Byb3BdKSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZVtwcm9wXSksIF90b0NvbnN1bWFibGVBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gbmV4dF92YWx1ZXNbcHJvcF07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0xhc3RQZW5kaW5nVmFsc2V0UmVxdWVzdEJ5QWRkcicsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeUxhc3RQZW5kaW5nVmFsc2V0UmVxdWVzdEJ5QWRkcicsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iLCAoX2dldHRlcnMkZ2V0TGFzdFBlbmRpID0gZ2V0dGVyc1snZ2V0TGFzdFBlbmRpbmdWYWxzZXRSZXF1ZXN0QnlBZGRyJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldExhc3RQZW5kaSAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0TGFzdFBlbmRpIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgX2NvbnRleHQ4LnByZXYgPSAzMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OC50MSA9IF9jb250ZXh0OFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUxhc3RQZW5kaW5nVmFsc2V0UmVxdWVzdEJ5QWRkcicsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOCwgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlMYXN0UGVuZGluZ0JhdGNoUmVxdWVzdEJ5QWRkcjogZnVuY3Rpb24gUXVlcnlMYXN0UGVuZGluZ0JhdGNoUmVxdWVzdEJ5QWRkcihfcmVmMjAsIF9yZWYyMSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOSgpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjIxJG9wdGlvbnMsIF9yZWYyMSRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmMjEkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmMjEkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRMYXN0UGVuZGkyLCB2YWx1ZTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU5JChfY29udGV4dDkpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ5LnByZXYgPSBfY29udGV4dDkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyMC5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjIwLnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjIwLmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmMjEkb3B0aW9ucyA9IF9yZWYyMS5vcHRpb25zLCBfcmVmMjEkb3B0aW9ucyRzdWJzY3IgPSBfcmVmMjEkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWYyMSRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMjEkb3B0aW9ucyRzdWJzY3IsIF9yZWYyMSRvcHRpb25zJGFsbCA9IF9yZWYyMSRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjIxJG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyMSRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjIxLnBhcmFtcyksIF9yZWYyMSRxdWVyeSA9IF9yZWYyMS5xdWVyeSwgcXVlcnkgPSBfcmVmMjEkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMjEkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDkucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5zZW50LnF1ZXJ5TGFzdFBlbmRpbmdCYXRjaFJlcXVlc3RCeUFkZHIoa2V5LmFkZHJlc3MsIHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQ5LnQwID0gX2NvbnRleHQ5LnNlbnQuZGF0YTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0OS5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnNlbnQucXVlcnlMYXN0UGVuZGluZ0JhdGNoUmVxdWVzdEJ5QWRkcihrZXkuYWRkcmVzcyk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDkudDAgPSBfY29udGV4dDkuc2VudC5kYXRhOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgdmFsdWUgPSBfY29udGV4dDkudDA7CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0xhc3RQZW5kaW5nQmF0Y2hSZXF1ZXN0QnlBZGRyJywKICAgICAgICAgICAgICAgICAga2V5OiB7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZSkgY29tbWl0KCdTVUJTQ1JJQkUnLCB7CiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ1F1ZXJ5TGFzdFBlbmRpbmdCYXRjaFJlcXVlc3RCeUFkZHInLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldExhc3RQZW5kaTIgPSBnZXR0ZXJzWydnZXRMYXN0UGVuZGluZ0JhdGNoUmVxdWVzdEJ5QWRkciddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRMYXN0UGVuZGkyICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRMYXN0UGVuZGkyIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQ5LnByZXYgPSAyMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS50MSA9IF9jb250ZXh0OVsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUxhc3RQZW5kaW5nQmF0Y2hSZXF1ZXN0QnlBZGRyJywgJ0FQSSBOb2RlIFVuYXZhaWxhYmxlLiBDb3VsZCBub3QgcGVyZm9ybSBxdWVyeS4nKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU5LCBudWxsLCBbWzIsIDIyXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBRdWVyeUxhc3RQZW5kaW5nTG9naWNDYWxsQnlBZGRyOiBmdW5jdGlvbiBRdWVyeUxhc3RQZW5kaW5nTG9naWNDYWxsQnlBZGRyKF9yZWYyMiwgX3JlZjIzKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjIzJG9wdGlvbnMsIF9yZWYyMyRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmMjMkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmMjMkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRMYXN0UGVuZGkzLCB2YWx1ZTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMCQoX2NvbnRleHQxMCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMjIuY29tbWl0LCByb290R2V0dGVycyA9IF9yZWYyMi5yb290R2V0dGVycywgZ2V0dGVycyA9IF9yZWYyMi5nZXR0ZXJzOwogICAgICAgICAgICAgICAgX3JlZjIzJG9wdGlvbnMgPSBfcmVmMjMub3B0aW9ucywgX3JlZjIzJG9wdGlvbnMkc3Vic2NyID0gX3JlZjIzJG9wdGlvbnMuc3Vic2NyaWJlLCBzdWJzY3JpYmUgPSBfcmVmMjMkb3B0aW9ucyRzdWJzY3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIzJG9wdGlvbnMkc3Vic2NyLCBfcmVmMjMkb3B0aW9ucyRhbGwgPSBfcmVmMjMkb3B0aW9ucy5hbGwsIGFsbCA9IF9yZWYyMyRvcHRpb25zJGFsbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMjMkb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWYyMy5wYXJhbXMpLCBfcmVmMjMkcXVlcnkgPSBfcmVmMjMucXVlcnksIHF1ZXJ5ID0gX3JlZjIzJHF1ZXJ5ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjIzJHF1ZXJ5OwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5wcmV2ID0gMjsKCiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zZW50LnF1ZXJ5TGFzdFBlbmRpbmdMb2dpY0NhbGxCeUFkZHIoa2V5LmFkZHJlc3MsIHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMC50MCA9IF9jb250ZXh0MTAuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnNlbnQucXVlcnlMYXN0UGVuZGluZ0xvZ2ljQ2FsbEJ5QWRkcihrZXkuYWRkcmVzcyk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLnQwID0gX2NvbnRleHQxMC5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MTAudDA7CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0xhc3RQZW5kaW5nTG9naWNDYWxsQnlBZGRyJywKICAgICAgICAgICAgICAgICAga2V5OiB7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZSkgY29tbWl0KCdTVUJTQ1JJQkUnLCB7CiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ1F1ZXJ5TGFzdFBlbmRpbmdMb2dpY0NhbGxCeUFkZHInLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRMYXN0UGVuZGkzID0gZ2V0dGVyc1snZ2V0TGFzdFBlbmRpbmdMb2dpY0NhbGxCeUFkZHInXSh7CiAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICB9KSkgIT09IG51bGwgJiYgX2dldHRlcnMkZ2V0TGFzdFBlbmRpMyAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0TGFzdFBlbmRpMyA6IHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAucHJldiA9IDIyOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMC50MSA9IF9jb250ZXh0MTBbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBTcFZ1ZXhFcnJvcignUXVlcnlDbGllbnQ6UXVlcnlMYXN0UGVuZGluZ0xvZ2ljQ2FsbEJ5QWRkcicsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMCwgbnVsbCwgW1syLCAyMl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlMYXN0RXZlbnROb25jZUJ5QWRkcjogZnVuY3Rpb24gUXVlcnlMYXN0RXZlbnROb25jZUJ5QWRkcihfcmVmMjQsIF9yZWYyNSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTEoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcm9vdEdldHRlcnMsIGdldHRlcnMsIF9yZWYyNSRvcHRpb25zLCBfcmVmMjUkb3B0aW9ucyRzdWJzY3IsIHN1YnNjcmliZSwgX3JlZjI1JG9wdGlvbnMkYWxsLCBhbGwsIGtleSwgX3JlZjI1JHF1ZXJ5LCBxdWVyeSwgX2dldHRlcnMkZ2V0TGFzdEV2ZW50LCB2YWx1ZTsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDExLnByZXYgPSBfY29udGV4dDExLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMjQuY29tbWl0LCByb290R2V0dGVycyA9IF9yZWYyNC5yb290R2V0dGVycywgZ2V0dGVycyA9IF9yZWYyNC5nZXR0ZXJzOwogICAgICAgICAgICAgICAgX3JlZjI1JG9wdGlvbnMgPSBfcmVmMjUub3B0aW9ucywgX3JlZjI1JG9wdGlvbnMkc3Vic2NyID0gX3JlZjI1JG9wdGlvbnMuc3Vic2NyaWJlLCBzdWJzY3JpYmUgPSBfcmVmMjUkb3B0aW9ucyRzdWJzY3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjI1JG9wdGlvbnMkc3Vic2NyLCBfcmVmMjUkb3B0aW9ucyRhbGwgPSBfcmVmMjUkb3B0aW9ucy5hbGwsIGFsbCA9IF9yZWYyNSRvcHRpb25zJGFsbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMjUkb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWYyNS5wYXJhbXMpLCBfcmVmMjUkcXVlcnkgPSBfcmVmMjUucXVlcnksIHF1ZXJ5ID0gX3JlZjI1JHF1ZXJ5ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjI1JHF1ZXJ5OwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMjsKCiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5zZW50LnF1ZXJ5TGFzdEV2ZW50Tm9uY2VCeUFkZHIoa2V5LmFkZHJlc3MsIHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMS50MCA9IF9jb250ZXh0MTEuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnNlbnQucXVlcnlMYXN0RXZlbnROb25jZUJ5QWRkcihrZXkuYWRkcmVzcyk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDExLnQwID0gX2NvbnRleHQxMS5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MTEudDA7CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0xhc3RFdmVudE5vbmNlQnlBZGRyJywKICAgICAgICAgICAgICAgICAga2V5OiB7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZSkgY29tbWl0KCdTVUJTQ1JJQkUnLCB7CiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ1F1ZXJ5TGFzdEV2ZW50Tm9uY2VCeUFkZHInLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRMYXN0RXZlbnQgPSBnZXR0ZXJzWydnZXRMYXN0RXZlbnROb25jZUJ5QWRkciddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRMYXN0RXZlbnQgIT09IHZvaWQgMCA/IF9nZXR0ZXJzJGdldExhc3RFdmVudCA6IHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTEucHJldiA9IDIyOwogICAgICAgICAgICAgICAgX2NvbnRleHQxMS50MSA9IF9jb250ZXh0MTFbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBTcFZ1ZXhFcnJvcignUXVlcnlDbGllbnQ6UXVlcnlMYXN0RXZlbnROb25jZUJ5QWRkcicsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDExLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxMSwgbnVsbCwgW1syLCAyMl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlCYXRjaEZlZXM6IGZ1bmN0aW9uIFF1ZXJ5QmF0Y2hGZWVzKF9yZWYyNiwgX3JlZjI3KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMigpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjI3JG9wdGlvbnMsIF9yZWYyNyRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmMjckb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmMjckcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRCYXRjaEZlZXMsIHZhbHVlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEyJChfY29udGV4dDEyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTIucHJldiA9IF9jb250ZXh0MTIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyNi5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjI2LnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjI2LmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmMjckb3B0aW9ucyA9IF9yZWYyNy5vcHRpb25zLCBfcmVmMjckb3B0aW9ucyRzdWJzY3IgPSBfcmVmMjckb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWYyNyRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMjckb3B0aW9ucyRzdWJzY3IsIF9yZWYyNyRvcHRpb25zJGFsbCA9IF9yZWYyNyRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjI3JG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyNyRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjI3LnBhcmFtcyksIF9yZWYyNyRxdWVyeSA9IF9yZWYyNy5xdWVyeSwgcXVlcnkgPSBfcmVmMjckcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMjckcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnNlbnQucXVlcnlCYXRjaEZlZXMocXVlcnkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLnQwID0gX2NvbnRleHQxMi5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc2VudC5xdWVyeUJhdGNoRmVlcygpOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMi50MCA9IF9jb250ZXh0MTIuc2VudC5kYXRhOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgdmFsdWUgPSBfY29udGV4dDEyLnQwOwogICAgICAgICAgICAgICAgY29tbWl0KCdRVUVSWScsIHsKICAgICAgICAgICAgICAgICAgcXVlcnk6ICdCYXRjaEZlZXMnLAogICAgICAgICAgICAgICAgICBrZXk6IHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlKSBjb21taXQoJ1NVQlNDUklCRScsIHsKICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnUXVlcnlCYXRjaEZlZXMnLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRCYXRjaEZlZXMgPSBnZXR0ZXJzWydnZXRCYXRjaEZlZXMnXSh7CiAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICB9KSkgIT09IG51bGwgJiYgX2dldHRlcnMkZ2V0QmF0Y2hGZWVzICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRCYXRjaEZlZXMgOiB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICBfY29udGV4dDEyLnByZXYgPSAyMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTIudDEgPSBfY29udGV4dDEyWyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgU3BWdWV4RXJyb3IoJ1F1ZXJ5Q2xpZW50OlF1ZXJ5QmF0Y2hGZWVzJywgJ0FQSSBOb2RlIFVuYXZhaWxhYmxlLiBDb3VsZCBub3QgcGVyZm9ybSBxdWVyeS4nKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEyLCBudWxsLCBbWzIsIDIyXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBRdWVyeU91dGdvaW5nVHhCYXRjaGVzOiBmdW5jdGlvbiBRdWVyeU91dGdvaW5nVHhCYXRjaGVzKF9yZWYyOCwgX3JlZjI5KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMygpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjI5JG9wdGlvbnMsIF9yZWYyOSRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmMjkkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmMjkkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRPdXRnb2luZ1QsIHZhbHVlOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEzJChfY29udGV4dDEzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTMucHJldiA9IF9jb250ZXh0MTMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyOC5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjI4LnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjI4LmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmMjkkb3B0aW9ucyA9IF9yZWYyOS5vcHRpb25zLCBfcmVmMjkkb3B0aW9ucyRzdWJzY3IgPSBfcmVmMjkkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWYyOSRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMjkkb3B0aW9ucyRzdWJzY3IsIF9yZWYyOSRvcHRpb25zJGFsbCA9IF9yZWYyOSRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjI5JG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyOSRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjI5LnBhcmFtcyksIF9yZWYyOSRxdWVyeSA9IF9yZWYyOS5xdWVyeSwgcXVlcnkgPSBfcmVmMjkkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMjkkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLnNlbnQucXVlcnlPdXRnb2luZ1R4QmF0Y2hlcyhxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMudDAgPSBfY29udGV4dDEzLnNlbnQuZGF0YTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5zZW50LnF1ZXJ5T3V0Z29pbmdUeEJhdGNoZXMoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTMudDAgPSBfY29udGV4dDEzLnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQxMy50MDsKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnT3V0Z29pbmdUeEJhdGNoZXMnLAogICAgICAgICAgICAgICAgICBrZXk6IHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlKSBjb21taXQoJ1NVQlNDUklCRScsIHsKICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnUXVlcnlPdXRnb2luZ1R4QmF0Y2hlcycsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEzLmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldE91dGdvaW5nVCA9IGdldHRlcnNbJ2dldE91dGdvaW5nVHhCYXRjaGVzJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldE91dGdvaW5nVCAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0T3V0Z29pbmdUIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQxMy5wcmV2ID0gMjI7CiAgICAgICAgICAgICAgICBfY29udGV4dDEzLnQxID0gX2NvbnRleHQxM1siY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeU91dGdvaW5nVHhCYXRjaGVzJywgJ0FQSSBOb2RlIFVuYXZhaWxhYmxlLiBDb3VsZCBub3QgcGVyZm9ybSBxdWVyeS4nKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMy5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEzLCBudWxsLCBbWzIsIDIyXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBRdWVyeU91dGdvaW5nTG9naWNDYWxsczogZnVuY3Rpb24gUXVlcnlPdXRnb2luZ0xvZ2ljQ2FsbHMoX3JlZjMwLCBfcmVmMzEpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE0KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmMzEkb3B0aW9ucywgX3JlZjMxJG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWYzMSRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWYzMSRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldE91dGdvaW5nTCwgdmFsdWU7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTQkKF9jb250ZXh0MTQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNC5wcmV2ID0gX2NvbnRleHQxNC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjMwLmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmMzAucm9vdEdldHRlcnMsIGdldHRlcnMgPSBfcmVmMzAuZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWYzMSRvcHRpb25zID0gX3JlZjMxLm9wdGlvbnMsIF9yZWYzMSRvcHRpb25zJHN1YnNjciA9IF9yZWYzMSRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjMxJG9wdGlvbnMkc3Vic2NyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzMSRvcHRpb25zJHN1YnNjciwgX3JlZjMxJG9wdGlvbnMkYWxsID0gX3JlZjMxJG9wdGlvbnMuYWxsLCBhbGwgPSBfcmVmMzEkb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjMxJG9wdGlvbnMkYWxsLCBrZXkgPSBPYmplY3QuYXNzaWduKHt9LCBfcmVmMzEucGFyYW1zKSwgX3JlZjMxJHF1ZXJ5ID0gX3JlZjMxLnF1ZXJ5LCBxdWVyeSA9IF9yZWYzMSRxdWVyeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYzMSRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDE0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTQuc2VudC5xdWVyeU91dGdvaW5nTG9naWNDYWxscyhxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQudDAgPSBfY29udGV4dDE0LnNlbnQuZGF0YTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDE0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zZW50LnF1ZXJ5T3V0Z29pbmdMb2dpY0NhbGxzKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDE0LnQwID0gX2NvbnRleHQxNC5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MTQudDA7CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ091dGdvaW5nTG9naWNDYWxscycsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeU91dGdvaW5nTG9naWNDYWxscycsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldE91dGdvaW5nTCA9IGdldHRlcnNbJ2dldE91dGdvaW5nTG9naWNDYWxscyddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRPdXRnb2luZ0wgIT09IHZvaWQgMCA/IF9nZXR0ZXJzJGdldE91dGdvaW5nTCA6IHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTQucHJldiA9IDIyOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNC50MSA9IF9jb250ZXh0MTRbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBTcFZ1ZXhFcnJvcignUXVlcnlDbGllbnQ6UXVlcnlPdXRnb2luZ0xvZ2ljQ2FsbHMnLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE0LmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTQsIG51bGwsIFtbMiwgMjJdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5QmF0Y2hSZXF1ZXN0QnlOb25jZTogZnVuY3Rpb24gUXVlcnlCYXRjaFJlcXVlc3RCeU5vbmNlKF9yZWYzMiwgX3JlZjMzKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNSgpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjMzJG9wdGlvbnMsIF9yZWYzMyRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmMzMkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmMzMkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRCYXRjaFJlcXUsIHZhbHVlLCBuZXh0X3ZhbHVlcywgX2k1LCBfT2JqZWN0JGtleXM0LCBwcm9wOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE1JChfY29udGV4dDE1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTUucHJldiA9IF9jb250ZXh0MTUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzMi5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjMyLnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjMyLmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmMzMkb3B0aW9ucyA9IF9yZWYzMy5vcHRpb25zLCBfcmVmMzMkb3B0aW9ucyRzdWJzY3IgPSBfcmVmMzMkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWYzMyRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMzMkb3B0aW9ucyRzdWJzY3IsIF9yZWYzMyRvcHRpb25zJGFsbCA9IF9yZWYzMyRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjMzJG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzMyRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjMzLnBhcmFtcyksIF9yZWYzMyRxdWVyeSA9IF9yZWYzMy5xdWVyeSwgcXVlcnkgPSBfcmVmMzMkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMzMkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE1LnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LnNlbnQucXVlcnlCYXRjaFJlcXVlc3RCeU5vbmNlKGtleS5ub25jZSwgcXVlcnkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDE1LnQwID0gX2NvbnRleHQxNS5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDE1Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTUuc2VudC5xdWVyeUJhdGNoUmVxdWVzdEJ5Tm9uY2Uoa2V5Lm5vbmNlKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTUudDAgPSBfY29udGV4dDE1LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQxNS50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIGlmICghKGFsbCAmJiB2YWx1ZS5wYWdpbmF0aW9uICYmIHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleSAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE1Lm5leHQgPSAyNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTUubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTUuc2VudC5xdWVyeUJhdGNoUmVxdWVzdEJ5Tm9uY2Uoa2V5Lm5vbmNlLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHF1ZXJ5KSwge30sIHsKICAgICAgICAgICAgICAgICAgJ3BhZ2luYXRpb24ua2V5JzogdmFsdWUucGFnaW5hdGlvbi5uZXh0S2V5CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICBuZXh0X3ZhbHVlcyA9IF9jb250ZXh0MTUuc2VudC5kYXRhOwoKICAgICAgICAgICAgICAgIGZvciAoX2k1ID0gMCwgX09iamVjdCRrZXlzNCA9IE9iamVjdC5rZXlzKG5leHRfdmFsdWVzKTsgX2k1IDwgX09iamVjdCRrZXlzNC5sZW5ndGg7IF9pNSsrKSB7CiAgICAgICAgICAgICAgICAgIHByb3AgPSBfT2JqZWN0JGtleXM0W19pNV07CgogICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVbcHJvcF0pLCBfdG9Db25zdW1hYmxlQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IG5leHRfdmFsdWVzW3Byb3BdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnQmF0Y2hSZXF1ZXN0QnlOb25jZScsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeUJhdGNoUmVxdWVzdEJ5Tm9uY2UnLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRCYXRjaFJlcXUgPSBnZXR0ZXJzWydnZXRCYXRjaFJlcXVlc3RCeU5vbmNlJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldEJhdGNoUmVxdSAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0QmF0Y2hSZXF1IDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNS5wcmV2ID0gMzE7CiAgICAgICAgICAgICAgICBfY29udGV4dDE1LnQxID0gX2NvbnRleHQxNVsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUJhdGNoUmVxdWVzdEJ5Tm9uY2UnLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE1LmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTUsIG51bGwsIFtbMiwgMzFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5QmF0Y2hDb25maXJtczogZnVuY3Rpb24gUXVlcnlCYXRjaENvbmZpcm1zKF9yZWYzNCwgX3JlZjM1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxNigpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjM1JG9wdGlvbnMsIF9yZWYzNSRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmMzUkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmMzUkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRCYXRjaENvbmYsIHZhbHVlLCBuZXh0X3ZhbHVlcywgX2k2LCBfT2JqZWN0JGtleXM1LCBwcm9wOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTE2JChfY29udGV4dDE2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTYucHJldiA9IF9jb250ZXh0MTYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzNC5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjM0LnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjM0LmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmMzUkb3B0aW9ucyA9IF9yZWYzNS5vcHRpb25zLCBfcmVmMzUkb3B0aW9ucyRzdWJzY3IgPSBfcmVmMzUkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWYzNSRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMzUkb3B0aW9ucyRzdWJzY3IsIF9yZWYzNSRvcHRpb25zJGFsbCA9IF9yZWYzNSRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjM1JG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzNSRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjM1LnBhcmFtcyksIF9yZWYzNSRxdWVyeSA9IF9yZWYzNS5xdWVyeSwgcXVlcnkgPSBfcmVmMzUkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMzUkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDE2LnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnNlbnQucXVlcnlCYXRjaENvbmZpcm1zKHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQxNi50MCA9IF9jb250ZXh0MTYuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnNlbnQucXVlcnlCYXRjaENvbmZpcm1zKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2LnQwID0gX2NvbnRleHQxNi5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MTYudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxNi5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTYubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnNlbnQucXVlcnlCYXRjaENvbmZpcm1zKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcXVlcnkpLCB7fSwgewogICAgICAgICAgICAgICAgICAncGFnaW5hdGlvbi5rZXknOiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIG5leHRfdmFsdWVzID0gX2NvbnRleHQxNi5zZW50LmRhdGE7CgogICAgICAgICAgICAgICAgZm9yIChfaTYgPSAwLCBfT2JqZWN0JGtleXM1ID0gT2JqZWN0LmtleXMobmV4dF92YWx1ZXMpOyBfaTYgPCBfT2JqZWN0JGtleXM1Lmxlbmd0aDsgX2k2KyspIHsKICAgICAgICAgICAgICAgICAgcHJvcCA9IF9PYmplY3Qka2V5czVbX2k2XTsKCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5leHRfdmFsdWVzW3Byb3BdKSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZVtwcm9wXSksIF90b0NvbnN1bWFibGVBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gbmV4dF92YWx1ZXNbcHJvcF07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDE2Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgICAgY29tbWl0KCdRVUVSWScsIHsKICAgICAgICAgICAgICAgICAgcXVlcnk6ICdCYXRjaENvbmZpcm1zJywKICAgICAgICAgICAgICAgICAga2V5OiB7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZSkgY29tbWl0KCdTVUJTQ1JJQkUnLCB7CiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ1F1ZXJ5QmF0Y2hDb25maXJtcycsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldEJhdGNoQ29uZiA9IGdldHRlcnNbJ2dldEJhdGNoQ29uZmlybXMnXSh7CiAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICB9KSkgIT09IG51bGwgJiYgX2dldHRlcnMkZ2V0QmF0Y2hDb25mICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRCYXRjaENvbmYgOiB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICBfY29udGV4dDE2LnByZXYgPSAzMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTYudDEgPSBfY29udGV4dDE2WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgU3BWdWV4RXJyb3IoJ1F1ZXJ5Q2xpZW50OlF1ZXJ5QmF0Y2hDb25maXJtcycsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTYuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxNiwgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlMb2dpY0NvbmZpcm1zOiBmdW5jdGlvbiBRdWVyeUxvZ2ljQ29uZmlybXMoX3JlZjM2LCBfcmVmMzcpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE3KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmMzckb3B0aW9ucywgX3JlZjM3JG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWYzNyRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWYzNyRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldExvZ2ljQ29uZiwgdmFsdWUsIG5leHRfdmFsdWVzLCBfaTcsIF9PYmplY3Qka2V5czYsIHByb3A7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTckKF9jb250ZXh0MTcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxNy5wcmV2ID0gX2NvbnRleHQxNy5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjM2LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmMzYucm9vdEdldHRlcnMsIGdldHRlcnMgPSBfcmVmMzYuZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWYzNyRvcHRpb25zID0gX3JlZjM3Lm9wdGlvbnMsIF9yZWYzNyRvcHRpb25zJHN1YnNjciA9IF9yZWYzNyRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjM3JG9wdGlvbnMkc3Vic2NyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzNyRvcHRpb25zJHN1YnNjciwgX3JlZjM3JG9wdGlvbnMkYWxsID0gX3JlZjM3JG9wdGlvbnMuYWxsLCBhbGwgPSBfcmVmMzckb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjM3JG9wdGlvbnMkYWxsLCBrZXkgPSBPYmplY3QuYXNzaWduKHt9LCBfcmVmMzcucGFyYW1zKSwgX3JlZjM3JHF1ZXJ5ID0gX3JlZjM3LnF1ZXJ5LCBxdWVyeSA9IF9yZWYzNyRxdWVyeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYzNyRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuc2VudC5xdWVyeUxvZ2ljQ29uZmlybXMocXVlcnkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDE3LnQwID0gX2NvbnRleHQxNy5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuc2VudC5xdWVyeUxvZ2ljQ29uZmlybXMoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcudDAgPSBfY29udGV4dDE3LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQxNy50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIGlmICghKGFsbCAmJiB2YWx1ZS5wYWdpbmF0aW9uICYmIHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleSAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE3Lm5leHQgPSAyNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxNy5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuc2VudC5xdWVyeUxvZ2ljQ29uZmlybXMoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBxdWVyeSksIHt9LCB7CiAgICAgICAgICAgICAgICAgICdwYWdpbmF0aW9uLmtleSc6IHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgbmV4dF92YWx1ZXMgPSBfY29udGV4dDE3LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgICBmb3IgKF9pNyA9IDAsIF9PYmplY3Qka2V5czYgPSBPYmplY3Qua2V5cyhuZXh0X3ZhbHVlcyk7IF9pNyA8IF9PYmplY3Qka2V5czYubGVuZ3RoOyBfaTcrKykgewogICAgICAgICAgICAgICAgICBwcm9wID0gX09iamVjdCRrZXlzNltfaTddOwoKICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlW3Byb3BdKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5leHRfdmFsdWVzW3Byb3BdKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBuZXh0X3ZhbHVlc1twcm9wXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0xvZ2ljQ29uZmlybXMnLAogICAgICAgICAgICAgICAgICBrZXk6IHsKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlKSBjb21taXQoJ1NVQlNDUklCRScsIHsKICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnUXVlcnlMb2dpY0NvbmZpcm1zJywKICAgICAgICAgICAgICAgICAgcGF5bG9hZDogewogICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGFsbDogYWxsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuYWJydXB0KCJyZXR1cm4iLCAoX2dldHRlcnMkZ2V0TG9naWNDb25mID0gZ2V0dGVyc1snZ2V0TG9naWNDb25maXJtcyddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRMb2dpY0NvbmYgIT09IHZvaWQgMCA/IF9nZXR0ZXJzJGdldExvZ2ljQ29uZiA6IHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTcucHJldiA9IDMxOwogICAgICAgICAgICAgICAgX2NvbnRleHQxNy50MSA9IF9jb250ZXh0MTdbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBTcFZ1ZXhFcnJvcignUXVlcnlDbGllbnQ6UXVlcnlMb2dpY0NvbmZpcm1zJywgJ0FQSSBOb2RlIFVuYXZhaWxhYmxlLiBDb3VsZCBub3QgcGVyZm9ybSBxdWVyeS4nKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxNy5hYnJ1cHQoInJldHVybiIsIHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAzNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTE3LCBudWxsLCBbWzIsIDMxXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBRdWVyeUVyYzIwVG9EZW5vbTogZnVuY3Rpb24gUXVlcnlFcmMyMFRvRGVub20oX3JlZjM4LCBfcmVmMzkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTE4KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmMzkkb3B0aW9ucywgX3JlZjM5JG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWYzOSRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWYzOSRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldEVyYzIwVG9EZSwgdmFsdWUsIG5leHRfdmFsdWVzLCBfaTgsIF9PYmplY3Qka2V5czcsIHByb3A7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTgkKF9jb250ZXh0MTgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQxOC5wcmV2ID0gX2NvbnRleHQxOC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjM4LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmMzgucm9vdEdldHRlcnMsIGdldHRlcnMgPSBfcmVmMzguZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWYzOSRvcHRpb25zID0gX3JlZjM5Lm9wdGlvbnMsIF9yZWYzOSRvcHRpb25zJHN1YnNjciA9IF9yZWYzOSRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjM5JG9wdGlvbnMkc3Vic2NyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzOSRvcHRpb25zJHN1YnNjciwgX3JlZjM5JG9wdGlvbnMkYWxsID0gX3JlZjM5JG9wdGlvbnMuYWxsLCBhbGwgPSBfcmVmMzkkb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjM5JG9wdGlvbnMkYWxsLCBrZXkgPSBPYmplY3QuYXNzaWduKHt9LCBfcmVmMzkucGFyYW1zKSwgX3JlZjM5JHF1ZXJ5ID0gX3JlZjM5LnF1ZXJ5LCBxdWVyeSA9IF9yZWYzOSRxdWVyeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYzOSRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTgucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE4Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDE4Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTguc2VudC5xdWVyeUVyYzIwVG9EZW5vbShxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTgudDAgPSBfY29udGV4dDE4LnNlbnQuZGF0YTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTgubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDE4Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOC5zZW50LnF1ZXJ5RXJjMjBUb0Rlbm9tKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDE4LnQwID0gX2NvbnRleHQxOC5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MTgudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxOC5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTgubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dDE4Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE4LnNlbnQucXVlcnlFcmMyMFRvRGVub20oX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBxdWVyeSksIHt9LCB7CiAgICAgICAgICAgICAgICAgICdwYWdpbmF0aW9uLmtleSc6IHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgbmV4dF92YWx1ZXMgPSBfY29udGV4dDE4LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgICBmb3IgKF9pOCA9IDAsIF9PYmplY3Qka2V5czcgPSBPYmplY3Qua2V5cyhuZXh0X3ZhbHVlcyk7IF9pOCA8IF9PYmplY3Qka2V5czcubGVuZ3RoOyBfaTgrKykgewogICAgICAgICAgICAgICAgICBwcm9wID0gX09iamVjdCRrZXlzN1tfaThdOwoKICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlW3Byb3BdKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5leHRfdmFsdWVzW3Byb3BdKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBuZXh0X3ZhbHVlc1twcm9wXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTgubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0VyYzIwVG9EZW5vbScsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeUVyYzIwVG9EZW5vbScsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE4LmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldEVyYzIwVG9EZSA9IGdldHRlcnNbJ2dldEVyYzIwVG9EZW5vbSddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRFcmMyMFRvRGUgIT09IHZvaWQgMCA/IF9nZXR0ZXJzJGdldEVyYzIwVG9EZSA6IHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTgucHJldiA9IDMxOwogICAgICAgICAgICAgICAgX2NvbnRleHQxOC50MSA9IF9jb250ZXh0MThbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBTcFZ1ZXhFcnJvcignUXVlcnlDbGllbnQ6UXVlcnlFcmMyMFRvRGVub20nLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE4LmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMTgsIG51bGwsIFtbMiwgMzFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5RGVub21Ub0VyYzIwOiBmdW5jdGlvbiBRdWVyeURlbm9tVG9FcmMyMChfcmVmNDAsIF9yZWY0MSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTkoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcm9vdEdldHRlcnMsIGdldHRlcnMsIF9yZWY0MSRvcHRpb25zLCBfcmVmNDEkb3B0aW9ucyRzdWJzY3IsIHN1YnNjcmliZSwgX3JlZjQxJG9wdGlvbnMkYWxsLCBhbGwsIGtleSwgX3JlZjQxJHF1ZXJ5LCBxdWVyeSwgX2dldHRlcnMkZ2V0RGVub21Ub0VyLCB2YWx1ZSwgbmV4dF92YWx1ZXMsIF9pOSwgX09iamVjdCRrZXlzOCwgcHJvcDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxOSQoX2NvbnRleHQxOSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDE5LnByZXYgPSBfY29udGV4dDE5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNDAuY29tbWl0LCByb290R2V0dGVycyA9IF9yZWY0MC5yb290R2V0dGVycywgZ2V0dGVycyA9IF9yZWY0MC5nZXR0ZXJzOwogICAgICAgICAgICAgICAgX3JlZjQxJG9wdGlvbnMgPSBfcmVmNDEub3B0aW9ucywgX3JlZjQxJG9wdGlvbnMkc3Vic2NyID0gX3JlZjQxJG9wdGlvbnMuc3Vic2NyaWJlLCBzdWJzY3JpYmUgPSBfcmVmNDEkb3B0aW9ucyRzdWJzY3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjQxJG9wdGlvbnMkc3Vic2NyLCBfcmVmNDEkb3B0aW9ucyRhbGwgPSBfcmVmNDEkb3B0aW9ucy5hbGwsIGFsbCA9IF9yZWY0MSRvcHRpb25zJGFsbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNDEkb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWY0MS5wYXJhbXMpLCBfcmVmNDEkcXVlcnkgPSBfcmVmNDEucXVlcnksIHF1ZXJ5ID0gX3JlZjQxJHF1ZXJ5ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjQxJHF1ZXJ5OwogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5wcmV2ID0gMjsKCiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxOS5zZW50LnF1ZXJ5RGVub21Ub0VyYzIwKHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQxOS50MCA9IF9jb250ZXh0MTkuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE5LnNlbnQucXVlcnlEZW5vbVRvRXJjMjAoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkudDAgPSBfY29udGV4dDE5LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQxOS50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIGlmICghKGFsbCAmJiB2YWx1ZS5wYWdpbmF0aW9uICYmIHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleSAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDE5Lm5leHQgPSAyNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MTkubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuc2VudC5xdWVyeURlbm9tVG9FcmMyMChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHF1ZXJ5KSwge30sIHsKICAgICAgICAgICAgICAgICAgJ3BhZ2luYXRpb24ua2V5JzogdmFsdWUucGFnaW5hdGlvbi5uZXh0S2V5CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICBuZXh0X3ZhbHVlcyA9IF9jb250ZXh0MTkuc2VudC5kYXRhOwoKICAgICAgICAgICAgICAgIGZvciAoX2k5ID0gMCwgX09iamVjdCRrZXlzOCA9IE9iamVjdC5rZXlzKG5leHRfdmFsdWVzKTsgX2k5IDwgX09iamVjdCRrZXlzOC5sZW5ndGg7IF9pOSsrKSB7CiAgICAgICAgICAgICAgICAgIHByb3AgPSBfT2JqZWN0JGtleXM4W19pOV07CgogICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVbcHJvcF0pLCBfdG9Db25zdW1hYmxlQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IG5leHRfdmFsdWVzW3Byb3BdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnRGVub21Ub0VyYzIwJywKICAgICAgICAgICAgICAgICAga2V5OiB7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZSkgY29tbWl0KCdTVUJTQ1JJQkUnLCB7CiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ1F1ZXJ5RGVub21Ub0VyYzIwJywKICAgICAgICAgICAgICAgICAgcGF5bG9hZDogewogICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGFsbDogYWxsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuYWJydXB0KCJyZXR1cm4iLCAoX2dldHRlcnMkZ2V0RGVub21Ub0VyID0gZ2V0dGVyc1snZ2V0RGVub21Ub0VyYzIwJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldERlbm9tVG9FciAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0RGVub21Ub0VyIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgX2NvbnRleHQxOS5wcmV2ID0gMzE7CiAgICAgICAgICAgICAgICBfY29udGV4dDE5LnQxID0gX2NvbnRleHQxOVsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeURlbm9tVG9FcmMyMCcsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTkuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDE5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUxOSwgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlHZXREZWxlZ2F0ZUtleUJ5VmFsaWRhdG9yOiBmdW5jdGlvbiBRdWVyeUdldERlbGVnYXRlS2V5QnlWYWxpZGF0b3IoX3JlZjQyLCBfcmVmNDMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIwKCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmNDMkb3B0aW9ucywgX3JlZjQzJG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWY0MyRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWY0MyRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldEdldERlbGVnYSwgdmFsdWUsIG5leHRfdmFsdWVzLCBfaTEwLCBfT2JqZWN0JGtleXM5LCBwcm9wOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIwJChfY29udGV4dDIwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjAucHJldiA9IF9jb250ZXh0MjAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0Mi5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjQyLnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjQyLmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmNDMkb3B0aW9ucyA9IF9yZWY0My5vcHRpb25zLCBfcmVmNDMkb3B0aW9ucyRzdWJzY3IgPSBfcmVmNDMkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWY0MyRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNDMkb3B0aW9ucyRzdWJzY3IsIF9yZWY0MyRvcHRpb25zJGFsbCA9IF9yZWY0MyRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjQzJG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY0MyRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjQzLnBhcmFtcyksIF9yZWY0MyRxdWVyeSA9IF9yZWY0My5xdWVyeSwgcXVlcnkgPSBfcmVmNDMkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNDMkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIwLnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjAubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5VmFsaWRhdG9yKHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQyMC50MCA9IF9jb250ZXh0MjAuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjAubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5VmFsaWRhdG9yKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDIwLnQwID0gX2NvbnRleHQyMC5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MjAudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjAubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIwLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5VmFsaWRhdG9yKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcXVlcnkpLCB7fSwgewogICAgICAgICAgICAgICAgICAncGFnaW5hdGlvbi5rZXknOiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIG5leHRfdmFsdWVzID0gX2NvbnRleHQyMC5zZW50LmRhdGE7CgogICAgICAgICAgICAgICAgZm9yIChfaTEwID0gMCwgX09iamVjdCRrZXlzOSA9IE9iamVjdC5rZXlzKG5leHRfdmFsdWVzKTsgX2kxMCA8IF9PYmplY3Qka2V5czkubGVuZ3RoOyBfaTEwKyspIHsKICAgICAgICAgICAgICAgICAgcHJvcCA9IF9PYmplY3Qka2V5czlbX2kxMF07CgogICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVbcHJvcF0pLCBfdG9Db25zdW1hYmxlQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IG5leHRfdmFsdWVzW3Byb3BdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnR2V0RGVsZWdhdGVLZXlCeVZhbGlkYXRvcicsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeUdldERlbGVnYXRlS2V5QnlWYWxpZGF0b3InLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMC5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRHZXREZWxlZ2EgPSBnZXR0ZXJzWydnZXRHZXREZWxlZ2F0ZUtleUJ5VmFsaWRhdG9yJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldEdldERlbGVnYSAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0R2V0RGVsZWdhIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgX2NvbnRleHQyMC5wcmV2ID0gMzE7CiAgICAgICAgICAgICAgICBfY29udGV4dDIwLnQxID0gX2NvbnRleHQyMFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUdldERlbGVnYXRlS2V5QnlWYWxpZGF0b3InLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIwLmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjAsIG51bGwsIFtbMiwgMzFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5R2V0RGVsZWdhdGVLZXlCeUV0aDogZnVuY3Rpb24gUXVlcnlHZXREZWxlZ2F0ZUtleUJ5RXRoKF9yZWY0NCwgX3JlZjQ1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMSgpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjQ1JG9wdGlvbnMsIF9yZWY0NSRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmNDUkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmNDUkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRHZXREZWxlZ2EyLCB2YWx1ZSwgbmV4dF92YWx1ZXMsIF9pMTEsIF9PYmplY3Qka2V5czEwLCBwcm9wOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIxJChfY29udGV4dDIxKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjEucHJldiA9IF9jb250ZXh0MjEubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0NC5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjQ0LnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjQ0LmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmNDUkb3B0aW9ucyA9IF9yZWY0NS5vcHRpb25zLCBfcmVmNDUkb3B0aW9ucyRzdWJzY3IgPSBfcmVmNDUkb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWY0NSRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNDUkb3B0aW9ucyRzdWJzY3IsIF9yZWY0NSRvcHRpb25zJGFsbCA9IF9yZWY0NSRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjQ1JG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY0NSRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjQ1LnBhcmFtcyksIF9yZWY0NSRxdWVyeSA9IF9yZWY0NS5xdWVyeSwgcXVlcnkgPSBfcmVmNDUkcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNDUkcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIxLnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyMS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjEubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQyMS5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIxLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5RXRoKHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQyMS50MCA9IF9jb250ZXh0MjEuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQyMS5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjEubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIxLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5RXRoKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDIxLnQwID0gX2NvbnRleHQyMS5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MjEudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyMS5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjEubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIxLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIxLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5RXRoKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcXVlcnkpLCB7fSwgewogICAgICAgICAgICAgICAgICAncGFnaW5hdGlvbi5rZXknOiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIG5leHRfdmFsdWVzID0gX2NvbnRleHQyMS5zZW50LmRhdGE7CgogICAgICAgICAgICAgICAgZm9yIChfaTExID0gMCwgX09iamVjdCRrZXlzMTAgPSBPYmplY3Qua2V5cyhuZXh0X3ZhbHVlcyk7IF9pMTEgPCBfT2JqZWN0JGtleXMxMC5sZW5ndGg7IF9pMTErKykgewogICAgICAgICAgICAgICAgICBwcm9wID0gX09iamVjdCRrZXlzMTBbX2kxMV07CgogICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVbcHJvcF0pLCBfdG9Db25zdW1hYmxlQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IG5leHRfdmFsdWVzW3Byb3BdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyMS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnR2V0RGVsZWdhdGVLZXlCeUV0aCcsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeUdldERlbGVnYXRlS2V5QnlFdGgnLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMS5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRHZXREZWxlZ2EyID0gZ2V0dGVyc1snZ2V0R2V0RGVsZWdhdGVLZXlCeUV0aCddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRHZXREZWxlZ2EyICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRHZXREZWxlZ2EyIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgX2NvbnRleHQyMS5wcmV2ID0gMzE7CiAgICAgICAgICAgICAgICBfY29udGV4dDIxLnQxID0gX2NvbnRleHQyMVsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUdldERlbGVnYXRlS2V5QnlFdGgnLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIxLmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjEsIG51bGwsIFtbMiwgMzFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5R2V0RGVsZWdhdGVLZXlCeU9yY2hlc3RyYXRvcjogZnVuY3Rpb24gUXVlcnlHZXREZWxlZ2F0ZUtleUJ5T3JjaGVzdHJhdG9yKF9yZWY0NiwgX3JlZjQ3KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMigpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjQ3JG9wdGlvbnMsIF9yZWY0NyRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmNDckb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmNDckcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRHZXREZWxlZ2EzLCB2YWx1ZSwgbmV4dF92YWx1ZXMsIF9pMTIsIF9PYmplY3Qka2V5czExLCBwcm9wOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIyJChfY29udGV4dDIyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjIucHJldiA9IF9jb250ZXh0MjIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0Ni5jb21taXQsIHJvb3RHZXR0ZXJzID0gX3JlZjQ2LnJvb3RHZXR0ZXJzLCBnZXR0ZXJzID0gX3JlZjQ2LmdldHRlcnM7CiAgICAgICAgICAgICAgICBfcmVmNDckb3B0aW9ucyA9IF9yZWY0Ny5vcHRpb25zLCBfcmVmNDckb3B0aW9ucyRzdWJzY3IgPSBfcmVmNDckb3B0aW9ucy5zdWJzY3JpYmUsIHN1YnNjcmliZSA9IF9yZWY0NyRvcHRpb25zJHN1YnNjciA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNDckb3B0aW9ucyRzdWJzY3IsIF9yZWY0NyRvcHRpb25zJGFsbCA9IF9yZWY0NyRvcHRpb25zLmFsbCwgYWxsID0gX3JlZjQ3JG9wdGlvbnMkYWxsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY0NyRvcHRpb25zJGFsbCwga2V5ID0gT2JqZWN0LmFzc2lnbih7fSwgX3JlZjQ3LnBhcmFtcyksIF9yZWY0NyRxdWVyeSA9IF9yZWY0Ny5xdWVyeSwgcXVlcnkgPSBfcmVmNDckcXVlcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNDckcXVlcnk7CiAgICAgICAgICAgICAgICBfY29udGV4dDIyLnByZXYgPSAyOwoKICAgICAgICAgICAgICAgIGlmICghcXVlcnkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyMi5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjIubmV4dCA9IDY7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQyMi5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIyLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5T3JjaGVzdHJhdG9yKHF1ZXJ5KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQyMi50MCA9IF9jb250ZXh0MjIuc2VudC5kYXRhOwogICAgICAgICAgICAgICAgX2NvbnRleHQyMi5uZXh0ID0gMTY7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjIubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBfY29udGV4dDIyLm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIyLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5T3JjaGVzdHJhdG9yKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDIyLnQwID0gX2NvbnRleHQyMi5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MjIudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyMi5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjIubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIyLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIyLnNlbnQucXVlcnlHZXREZWxlZ2F0ZUtleUJ5T3JjaGVzdHJhdG9yKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcXVlcnkpLCB7fSwgewogICAgICAgICAgICAgICAgICAncGFnaW5hdGlvbi5rZXknOiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIG5leHRfdmFsdWVzID0gX2NvbnRleHQyMi5zZW50LmRhdGE7CgogICAgICAgICAgICAgICAgZm9yIChfaTEyID0gMCwgX09iamVjdCRrZXlzMTEgPSBPYmplY3Qua2V5cyhuZXh0X3ZhbHVlcyk7IF9pMTIgPCBfT2JqZWN0JGtleXMxMS5sZW5ndGg7IF9pMTIrKykgewogICAgICAgICAgICAgICAgICBwcm9wID0gX09iamVjdCRrZXlzMTFbX2kxMl07CgogICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmFsdWVbcHJvcF0pLCBfdG9Db25zdW1hYmxlQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YWx1ZVtwcm9wXSA9IG5leHRfdmFsdWVzW3Byb3BdOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyMi5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnR2V0RGVsZWdhdGVLZXlCeU9yY2hlc3RyYXRvcicsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeUdldERlbGVnYXRlS2V5QnlPcmNoZXN0cmF0b3InLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMi5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRHZXREZWxlZ2EzID0gZ2V0dGVyc1snZ2V0R2V0RGVsZWdhdGVLZXlCeU9yY2hlc3RyYXRvciddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRHZXREZWxlZ2EzICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRHZXREZWxlZ2EzIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgX2NvbnRleHQyMi5wcmV2ID0gMzE7CiAgICAgICAgICAgICAgICBfY29udGV4dDIyLnQxID0gX2NvbnRleHQyMlsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeUdldERlbGVnYXRlS2V5QnlPcmNoZXN0cmF0b3InLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIyLmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyMi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjIsIG51bGwsIFtbMiwgMzFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5R2V0UGVuZGluZ1NlbmRUb0V0aDogZnVuY3Rpb24gUXVlcnlHZXRQZW5kaW5nU2VuZFRvRXRoKF9yZWY0OCwgX3JlZjQ5KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyMygpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjQ5JG9wdGlvbnMsIF9yZWY0OSRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmNDkkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmNDkkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRHZXRQZW5kaW4sIHZhbHVlLCBuZXh0X3ZhbHVlcywgX2kxMywgX09iamVjdCRrZXlzMTIsIHByb3A7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjMkKF9jb250ZXh0MjMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyMy5wcmV2ID0gX2NvbnRleHQyMy5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjQ4LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmNDgucm9vdEdldHRlcnMsIGdldHRlcnMgPSBfcmVmNDguZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWY0OSRvcHRpb25zID0gX3JlZjQ5Lm9wdGlvbnMsIF9yZWY0OSRvcHRpb25zJHN1YnNjciA9IF9yZWY0OSRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjQ5JG9wdGlvbnMkc3Vic2NyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY0OSRvcHRpb25zJHN1YnNjciwgX3JlZjQ5JG9wdGlvbnMkYWxsID0gX3JlZjQ5JG9wdGlvbnMuYWxsLCBhbGwgPSBfcmVmNDkkb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjQ5JG9wdGlvbnMkYWxsLCBrZXkgPSBPYmplY3QuYXNzaWduKHt9LCBfcmVmNDkucGFyYW1zKSwgX3JlZjQ5JHF1ZXJ5ID0gX3JlZjQ5LnF1ZXJ5LCBxdWVyeSA9IF9yZWY0OSRxdWVyeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY0OSRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjMucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIzLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyMy5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDIzLm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuc2VudC5xdWVyeUdldFBlbmRpbmdTZW5kVG9FdGgocXVlcnkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDIzLnQwID0gX2NvbnRleHQyMy5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDIzLm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQyMy5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjMubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuc2VudC5xdWVyeUdldFBlbmRpbmdTZW5kVG9FdGgoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjMudDAgPSBfY29udGV4dDIzLnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQyMy50MDsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIGlmICghKGFsbCAmJiB2YWx1ZS5wYWdpbmF0aW9uICYmIHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleSAhPSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIzLm5leHQgPSAyNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyMy5uZXh0ID0gMjA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjMubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuc2VudC5xdWVyeUdldFBlbmRpbmdTZW5kVG9FdGgoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBxdWVyeSksIHt9LCB7CiAgICAgICAgICAgICAgICAgICdwYWdpbmF0aW9uLmtleSc6IHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgbmV4dF92YWx1ZXMgPSBfY29udGV4dDIzLnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgICBmb3IgKF9pMTMgPSAwLCBfT2JqZWN0JGtleXMxMiA9IE9iamVjdC5rZXlzKG5leHRfdmFsdWVzKTsgX2kxMyA8IF9PYmplY3Qka2V5czEyLmxlbmd0aDsgX2kxMysrKSB7CiAgICAgICAgICAgICAgICAgIHByb3AgPSBfT2JqZWN0JGtleXMxMltfaTEzXTsKCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5leHRfdmFsdWVzW3Byb3BdKSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZVtwcm9wXSksIF90b0NvbnN1bWFibGVBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gbmV4dF92YWx1ZXNbcHJvcF07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDIzLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgICAgY29tbWl0KCdRVUVSWScsIHsKICAgICAgICAgICAgICAgICAgcXVlcnk6ICdHZXRQZW5kaW5nU2VuZFRvRXRoJywKICAgICAgICAgICAgICAgICAga2V5OiB7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZSkgY29tbWl0KCdTVUJTQ1JJQkUnLCB7CiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ1F1ZXJ5R2V0UGVuZGluZ1NlbmRUb0V0aCcsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIzLmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldEdldFBlbmRpbiA9IGdldHRlcnNbJ2dldEdldFBlbmRpbmdTZW5kVG9FdGgnXSh7CiAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5CiAgICAgICAgICAgICAgICB9KSkgIT09IG51bGwgJiYgX2dldHRlcnMkZ2V0R2V0UGVuZGluICE9PSB2b2lkIDAgPyBfZ2V0dGVycyRnZXRHZXRQZW5kaW4gOiB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgICAgICBfY29udGV4dDIzLnByZXYgPSAzMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjMudDEgPSBfY29udGV4dDIzWyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihuZXcgU3BWdWV4RXJyb3IoJ1F1ZXJ5Q2xpZW50OlF1ZXJ5R2V0UGVuZGluZ1NlbmRUb0V0aCcsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjMuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyMywgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgUXVlcnlPcmNoZXN0cmF0b3JBZGRyZXNzQWxsOiBmdW5jdGlvbiBRdWVyeU9yY2hlc3RyYXRvckFkZHJlc3NBbGwoX3JlZjUwLCBfcmVmNTEpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI0KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmNTEkb3B0aW9ucywgX3JlZjUxJG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWY1MSRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWY1MSRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldE9yY2hlc3RyYSwgdmFsdWU7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjQkKF9jb250ZXh0MjQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNC5wcmV2ID0gX2NvbnRleHQyNC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjUwLmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmNTAucm9vdEdldHRlcnMsIGdldHRlcnMgPSBfcmVmNTAuZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWY1MSRvcHRpb25zID0gX3JlZjUxLm9wdGlvbnMsIF9yZWY1MSRvcHRpb25zJHN1YnNjciA9IF9yZWY1MSRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjUxJG9wdGlvbnMkc3Vic2NyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY1MSRvcHRpb25zJHN1YnNjciwgX3JlZjUxJG9wdGlvbnMkYWxsID0gX3JlZjUxJG9wdGlvbnMuYWxsLCBhbGwgPSBfcmVmNTEkb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjUxJG9wdGlvbnMkYWxsLCBrZXkgPSBPYmplY3QuYXNzaWduKHt9LCBfcmVmNTEucGFyYW1zKSwgX3JlZjUxJHF1ZXJ5ID0gX3JlZjUxLnF1ZXJ5LCBxdWVyeSA9IF9yZWY1MSRxdWVyeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY1MSRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjQucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDI0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyNC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDI0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjQuc2VudC5xdWVyeU9yY2hlc3RyYXRvckFkZHJlc3NBbGwocXVlcnkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDI0LnQwID0gX2NvbnRleHQyNC5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDI0Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQyNC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjQuc2VudC5xdWVyeU9yY2hlc3RyYXRvckFkZHJlc3NBbGwoKTsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjQudDAgPSBfY29udGV4dDI0LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIHZhbHVlID0gX2NvbnRleHQyNC50MDsKICAgICAgICAgICAgICAgIGNvbW1pdCgnUVVFUlknLCB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiAnT3JjaGVzdHJhdG9yQWRkcmVzc0FsbCcsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdRdWVyeU9yY2hlc3RyYXRvckFkZHJlc3NBbGwnLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNC5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRPcmNoZXN0cmEgPSBnZXR0ZXJzWydnZXRPcmNoZXN0cmF0b3JBZGRyZXNzQWxsJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldE9yY2hlc3RyYSAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0T3JjaGVzdHJhIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgX2NvbnRleHQyNC5wcmV2ID0gMjI7CiAgICAgICAgICAgICAgICBfY29udGV4dDI0LnQxID0gX2NvbnRleHQyNFsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpRdWVyeU9yY2hlc3RyYXRvckFkZHJlc3NBbGwnLCAnQVBJIE5vZGUgVW5hdmFpbGFibGUuIENvdWxkIG5vdCBwZXJmb3JtIHF1ZXJ5LicpKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI0LmFicnVwdCgicmV0dXJuIiwge30pOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjQsIG51bGwsIFtbMiwgMjJdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIFF1ZXJ5Q29zbW9zVG9FdGhBbGw6IGZ1bmN0aW9uIFF1ZXJ5Q29zbW9zVG9FdGhBbGwoX3JlZjUyLCBfcmVmNTMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI1KCkgewogICAgICAgIHZhciBjb21taXQsIHJvb3RHZXR0ZXJzLCBnZXR0ZXJzLCBfcmVmNTMkb3B0aW9ucywgX3JlZjUzJG9wdGlvbnMkc3Vic2NyLCBzdWJzY3JpYmUsIF9yZWY1MyRvcHRpb25zJGFsbCwgYWxsLCBrZXksIF9yZWY1MyRxdWVyeSwgcXVlcnksIF9nZXR0ZXJzJGdldENvc21vc1RvRSwgdmFsdWUsIG5leHRfdmFsdWVzLCBfaTE0LCBfT2JqZWN0JGtleXMxMywgcHJvcDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyNSQoX2NvbnRleHQyNSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDI1LnByZXYgPSBfY29udGV4dDI1Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNTIuY29tbWl0LCByb290R2V0dGVycyA9IF9yZWY1Mi5yb290R2V0dGVycywgZ2V0dGVycyA9IF9yZWY1Mi5nZXR0ZXJzOwogICAgICAgICAgICAgICAgX3JlZjUzJG9wdGlvbnMgPSBfcmVmNTMub3B0aW9ucywgX3JlZjUzJG9wdGlvbnMkc3Vic2NyID0gX3JlZjUzJG9wdGlvbnMuc3Vic2NyaWJlLCBzdWJzY3JpYmUgPSBfcmVmNTMkb3B0aW9ucyRzdWJzY3IgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjUzJG9wdGlvbnMkc3Vic2NyLCBfcmVmNTMkb3B0aW9ucyRhbGwgPSBfcmVmNTMkb3B0aW9ucy5hbGwsIGFsbCA9IF9yZWY1MyRvcHRpb25zJGFsbCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNTMkb3B0aW9ucyRhbGwsIGtleSA9IE9iamVjdC5hc3NpZ24oe30sIF9yZWY1My5wYXJhbXMpLCBfcmVmNTMkcXVlcnkgPSBfcmVmNTMucXVlcnksIHF1ZXJ5ID0gX3JlZjUzJHF1ZXJ5ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjUzJHF1ZXJ5OwogICAgICAgICAgICAgICAgX2NvbnRleHQyNS5wcmV2ID0gMjsKCiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5KSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDExOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNS5zZW50LnF1ZXJ5Q29zbW9zVG9FdGhBbGwocXVlcnkpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBfY29udGV4dDI1LnQwID0gX2NvbnRleHQyNS5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSAxNjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQyNS5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFF1ZXJ5Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjUuc2VudC5xdWVyeUNvc21vc1RvRXRoQWxsKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDI1LnQwID0gX2NvbnRleHQyNS5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MjUudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyNS5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dDI1Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI1LnNlbnQucXVlcnlDb3Ntb3NUb0V0aEFsbChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHF1ZXJ5KSwge30sIHsKICAgICAgICAgICAgICAgICAgJ3BhZ2luYXRpb24ua2V5JzogdmFsdWUucGFnaW5hdGlvbi5uZXh0S2V5CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICBuZXh0X3ZhbHVlcyA9IF9jb250ZXh0MjUuc2VudC5kYXRhOwoKICAgICAgICAgICAgICAgIGZvciAoX2kxNCA9IDAsIF9PYmplY3Qka2V5czEzID0gT2JqZWN0LmtleXMobmV4dF92YWx1ZXMpOyBfaTE0IDwgX09iamVjdCRrZXlzMTMubGVuZ3RoOyBfaTE0KyspIHsKICAgICAgICAgICAgICAgICAgcHJvcCA9IF9PYmplY3Qka2V5czEzW19pMTRdOwoKICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dF92YWx1ZXNbcHJvcF0pKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlW3Byb3BdKSwgX3RvQ29uc3VtYWJsZUFycmF5KG5leHRfdmFsdWVzW3Byb3BdKSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWVbcHJvcF0gPSBuZXh0X3ZhbHVlc1twcm9wXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgICBjb21taXQoJ1FVRVJZJywgewogICAgICAgICAgICAgICAgICBxdWVyeTogJ0Nvc21vc1RvRXRoQWxsJywKICAgICAgICAgICAgICAgICAga2V5OiB7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZSkgY29tbWl0KCdTVUJTQ1JJQkUnLCB7CiAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ1F1ZXJ5Q29zbW9zVG9FdGhBbGwnLAogICAgICAgICAgICAgICAgICBwYXlsb2FkOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICAgYWxsOiBhbGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNS5hYnJ1cHQoInJldHVybiIsIChfZ2V0dGVycyRnZXRDb3Ntb3NUb0UgPSBnZXR0ZXJzWydnZXRDb3Ntb3NUb0V0aEFsbCddKHsKICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgIH0pKSAhPT0gbnVsbCAmJiBfZ2V0dGVycyRnZXRDb3Ntb3NUb0UgIT09IHZvaWQgMCA/IF9nZXR0ZXJzJGdldENvc21vc1RvRSA6IHt9KTsKCiAgICAgICAgICAgICAgY2FzZSAzMToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjUucHJldiA9IDMxOwogICAgICAgICAgICAgICAgX2NvbnRleHQyNS50MSA9IF9jb250ZXh0MjVbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG5ldyBTcFZ1ZXhFcnJvcignUXVlcnlDbGllbnQ6UXVlcnlDb3Ntb3NUb0V0aEFsbCcsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjUuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyNSwgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgTXNnVmFsc2V0VXBkYXRlQ2xhaW06IGZ1bmN0aW9uIE1zZ1ZhbHNldFVwZGF0ZUNsYWltKF9yZWY1NCwgX3JlZjU1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNigpIHsKICAgICAgICB2YXIgY29tbWl0LCByb290R2V0dGVycywgZ2V0dGVycywgX3JlZjU1JG9wdGlvbnMsIF9yZWY1NSRvcHRpb25zJHN1YnNjciwgc3Vic2NyaWJlLCBfcmVmNTUkb3B0aW9ucyRhbGwsIGFsbCwga2V5LCBfcmVmNTUkcXVlcnksIHF1ZXJ5LCBfZ2V0dGVycyRnZXRWYWxzZXRVcGQsIHZhbHVlLCBuZXh0X3ZhbHVlcywgX2kxNSwgX09iamVjdCRrZXlzMTQsIHByb3A7CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjYkKF9jb250ZXh0MjYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNi5wcmV2ID0gX2NvbnRleHQyNi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjU0LmNvbW1pdCwgcm9vdEdldHRlcnMgPSBfcmVmNTQucm9vdEdldHRlcnMsIGdldHRlcnMgPSBfcmVmNTQuZ2V0dGVyczsKICAgICAgICAgICAgICAgIF9yZWY1NSRvcHRpb25zID0gX3JlZjU1Lm9wdGlvbnMsIF9yZWY1NSRvcHRpb25zJHN1YnNjciA9IF9yZWY1NSRvcHRpb25zLnN1YnNjcmliZSwgc3Vic2NyaWJlID0gX3JlZjU1JG9wdGlvbnMkc3Vic2NyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY1NSRvcHRpb25zJHN1YnNjciwgX3JlZjU1JG9wdGlvbnMkYWxsID0gX3JlZjU1JG9wdGlvbnMuYWxsLCBhbGwgPSBfcmVmNTUkb3B0aW9ucyRhbGwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjU1JG9wdGlvbnMkYWxsLCBrZXkgPSBPYmplY3QuYXNzaWduKHt9LCBfcmVmNTUucGFyYW1zKSwgX3JlZjU1JHF1ZXJ5ID0gX3JlZjU1LnF1ZXJ5LCBxdWVyeSA9IF9yZWY1NSRxdWVyeSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY1NSRxdWVyeTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjYucHJldiA9IDI7CgogICAgICAgICAgICAgICAgaWYgKCFxdWVyeSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDI2Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dDI2Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjYuc2VudC5tc2dWYWxzZXRVcGRhdGVDbGFpbShxdWVyeSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjYudDAgPSBfY29udGV4dDI2LnNlbnQuZGF0YTsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDE2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDI2Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0UXVlcnlDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gMTU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyNi5zZW50Lm1zZ1ZhbHNldFVwZGF0ZUNsYWltKCk7CgogICAgICAgICAgICAgIGNhc2UgMTU6CiAgICAgICAgICAgICAgICBfY29udGV4dDI2LnQwID0gX2NvbnRleHQyNi5zZW50LmRhdGE7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jb250ZXh0MjYudDA7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICBpZiAoIShhbGwgJiYgdmFsdWUucGFnaW5hdGlvbiAmJiB2YWx1ZS5wYWdpbmF0aW9uLm5leHRLZXkgIT0gbnVsbCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyNi5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjYubmV4dCA9IDIwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRRdWVyeUNsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMjA6CiAgICAgICAgICAgICAgICBfY29udGV4dDI2Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI2LnNlbnQubXNnVmFsc2V0VXBkYXRlQ2xhaW0oX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBxdWVyeSksIHt9LCB7CiAgICAgICAgICAgICAgICAgICdwYWdpbmF0aW9uLmtleSc6IHZhbHVlLnBhZ2luYXRpb24ubmV4dEtleQogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgbmV4dF92YWx1ZXMgPSBfY29udGV4dDI2LnNlbnQuZGF0YTsKCiAgICAgICAgICAgICAgICBmb3IgKF9pMTUgPSAwLCBfT2JqZWN0JGtleXMxNCA9IE9iamVjdC5rZXlzKG5leHRfdmFsdWVzKTsgX2kxNSA8IF9PYmplY3Qka2V5czE0Lmxlbmd0aDsgX2kxNSsrKSB7CiAgICAgICAgICAgICAgICAgIHByb3AgPSBfT2JqZWN0JGtleXMxNFtfaTE1XTsKCiAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5leHRfdmFsdWVzW3Byb3BdKSkgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh2YWx1ZVtwcm9wXSksIF90b0NvbnN1bWFibGVBcnJheShuZXh0X3ZhbHVlc1twcm9wXSkpOwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhbHVlW3Byb3BdID0gbmV4dF92YWx1ZXNbcHJvcF07CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBfY29udGV4dDI2Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDI2OgogICAgICAgICAgICAgICAgY29tbWl0KCdRVUVSWScsIHsKICAgICAgICAgICAgICAgICAgcXVlcnk6ICdWYWxzZXRVcGRhdGVDbGFpbScsCiAgICAgICAgICAgICAgICAgIGtleTogewogICAgICAgICAgICAgICAgICAgIHBhcmFtczogX29iamVjdFNwcmVhZCh7fSwga2V5KSwKICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUpIGNvbW1pdCgnU1VCU0NSSUJFJywgewogICAgICAgICAgICAgICAgICBhY3Rpb246ICdNc2dWYWxzZXRVcGRhdGVDbGFpbScsCiAgICAgICAgICAgICAgICAgIHBheWxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICBhbGw6IGFsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfb2JqZWN0U3ByZWFkKHt9LCBrZXkpLAogICAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI2LmFicnVwdCgicmV0dXJuIiwgKF9nZXR0ZXJzJGdldFZhbHNldFVwZCA9IGdldHRlcnNbJ2dldFZhbHNldFVwZGF0ZUNsYWltJ10oewogICAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIGtleSksCiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeQogICAgICAgICAgICAgICAgfSkpICE9PSBudWxsICYmIF9nZXR0ZXJzJGdldFZhbHNldFVwZCAhPT0gdm9pZCAwID8gX2dldHRlcnMkZ2V0VmFsc2V0VXBkIDoge30pOwoKICAgICAgICAgICAgICBjYXNlIDMxOgogICAgICAgICAgICAgICAgX2NvbnRleHQyNi5wcmV2ID0gMzE7CiAgICAgICAgICAgICAgICBfY29udGV4dDI2LnQxID0gX2NvbnRleHQyNlsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobmV3IFNwVnVleEVycm9yKCdRdWVyeUNsaWVudDpNc2dWYWxzZXRVcGRhdGVDbGFpbScsICdBUEkgTm9kZSBVbmF2YWlsYWJsZS4gQ291bGQgbm90IHBlcmZvcm0gcXVlcnkuJykpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjYuYWJydXB0KCJyZXR1cm4iLCB7fSk7CgogICAgICAgICAgICAgIGNhc2UgMzU6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI2LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyNiwgbnVsbCwgW1syLCAzMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2VuZE1zZ0NyZWF0ZU9yY2hlc3RyYXRvckFkZHJlc3M6IGZ1bmN0aW9uIHNlbmRNc2dDcmVhdGVPcmNoZXN0cmF0b3JBZGRyZXNzKF9yZWY1NiwgX3JlZjU3KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyNygpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBmZWUsIG1lbW8sIG1zZywgcmVzdWx0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMjckKF9jb250ZXh0MjcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyNy5wcmV2ID0gX2NvbnRleHQyNy5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmNTYucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWY1Ny52YWx1ZSwgZmVlID0gX3JlZjU3LmZlZSwgbWVtbyA9IF9yZWY1Ny5tZW1vOwogICAgICAgICAgICAgICAgX2NvbnRleHQyNy5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjcubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQyNy5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI3LnNlbnQubXNnQ3JlYXRlT3JjaGVzdHJhdG9yQWRkcmVzcyh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0Mjcuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjcubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDI3Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI3LnNlbnQuc2lnbkFuZEJyb2FkY2FzdChbbXNnXSwgewogICAgICAgICAgICAgICAgICBmZWU6IHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZlZSwKICAgICAgICAgICAgICAgICAgICBnYXM6ICIyMDAwMDAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG1lbW86IG1lbW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQyNy5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MjcuYWJydXB0KCJyZXR1cm4iLCByZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQyNy5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBfY29udGV4dDI3LnQwID0gX2NvbnRleHQyN1siY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDI3LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MjcubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0NyZWF0ZU9yY2hlc3RyYXRvckFkZHJlc3M6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDcmVhdGVPcmNoZXN0cmF0b3JBZGRyZXNzOlNlbmQnLCAnQ291bGQgbm90IGJyb2FkY2FzdCBUeC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mjcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTI3LCBudWxsLCBbWzIsIDE2XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzZW5kTXNnV2l0aGRyYXdDbGFpbTogZnVuY3Rpb24gc2VuZE1zZ1dpdGhkcmF3Q2xhaW0oX3JlZjU4LCBfcmVmNTkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTI4KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyOCQoX2NvbnRleHQyOCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDI4LnByZXYgPSBfY29udGV4dDI4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY1OC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjU5LnZhbHVlLCBmZWUgPSBfcmVmNTkuZmVlLCBtZW1vID0gX3JlZjU5Lm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDI4LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQyOC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDI4Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mjguc2VudC5tc2dXaXRoZHJhd0NsYWltKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQyOC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQyOC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjgubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mjguc2VudC5zaWduQW5kQnJvYWRjYXN0KFttc2ddLCB7CiAgICAgICAgICAgICAgICAgIGZlZTogewogICAgICAgICAgICAgICAgICAgIGFtb3VudDogZmVlLAogICAgICAgICAgICAgICAgICAgIGdhczogIjIwMDAwMCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgbWVtbzogbWVtbwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDI4LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyOC5hYnJ1cHQoInJldHVybiIsIHJlc3VsdCk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBfY29udGV4dDI4LnByZXYgPSAxNjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjgudDAgPSBfY29udGV4dDI4WyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0MjgudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyOC5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnV2l0aGRyYXdDbGFpbTpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1dpdGhkcmF3Q2xhaW06U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyOC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMjgsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dWYWxzZXRDb25maXJtOiBmdW5jdGlvbiBzZW5kTXNnVmFsc2V0Q29uZmlybShfcmVmNjAsIF9yZWY2MSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMjkoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgZmVlLCBtZW1vLCBtc2csIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTI5JChfY29udGV4dDI5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MjkucHJldiA9IF9jb250ZXh0MjkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjYwLnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmNjEudmFsdWUsIGZlZSA9IF9yZWY2MS5mZWUsIG1lbW8gPSBfcmVmNjEubWVtbzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MjkucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDI5Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MjkubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyOS5zZW50Lm1zZ1ZhbHNldENvbmZpcm0odmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDI5LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDI5Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyOS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyOS5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0Mjkuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI5LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MjkucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQyOS50MCA9IF9jb250ZXh0MjlbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQyOS50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDI5Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dWYWxzZXRDb25maXJtOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVmFsc2V0Q29uZmlybTpTZW5kJywgJ0NvdWxkIG5vdCBicm9hZGNhc3QgVHguJyk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDI5LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyOSwgbnVsbCwgW1syLCAxNl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2VuZE1zZ0NvbmZpcm1Mb2dpY0NhbGw6IGZ1bmN0aW9uIHNlbmRNc2dDb25maXJtTG9naWNDYWxsKF9yZWY2MiwgX3JlZjYzKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzMCgpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBmZWUsIG1lbW8sIG1zZywgcmVzdWx0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMzAkKF9jb250ZXh0MzApIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzMC5wcmV2ID0gX2NvbnRleHQzMC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmNjIucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWY2My52YWx1ZSwgZmVlID0gX3JlZjYzLmZlZSwgbWVtbyA9IF9yZWY2My5tZW1vOwogICAgICAgICAgICAgICAgX2NvbnRleHQzMC5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzAubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQzMC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMwLnNlbnQubXNnQ29uZmlybUxvZ2ljQ2FsbCh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0MzAuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzAubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDMwLm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMwLnNlbnQuc2lnbkFuZEJyb2FkY2FzdChbbXNnXSwgewogICAgICAgICAgICAgICAgICBmZWU6IHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZlZSwKICAgICAgICAgICAgICAgICAgICBnYXM6ICIyMDAwMDAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG1lbW86IG1lbW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQzMC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzAuYWJydXB0KCJyZXR1cm4iLCByZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQzMC5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBfY29udGV4dDMwLnQwID0gX2NvbnRleHQzMFsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDMwLnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzAubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0NvbmZpcm1Mb2dpY0NhbGw6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDb25maXJtTG9naWNDYWxsOlNlbmQnLCAnQ291bGQgbm90IGJyb2FkY2FzdCBUeC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMwLCBudWxsLCBbWzIsIDE2XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzZW5kTXNnQ3JlYXRlQ29zbW9zVG9FdGg6IGZ1bmN0aW9uIHNlbmRNc2dDcmVhdGVDb3Ntb3NUb0V0aChfcmVmNjQsIF9yZWY2NSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzEoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgZmVlLCBtZW1vLCBtc2csIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMxJChfY29udGV4dDMxKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzEucHJldiA9IF9jb250ZXh0MzEubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjY0LnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmNjUudmFsdWUsIGZlZSA9IF9yZWY2NS5mZWUsIG1lbW8gPSBfcmVmNjUubWVtbzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzEucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDMxLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MzEubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzMS5zZW50Lm1zZ0NyZWF0ZUNvc21vc1RvRXRoKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQzMS5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQzMS5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MzEubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzEuc2VudC5zaWduQW5kQnJvYWRjYXN0KFttc2ddLCB7CiAgICAgICAgICAgICAgICAgIGZlZTogewogICAgICAgICAgICAgICAgICAgIGFtb3VudDogZmVlLAogICAgICAgICAgICAgICAgICAgIGdhczogIjIwMDAwMCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgbWVtbzogbWVtbwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDMxLnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzMS5hYnJ1cHQoInJldHVybiIsIHJlc3VsdCk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBfY29udGV4dDMxLnByZXYgPSAxNjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzEudDAgPSBfY29udGV4dDMxWyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0MzEudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzMS5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnQ3JlYXRlQ29zbW9zVG9FdGg6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDcmVhdGVDb3Ntb3NUb0V0aDpTZW5kJywgJ0NvdWxkIG5vdCBicm9hZGNhc3QgVHguJyk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMxLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzMSwgbnVsbCwgW1syLCAxNl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2VuZE1zZ1ZhbHNldFVwZGF0ZWRDbGFpbTogZnVuY3Rpb24gc2VuZE1zZ1ZhbHNldFVwZGF0ZWRDbGFpbShfcmVmNjYsIF9yZWY2NykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzIoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgZmVlLCBtZW1vLCBtc2csIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMyJChfY29udGV4dDMyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzIucHJldiA9IF9jb250ZXh0MzIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjY2LnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmNjcudmFsdWUsIGZlZSA9IF9yZWY2Ny5mZWUsIG1lbW8gPSBfcmVmNjcubWVtbzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzIucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDMyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MzIubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzMi5zZW50Lm1zZ1ZhbHNldFVwZGF0ZWRDbGFpbSh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0MzIuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzIubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDMyLm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMyLnNlbnQuc2lnbkFuZEJyb2FkY2FzdChbbXNnXSwgewogICAgICAgICAgICAgICAgICBmZWU6IHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZlZSwKICAgICAgICAgICAgICAgICAgICBnYXM6ICIyMDAwMDAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG1lbW86IG1lbW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQzMi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzIuYWJydXB0KCJyZXR1cm4iLCByZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQzMi5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBfY29udGV4dDMyLnQwID0gX2NvbnRleHQzMlsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDMyLnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzIubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1ZhbHNldFVwZGF0ZWRDbGFpbTpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1ZhbHNldFVwZGF0ZWRDbGFpbTpTZW5kJywgJ0NvdWxkIG5vdCBicm9hZGNhc3QgVHguJyk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzMiwgbnVsbCwgW1syLCAxNl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2VuZE1zZ0RlbGV0ZUNvc21vc1RvRXRoOiBmdW5jdGlvbiBzZW5kTXNnRGVsZXRlQ29zbW9zVG9FdGgoX3JlZjY4LCBfcmVmNjkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMzKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzMyQoX2NvbnRleHQzMykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMzLnByZXYgPSBfY29udGV4dDMzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY2OC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjY5LnZhbHVlLCBmZWUgPSBfcmVmNjkuZmVlLCBtZW1vID0gX3JlZjY5Lm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDMzLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQzMy5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDMzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzMuc2VudC5tc2dEZWxldGVDb3Ntb3NUb0V0aCh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0MzMuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzMubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDMzLm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMzLnNlbnQuc2lnbkFuZEJyb2FkY2FzdChbbXNnXSwgewogICAgICAgICAgICAgICAgICBmZWU6IHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZlZSwKICAgICAgICAgICAgICAgICAgICBnYXM6ICIyMDAwMDAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG1lbW86IG1lbW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQzMy5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzMuYWJydXB0KCJyZXR1cm4iLCByZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQzMy5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBfY29udGV4dDMzLnQwID0gX2NvbnRleHQzM1siY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDMzLnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzMubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0RlbGV0ZUNvc21vc1RvRXRoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnRGVsZXRlQ29zbW9zVG9FdGg6U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzMy5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMzMsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dTZXRPcmNoZXN0cmF0b3JBZGRyZXNzOiBmdW5jdGlvbiBzZW5kTXNnU2V0T3JjaGVzdHJhdG9yQWRkcmVzcyhfcmVmNzAsIF9yZWY3MSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzQoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgZmVlLCBtZW1vLCBtc2csIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTM0JChfY29udGV4dDM0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzQucHJldiA9IF9jb250ZXh0MzQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjcwLnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmNzEudmFsdWUsIGZlZSA9IF9yZWY3MS5mZWUsIG1lbW8gPSBfcmVmNzEubWVtbzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzQucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDM0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MzQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNC5zZW50Lm1zZ1NldE9yY2hlc3RyYXRvckFkZHJlc3ModmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDM0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDM0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzNC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNC5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0MzQuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM0LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MzQucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQzNC50MCA9IF9jb250ZXh0MzRbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQzNC50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDM0Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dTZXRPcmNoZXN0cmF0b3JBZGRyZXNzOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnU2V0T3JjaGVzdHJhdG9yQWRkcmVzczpTZW5kJywgJ0NvdWxkIG5vdCBicm9hZGNhc3QgVHguJyk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzNCwgbnVsbCwgW1syLCAxNl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2VuZE1zZ0NvbmZpcm1CYXRjaDogZnVuY3Rpb24gc2VuZE1zZ0NvbmZpcm1CYXRjaChfcmVmNzIsIF9yZWY3MykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzUoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgZmVlLCBtZW1vLCBtc2csIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTM1JChfY29udGV4dDM1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzUucHJldiA9IF9jb250ZXh0MzUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjcyLnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmNzMudmFsdWUsIGZlZSA9IF9yZWY3My5mZWUsIG1lbW8gPSBfcmVmNzMubWVtbzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzUucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDM1Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MzUubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNS5zZW50Lm1zZ0NvbmZpcm1CYXRjaCh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0MzUuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzUubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDM1Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM1LnNlbnQuc2lnbkFuZEJyb2FkY2FzdChbbXNnXSwgewogICAgICAgICAgICAgICAgICBmZWU6IHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZlZSwKICAgICAgICAgICAgICAgICAgICBnYXM6ICIyMDAwMDAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG1lbW86IG1lbW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQzNS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzUuYWJydXB0KCJyZXR1cm4iLCByZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQzNS5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBfY29udGV4dDM1LnQwID0gX2NvbnRleHQzNVsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDM1LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzUubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0NvbmZpcm1CYXRjaDpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0NvbmZpcm1CYXRjaDpTZW5kJywgJ0NvdWxkIG5vdCBicm9hZGNhc3QgVHguJyk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzNSwgbnVsbCwgW1syLCAxNl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2VuZE1zZ1VwZGF0ZUNvc21vc1RvRXRoOiBmdW5jdGlvbiBzZW5kTXNnVXBkYXRlQ29zbW9zVG9FdGgoX3JlZjc0LCBfcmVmNzUpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTM2KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzNiQoX2NvbnRleHQzNikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDM2LnByZXYgPSBfY29udGV4dDM2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY3NC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjc1LnZhbHVlLCBmZWUgPSBfcmVmNzUuZmVlLCBtZW1vID0gX3JlZjc1Lm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDM2LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQzNi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDM2Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzYuc2VudC5tc2dVcGRhdGVDb3Ntb3NUb0V0aCh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0MzYuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzYubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDM2Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM2LnNlbnQuc2lnbkFuZEJyb2FkY2FzdChbbXNnXSwgewogICAgICAgICAgICAgICAgICBmZWU6IHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZlZSwKICAgICAgICAgICAgICAgICAgICBnYXM6ICIyMDAwMDAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG1lbW86IG1lbW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQzNi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzYuYWJydXB0KCJyZXR1cm4iLCByZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQzNi5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBfY29udGV4dDM2LnQwID0gX2NvbnRleHQzNlsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDM2LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzYubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1VwZGF0ZUNvc21vc1RvRXRoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVXBkYXRlQ29zbW9zVG9FdGg6U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMzYsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dVcGRhdGVPcmNoZXN0cmF0b3JBZGRyZXNzOiBmdW5jdGlvbiBzZW5kTXNnVXBkYXRlT3JjaGVzdHJhdG9yQWRkcmVzcyhfcmVmNzYsIF9yZWY3NykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMzcoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgZmVlLCBtZW1vLCBtc2csIHJlc3VsdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTM3JChfY29udGV4dDM3KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MzcucHJldiA9IF9jb250ZXh0MzcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjc2LnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmNzcudmFsdWUsIGZlZSA9IF9yZWY3Ny5mZWUsIG1lbW8gPSBfcmVmNzcubWVtbzsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzcucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDM3Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0MzcubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNy5zZW50Lm1zZ1VwZGF0ZU9yY2hlc3RyYXRvckFkZHJlc3ModmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDM3LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDM3Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzNy5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzNy5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0Mzcuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM3LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0MzcucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQzNy50MCA9IF9jb250ZXh0MzdbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQzNy50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDM3Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dVcGRhdGVPcmNoZXN0cmF0b3JBZGRyZXNzOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMjoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVXBkYXRlT3JjaGVzdHJhdG9yQWRkcmVzczpTZW5kJywgJ0NvdWxkIG5vdCBicm9hZGNhc3QgVHguJyk7CgogICAgICAgICAgICAgIGNhc2UgMjM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzNywgbnVsbCwgW1syLCAxNl1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgc2VuZE1zZ0xvZ2ljQ2FsbEV4ZWN1dGVkQ2xhaW06IGZ1bmN0aW9uIHNlbmRNc2dMb2dpY0NhbGxFeGVjdXRlZENsYWltKF9yZWY3OCwgX3JlZjc5KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzOCgpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBmZWUsIG1lbW8sIG1zZywgcmVzdWx0OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMzgkKF9jb250ZXh0MzgpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzOC5wcmV2ID0gX2NvbnRleHQzOC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmNzgucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWY3OS52YWx1ZSwgZmVlID0gX3JlZjc5LmZlZSwgbWVtbyA9IF9yZWY3OS5tZW1vOwogICAgICAgICAgICAgICAgX2NvbnRleHQzOC5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzgubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQzOC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM4LnNlbnQubXNnTG9naWNDYWxsRXhlY3V0ZWRDbGFpbSh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0Mzguc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzgubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICBfY29udGV4dDM4Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDM4LnNlbnQuc2lnbkFuZEJyb2FkY2FzdChbbXNnXSwgewogICAgICAgICAgICAgICAgICBmZWU6IHsKICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZlZSwKICAgICAgICAgICAgICAgICAgICBnYXM6ICIyMDAwMDAiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIG1lbW86IG1lbW8KICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgICAgcmVzdWx0ID0gX2NvbnRleHQzOC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MzguYWJydXB0KCJyZXR1cm4iLCByZXN1bHQpOwoKICAgICAgICAgICAgICBjYXNlIDE2OgogICAgICAgICAgICAgICAgX2NvbnRleHQzOC5wcmV2ID0gMTY7CiAgICAgICAgICAgICAgICBfY29udGV4dDM4LnQwID0gX2NvbnRleHQzOFsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDM4LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0MzgubmV4dCA9IDIyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0xvZ2ljQ2FsbEV4ZWN1dGVkQ2xhaW06SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dMb2dpY0NhbGxFeGVjdXRlZENsYWltOlNlbmQnLCAnQ291bGQgbm90IGJyb2FkY2FzdCBUeC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mzguc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTM4LCBudWxsLCBbWzIsIDE2XV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzZW5kTXNnRGVsZXRlT3JjaGVzdHJhdG9yQWRkcmVzczogZnVuY3Rpb24gc2VuZE1zZ0RlbGV0ZU9yY2hlc3RyYXRvckFkZHJlc3MoX3JlZjgwLCBfcmVmODEpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTM5KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzOSQoX2NvbnRleHQzOSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDM5LnByZXYgPSBfY29udGV4dDM5Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY4MC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjgxLnZhbHVlLCBmZWUgPSBfcmVmODEuZmVlLCBtZW1vID0gX3JlZjgxLm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDM5LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQzOS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDM5Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mzkuc2VudC5tc2dEZWxldGVPcmNoZXN0cmF0b3JBZGRyZXNzKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQzOS5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQzOS5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0MzkubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mzkuc2VudC5zaWduQW5kQnJvYWRjYXN0KFttc2ddLCB7CiAgICAgICAgICAgICAgICAgIGZlZTogewogICAgICAgICAgICAgICAgICAgIGFtb3VudDogZmVlLAogICAgICAgICAgICAgICAgICAgIGdhczogIjIwMDAwMCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgbWVtbzogbWVtbwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dDM5LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzOS5hYnJ1cHQoInJldHVybiIsIHJlc3VsdCk7CgogICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBfY29udGV4dDM5LnByZXYgPSAxNjsKICAgICAgICAgICAgICAgIF9jb250ZXh0MzkudDAgPSBfY29udGV4dDM5WyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0MzkudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQzOS5uZXh0ID0gMjI7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnRGVsZXRlT3JjaGVzdHJhdG9yQWRkcmVzczpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMjI6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0RlbGV0ZU9yY2hlc3RyYXRvckFkZHJlc3M6U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzOS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMzksIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dTZW5kVG9FdGg6IGZ1bmN0aW9uIHNlbmRNc2dTZW5kVG9FdGgoX3JlZjgyLCBfcmVmODMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQwKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0MCQoX2NvbnRleHQ0MCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQwLnByZXYgPSBfY29udGV4dDQwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY4Mi5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjgzLnZhbHVlLCBmZWUgPSBfcmVmODMuZmVlLCBtZW1vID0gX3JlZjgzLm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDQwLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0MC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQwLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDAuc2VudC5tc2dTZW5kVG9FdGgodmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDQwLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDQwLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0MC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0MC5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0NDAuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQwLmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0NDAucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0MC50MCA9IF9jb250ZXh0NDBbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ0MC50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQwLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dTZW5kVG9FdGg6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dTZW5kVG9FdGg6U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0MC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNDAsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dFcmMyMERlcGxveWVkQ2xhaW06IGZ1bmN0aW9uIHNlbmRNc2dFcmMyMERlcGxveWVkQ2xhaW0oX3JlZjg0LCBfcmVmODUpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQxKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0MSQoX2NvbnRleHQ0MSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQxLnByZXYgPSBfY29udGV4dDQxLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY4NC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjg1LnZhbHVlLCBmZWUgPSBfcmVmODUuZmVlLCBtZW1vID0gX3JlZjg1Lm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDQxLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0MS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQxLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDEuc2VudC5tc2dFcmMyMERlcGxveWVkQ2xhaW0odmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDQxLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDQxLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0MS5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0MS5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0NDEuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQxLmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0NDEucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0MS50MCA9IF9jb250ZXh0NDFbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ0MS50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQxLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dFcmMyMERlcGxveWVkQ2xhaW06SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dFcmMyMERlcGxveWVkQ2xhaW06U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0MS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNDEsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dDYW5jZWxTZW5kVG9FdGg6IGZ1bmN0aW9uIHNlbmRNc2dDYW5jZWxTZW5kVG9FdGgoX3JlZjg2LCBfcmVmODcpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQyKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0MiQoX2NvbnRleHQ0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQyLnByZXYgPSBfY29udGV4dDQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY4Ni5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjg3LnZhbHVlLCBmZWUgPSBfcmVmODcuZmVlLCBtZW1vID0gX3JlZjg3Lm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDQyLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQyLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDIuc2VudC5tc2dDYW5jZWxTZW5kVG9FdGgodmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDQyLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Mi5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0Mi5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0NDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQyLmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0NDIucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Mi50MCA9IF9jb250ZXh0NDJbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ0Mi50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQyLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDYW5jZWxTZW5kVG9FdGg6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDYW5jZWxTZW5kVG9FdGg6U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNDIsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dSZXF1ZXN0QmF0Y2g6IGZ1bmN0aW9uIHNlbmRNc2dSZXF1ZXN0QmF0Y2goX3JlZjg4LCBfcmVmODkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQzKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0MyQoX2NvbnRleHQ0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQzLnByZXYgPSBfY29udGV4dDQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY4OC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjg5LnZhbHVlLCBmZWUgPSBfcmVmODkuZmVlLCBtZW1vID0gX3JlZjg5Lm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDQzLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDMuc2VudC5tc2dSZXF1ZXN0QmF0Y2godmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDQzLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDQzLm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0My5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0My5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0NDMuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQzLmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0NDMucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0My50MCA9IF9jb250ZXh0NDNbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ0My50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQzLm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dSZXF1ZXN0QmF0Y2g6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dSZXF1ZXN0QmF0Y2g6U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0My5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNDMsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIHNlbmRNc2dEZXBvc2l0Q2xhaW06IGZ1bmN0aW9uIHNlbmRNc2dEZXBvc2l0Q2xhaW0oX3JlZjkwLCBfcmVmOTEpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQ0KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIGZlZSwgbWVtbywgbXNnLCByZXN1bHQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0NCQoX2NvbnRleHQ0NCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQ0LnByZXYgPSBfY29udGV4dDQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY5MC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjkxLnZhbHVlLCBmZWUgPSBfcmVmOTEuZmVlLCBtZW1vID0gX3JlZjkxLm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDQ0LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0NC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQ0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDQuc2VudC5tc2dEZXBvc2l0Q2xhaW0odmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDQ0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0NC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0NC5zZW50LnNpZ25BbmRCcm9hZGNhc3QoW21zZ10sIHsKICAgICAgICAgICAgICAgICAgZmVlOiB7CiAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmZWUsCiAgICAgICAgICAgICAgICAgICAgZ2FzOiAiMjAwMDAwIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBtZW1vOiBtZW1vCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0NDQuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQ0LmFicnVwdCgicmV0dXJuIiwgcmVzdWx0KTsKCiAgICAgICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0NDQucHJldiA9IDE2OwogICAgICAgICAgICAgICAgX2NvbnRleHQ0NC50MCA9IF9jb250ZXh0NDRbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ0NC50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQ0Lm5leHQgPSAyMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dEZXBvc2l0Q2xhaW06SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDIyOgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dEZXBvc2l0Q2xhaW06U2VuZCcsICdDb3VsZCBub3QgYnJvYWRjYXN0IFR4LicpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNDQsIG51bGwsIFtbMiwgMTZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIE1zZ0NyZWF0ZU9yY2hlc3RyYXRvckFkZHJlc3M6IGZ1bmN0aW9uIE1zZ0NyZWF0ZU9yY2hlc3RyYXRvckFkZHJlc3MoX3JlZjkyLCBfcmVmOTMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQ1KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQ1JChfY29udGV4dDQ1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NDUucHJldiA9IF9jb250ZXh0NDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjkyLnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmOTMudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ1LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0NS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQ1Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDUuc2VudC5tc2dDcmVhdGVPcmNoZXN0cmF0b3JBZGRyZXNzKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQ0NS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDUuYWJydXB0KCJyZXR1cm4iLCBtc2cpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0NS5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ1LnQwID0gX2NvbnRleHQ0NVsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDQ1LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NDUubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0NyZWF0ZU9yY2hlc3RyYXRvckFkZHJlc3M6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDcmVhdGVPcmNoZXN0cmF0b3JBZGRyZXNzOkNyZWF0ZScsICdDb3VsZCBub3QgY3JlYXRlIG1lc3NhZ2UuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQ1LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0NSwgbnVsbCwgW1syLCAxMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgTXNnV2l0aGRyYXdDbGFpbTogZnVuY3Rpb24gTXNnV2l0aGRyYXdDbGFpbShfcmVmOTQsIF9yZWY5NSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNDYoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgbXNnOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNDYkKF9jb250ZXh0NDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0Ni5wcmV2ID0gX2NvbnRleHQ0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmOTQucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWY5NS52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NDYucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ2Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NDYubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0Ni5zZW50Lm1zZ1dpdGhkcmF3Q2xhaW0odmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDQ2LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0Ni5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDQ2LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NDYudDAgPSBfY29udGV4dDQ2WyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NDYudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ0Ni5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnV2l0aGRyYXdDbGFpbTpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1dpdGhkcmF3Q2xhaW06Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQ2LCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dWYWxzZXRDb25maXJtOiBmdW5jdGlvbiBNc2dWYWxzZXRDb25maXJtKF9yZWY5NiwgX3JlZjk3KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0NygpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBtc2c7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0NyQoX2NvbnRleHQ0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDQ3LnByZXYgPSBfY29udGV4dDQ3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWY5Ni5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjk3LnZhbHVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Ny5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0NDcubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Ny5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQ3LnNlbnQubXNnVmFsc2V0Q29uZmlybSh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0NDcuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQ3LmFicnVwdCgicmV0dXJuIiwgbXNnKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0NDcucHJldiA9IDExOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0Ny50MCA9IF9jb250ZXh0NDdbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ0Ny50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQ3Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dWYWxzZXRDb25maXJtOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVmFsc2V0Q29uZmlybTpDcmVhdGUnLCAnQ291bGQgbm90IGNyZWF0ZSBtZXNzYWdlLicpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNDcsIG51bGwsIFtbMiwgMTFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIE1zZ0NvbmZpcm1Mb2dpY0NhbGw6IGZ1bmN0aW9uIE1zZ0NvbmZpcm1Mb2dpY0NhbGwoX3JlZjk4LCBfcmVmOTkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQ4KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQ4JChfY29udGV4dDQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NDgucHJldiA9IF9jb250ZXh0NDgubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjk4LnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmOTkudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ4LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ0OC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQ4Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDguc2VudC5tc2dDb25maXJtTG9naWNDYWxsKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQ0OC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDguYWJydXB0KCJyZXR1cm4iLCBtc2cpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0OC5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ4LnQwID0gX2NvbnRleHQ0OFsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDQ4LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NDgubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0NvbmZpcm1Mb2dpY0NhbGw6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDb25maXJtTG9naWNDYWxsOkNyZWF0ZScsICdDb3VsZCBub3QgY3JlYXRlIG1lc3NhZ2UuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0OCwgbnVsbCwgW1syLCAxMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgTXNnQ3JlYXRlQ29zbW9zVG9FdGg6IGZ1bmN0aW9uIE1zZ0NyZWF0ZUNvc21vc1RvRXRoKF9yZWYxMDAsIF9yZWYxMDEpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQ5KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQ5JChfY29udGV4dDQ5KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NDkucHJldiA9IF9jb250ZXh0NDkubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjEwMC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjEwMS52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NDkucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ5Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NDkubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0OS5zZW50Lm1zZ0NyZWF0ZUNvc21vc1RvRXRoKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQ0OS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDkuYWJydXB0KCJyZXR1cm4iLCBtc2cpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0OS5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDQ5LnQwID0gX2NvbnRleHQ0OVsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDQ5LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NDkubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0NyZWF0ZUNvc21vc1RvRXRoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnQ3JlYXRlQ29zbW9zVG9FdGg6Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQ5LCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dWYWxzZXRVcGRhdGVkQ2xhaW06IGZ1bmN0aW9uIE1zZ1ZhbHNldFVwZGF0ZWRDbGFpbShfcmVmMTAyLCBfcmVmMTAzKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1MCgpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBtc2c7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1MCQoX2NvbnRleHQ1MCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUwLnByZXYgPSBfY29udGV4dDUwLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYxMDIucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWYxMDMudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDUwLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1MC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDUwLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTAuc2VudC5tc2dWYWxzZXRVcGRhdGVkQ2xhaW0odmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDUwLnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1MC5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDUwLnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTAudDAgPSBfY29udGV4dDUwWyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NTAudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1MC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVmFsc2V0VXBkYXRlZENsYWltOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVmFsc2V0VXBkYXRlZENsYWltOkNyZWF0ZScsICdDb3VsZCBub3QgY3JlYXRlIG1lc3NhZ2UuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUwLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1MCwgbnVsbCwgW1syLCAxMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgTXNnRGVsZXRlQ29zbW9zVG9FdGg6IGZ1bmN0aW9uIE1zZ0RlbGV0ZUNvc21vc1RvRXRoKF9yZWYxMDQsIF9yZWYxMDUpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUxKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUxJChfY29udGV4dDUxKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NTEucHJldiA9IF9jb250ZXh0NTEubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjEwNC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjEwNS52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTEucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDUxLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NTEubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1MS5zZW50Lm1zZ0RlbGV0ZUNvc21vc1RvRXRoKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQ1MS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTEuYWJydXB0KCJyZXR1cm4iLCBtc2cpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ1MS5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDUxLnQwID0gX2NvbnRleHQ1MVsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDUxLnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NTEubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0RlbGV0ZUNvc21vc1RvRXRoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnRGVsZXRlQ29zbW9zVG9FdGg6Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTEuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUxLCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dTZXRPcmNoZXN0cmF0b3JBZGRyZXNzOiBmdW5jdGlvbiBNc2dTZXRPcmNoZXN0cmF0b3JBZGRyZXNzKF9yZWYxMDYsIF9yZWYxMDcpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUyKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUyJChfY29udGV4dDUyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NTIucHJldiA9IF9jb250ZXh0NTIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjEwNi5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjEwNy52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTIucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDUyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NTIubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1Mi5zZW50Lm1zZ1NldE9yY2hlc3RyYXRvckFkZHJlc3ModmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDUyLnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1Mi5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDUyLnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTIudDAgPSBfY29udGV4dDUyWyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NTIudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Mi5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnU2V0T3JjaGVzdHJhdG9yQWRkcmVzczpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1NldE9yY2hlc3RyYXRvckFkZHJlc3M6Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUyLCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dDb25maXJtQmF0Y2g6IGZ1bmN0aW9uIE1zZ0NvbmZpcm1CYXRjaChfcmVmMTA4LCBfcmVmMTA5KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1MygpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBtc2c7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1MyQoX2NvbnRleHQ1MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUzLnByZXYgPSBfY29udGV4dDUzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYxMDgucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWYxMDkudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDUzLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDUzLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTMuc2VudC5tc2dDb25maXJtQmF0Y2godmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDUzLnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1My5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDUzLnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTMudDAgPSBfY29udGV4dDUzWyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NTMudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1My5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnQ29uZmlybUJhdGNoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnQ29uZmlybUJhdGNoOkNyZWF0ZScsICdDb3VsZCBub3QgY3JlYXRlIG1lc3NhZ2UuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1MywgbnVsbCwgW1syLCAxMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgTXNnVXBkYXRlQ29zbW9zVG9FdGg6IGZ1bmN0aW9uIE1zZ1VwZGF0ZUNvc21vc1RvRXRoKF9yZWYxMTAsIF9yZWYxMTEpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTU0KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTU0JChfY29udGV4dDU0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NTQucHJldiA9IF9jb250ZXh0NTQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjExMC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjExMS52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTQucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDU0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NTQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1NC5zZW50Lm1zZ1VwZGF0ZUNvc21vc1RvRXRoKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQ1NC5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTQuYWJydXB0KCJyZXR1cm4iLCBtc2cpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ1NC5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDU0LnQwID0gX2NvbnRleHQ1NFsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDU0LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NTQubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1VwZGF0ZUNvc21vc1RvRXRoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVXBkYXRlQ29zbW9zVG9FdGg6Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTU0LCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dVcGRhdGVPcmNoZXN0cmF0b3JBZGRyZXNzOiBmdW5jdGlvbiBNc2dVcGRhdGVPcmNoZXN0cmF0b3JBZGRyZXNzKF9yZWYxMTIsIF9yZWYxMTMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTU1KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTU1JChfY29udGV4dDU1KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NTUucHJldiA9IF9jb250ZXh0NTUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjExMi5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjExMy52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTUucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDU1Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NTUubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1NS5zZW50Lm1zZ1VwZGF0ZU9yY2hlc3RyYXRvckFkZHJlc3ModmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDU1LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1NS5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDU1LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTUudDAgPSBfY29udGV4dDU1WyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NTUudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1NS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnVXBkYXRlT3JjaGVzdHJhdG9yQWRkcmVzczpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ1VwZGF0ZU9yY2hlc3RyYXRvckFkZHJlc3M6Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTU1LCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dMb2dpY0NhbGxFeGVjdXRlZENsYWltOiBmdW5jdGlvbiBNc2dMb2dpY0NhbGxFeGVjdXRlZENsYWltKF9yZWYxMTQsIF9yZWYxMTUpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTU2KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTU2JChfY29udGV4dDU2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NTYucHJldiA9IF9jb250ZXh0NTYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjExNC5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjExNS52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTYucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDU2Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NTYubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1Ni5zZW50Lm1zZ0xvZ2ljQ2FsbEV4ZWN1dGVkQ2xhaW0odmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDU2LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1Ni5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDU2LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTYudDAgPSBfY29udGV4dDU2WyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NTYudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Ni5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnTG9naWNDYWxsRXhlY3V0ZWRDbGFpbTpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0xvZ2ljQ2FsbEV4ZWN1dGVkQ2xhaW06Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTU2LCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dEZWxldGVPcmNoZXN0cmF0b3JBZGRyZXNzOiBmdW5jdGlvbiBNc2dEZWxldGVPcmNoZXN0cmF0b3JBZGRyZXNzKF9yZWYxMTYsIF9yZWYxMTcpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTU3KCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTU3JChfY29udGV4dDU3KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NTcucHJldiA9IF9jb250ZXh0NTcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjExNi5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjExNy52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTcucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDU3Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NTcubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1Ny5zZW50Lm1zZ0RlbGV0ZU9yY2hlc3RyYXRvckFkZHJlc3ModmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDU3LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1Ny5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDU3LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTcudDAgPSBfY29udGV4dDU3WyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NTcudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1Ny5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnRGVsZXRlT3JjaGVzdHJhdG9yQWRkcmVzczpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0RlbGV0ZU9yY2hlc3RyYXRvckFkZHJlc3M6Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTU3LCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dTZW5kVG9FdGg6IGZ1bmN0aW9uIE1zZ1NlbmRUb0V0aChfcmVmMTE4LCBfcmVmMTE5KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1OCgpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBtc2c7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1OCQoX2NvbnRleHQ1OCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDU4LnByZXYgPSBfY29udGV4dDU4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYxMTgucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWYxMTkudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDU4LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1OC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDU4Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTguc2VudC5tc2dTZW5kVG9FdGgodmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDU4LnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1OC5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDU4LnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTgudDAgPSBfY29udGV4dDU4WyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NTgudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ1OC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnU2VuZFRvRXRoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnU2VuZFRvRXRoOkNyZWF0ZScsICdDb3VsZCBub3QgY3JlYXRlIG1lc3NhZ2UuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDU4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU1OCwgbnVsbCwgW1syLCAxMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgTXNnRXJjMjBEZXBsb3llZENsYWltOiBmdW5jdGlvbiBNc2dFcmMyMERlcGxveWVkQ2xhaW0oX3JlZjEyMCwgX3JlZjEyMSkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNTkoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgbXNnOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNTkkKF9jb250ZXh0NTkpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1OS5wcmV2ID0gX2NvbnRleHQ1OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmMTIwLnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmMTIxLnZhbHVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ1OS5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0NTkubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ1OS5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDU5LnNlbnQubXNnRXJjMjBEZXBsb3llZENsYWltKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQ1OS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NTkuYWJydXB0KCJyZXR1cm4iLCBtc2cpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ1OS5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDU5LnQwID0gX2NvbnRleHQ1OVsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDU5LnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NTkubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0VyYzIwRGVwbG95ZWRDbGFpbTpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0VyYzIwRGVwbG95ZWRDbGFpbTpDcmVhdGUnLCAnQ291bGQgbm90IGNyZWF0ZSBtZXNzYWdlLicpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1OS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNTksIG51bGwsIFtbMiwgMTFdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIE1zZ0NhbmNlbFNlbmRUb0V0aDogZnVuY3Rpb24gTXNnQ2FuY2VsU2VuZFRvRXRoKF9yZWYxMjIsIF9yZWYxMjMpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYwKCkgewogICAgICAgIHZhciByb290R2V0dGVycywgdmFsdWUsIG1zZzsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYwJChfY29udGV4dDYwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NjAucHJldiA9IF9jb250ZXh0NjAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjEyMi5yb290R2V0dGVyczsKICAgICAgICAgICAgICAgIHZhbHVlID0gX3JlZjEyMy52YWx1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NjAucHJldiA9IDI7CiAgICAgICAgICAgICAgICBfY29udGV4dDYwLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGluaXRUeENsaWVudChyb290R2V0dGVycyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0NjAubmV4dCA9IDc7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2MC5zZW50Lm1zZ0NhbmNlbFNlbmRUb0V0aCh2YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIG1zZyA9IF9jb250ZXh0NjAuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYwLmFicnVwdCgicmV0dXJuIiwgbXNnKTsKCiAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgIF9jb250ZXh0NjAucHJldiA9IDExOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2MC50MCA9IF9jb250ZXh0NjBbImNhdGNoIl0oMik7CgogICAgICAgICAgICAgICAgaWYgKCEoX2NvbnRleHQ2MC50MC50b1N0cmluZygpID09ICd3YWxsZXQgaXMgcmVxdWlyZWQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDYwLm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDYW5jZWxTZW5kVG9FdGg6SW5pdCcsICdDb3VsZCBub3QgaW5pdGlhbGl6ZSBzaWduaW5nIGNsaWVudC4gV2FsbGV0IGlzIHJlcXVpcmVkLicpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IFNwVnVleEVycm9yKCdUeENsaWVudDpNc2dDYW5jZWxTZW5kVG9FdGg6Q3JlYXRlJywgJ0NvdWxkIG5vdCBjcmVhdGUgbWVzc2FnZS4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NjAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYwLCBudWxsLCBbWzIsIDExXV0pOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBNc2dSZXF1ZXN0QmF0Y2g6IGZ1bmN0aW9uIE1zZ1JlcXVlc3RCYXRjaChfcmVmMTI0LCBfcmVmMTI1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2MSgpIHsKICAgICAgICB2YXIgcm9vdEdldHRlcnMsIHZhbHVlLCBtc2c7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2MSQoX2NvbnRleHQ2MSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYxLnByZXYgPSBfY29udGV4dDYxLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByb290R2V0dGVycyA9IF9yZWYxMjQucm9vdEdldHRlcnM7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9yZWYxMjUudmFsdWU7CiAgICAgICAgICAgICAgICBfY29udGV4dDYxLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2MS5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBpbml0VHhDbGllbnQocm9vdEdldHRlcnMpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDYxLm5leHQgPSA3OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NjEuc2VudC5tc2dSZXF1ZXN0QmF0Y2godmFsdWUpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICBtc2cgPSBfY29udGV4dDYxLnNlbnQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2MS5hYnJ1cHQoInJldHVybiIsIG1zZyk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgICBfY29udGV4dDYxLnByZXYgPSAxMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NjEudDAgPSBfY29udGV4dDYxWyJjYXRjaCJdKDIpOwoKICAgICAgICAgICAgICAgIGlmICghKF9jb250ZXh0NjEudDAudG9TdHJpbmcoKSA9PSAnd2FsbGV0IGlzIHJlcXVpcmVkJykpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ2MS5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnUmVxdWVzdEJhdGNoOkluaXQnLCAnQ291bGQgbm90IGluaXRpYWxpemUgc2lnbmluZyBjbGllbnQuIFdhbGxldCBpcyByZXF1aXJlZC4nKTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICAgIHRocm93IG5ldyBTcFZ1ZXhFcnJvcignVHhDbGllbnQ6TXNnUmVxdWVzdEJhdGNoOkNyZWF0ZScsICdDb3VsZCBub3QgY3JlYXRlIG1lc3NhZ2UuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYxLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU2MSwgbnVsbCwgW1syLCAxMV1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgTXNnRGVwb3NpdENsYWltOiBmdW5jdGlvbiBNc2dEZXBvc2l0Q2xhaW0oX3JlZjEyNiwgX3JlZjEyNykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNjIoKSB7CiAgICAgICAgdmFyIHJvb3RHZXR0ZXJzLCB2YWx1ZSwgbXNnOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNjIkKF9jb250ZXh0NjIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2Mi5wcmV2ID0gX2NvbnRleHQ2Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcm9vdEdldHRlcnMgPSBfcmVmMTI2LnJvb3RHZXR0ZXJzOwogICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmMTI3LnZhbHVlOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Mi5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0NjIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFR4Q2xpZW50KHJvb3RHZXR0ZXJzKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Mi5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYyLnNlbnQubXNnRGVwb3NpdENsYWltKHZhbHVlKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgbXNnID0gX2NvbnRleHQ2Mi5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NjIuYWJydXB0KCJyZXR1cm4iLCBtc2cpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ2Mi5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgICBfY29udGV4dDYyLnQwID0gX2NvbnRleHQ2MlsiY2F0Y2giXSgyKTsKCiAgICAgICAgICAgICAgICBpZiAoIShfY29udGV4dDYyLnQwLnRvU3RyaW5nKCkgPT0gJ3dhbGxldCBpcyByZXF1aXJlZCcpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0NjIubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0RlcG9zaXRDbGFpbTpJbml0JywgJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNpZ25pbmcgY2xpZW50LiBXYWxsZXQgaXMgcmVxdWlyZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMTc6CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3BWdWV4RXJyb3IoJ1R4Q2xpZW50Ok1zZ0RlcG9zaXRDbGFpbTpDcmVhdGUnLCAnQ291bGQgbm90IGNyZWF0ZSBtZXNzYWdlLicpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNjIsIG51bGwsIFtbMiwgMTFdXSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/index.js"],"names":["txClient","queryClient","SpVuexError","BridgeValidator","Valset","LastObservedEthereumBlockHeight","Erc20ToDenom","OutgoingTxBatch","OutgoingTransferTx","OutgoingLogicCall","OrchestratorAddress","Attestation","Erc20Token","IDSet","BatchFees","CosmosToEth","Params","initTxClient","vuexGetters","addr","initQueryClient","getStructure","template","structure","fields","Object","entries","key","value","field","name","type","push","getDefaultState","CurrentValset","ValsetRequest","ValsetConfirm","ValsetConfirmsByNonce","LastValsetRequests","LastPendingValsetRequestByAddr","LastPendingBatchRequestByAddr","LastPendingLogicCallByAddr","LastEventNonceByAddr","OutgoingTxBatches","OutgoingLogicCalls","BatchRequestByNonce","BatchConfirms","LogicConfirms","DenomToErc20","GetDelegateKeyByValidator","GetDelegateKeyByEth","GetDelegateKeyByOrchestrator","GetPendingSendToEth","OrchestratorAddressAll","CosmosToEthAll","ValsetUpdateClaim","_Structure","fromPartial","_Subscriptions","Set","state","namespaced","mutations","RESET_STATE","assign","QUERY","query","JSON","stringify","SUBSCRIBE","subscription","add","UNSUBSCRIBE","getters","getParams","params","getCurrentValset","getValsetRequest","getValsetConfirm","getValsetConfirmsByNonce","getLastValsetRequests","getLastPendingValsetRequestByAddr","getLastPendingBatchRequestByAddr","getLastPendingLogicCallByAddr","getLastEventNonceByAddr","getBatchFees","getOutgoingTxBatches","getOutgoingLogicCalls","getBatchRequestByNonce","getBatchConfirms","getLogicConfirms","getErc20ToDenom","getDenomToErc20","getGetDelegateKeyByValidator","getGetDelegateKeyByEth","getGetDelegateKeyByOrchestrator","getGetPendingSendToEth","getOrchestratorAddressAll","getCosmosToEthAll","getValsetUpdateClaim","getTypeStructure","actions","init","dispatch","rootGetters","console","log","on","resetState","commit","unsubscribe","StoreUpdate","forEach","action","payload","QueryParams","options","subscribe","all","queryParams","data","error","QueryCurrentValset","queryCurrentValset","QueryValsetRequest","queryValsetRequest","pagination","nextKey","next_values","keys","prop","Array","isArray","QueryValsetConfirm","queryValsetConfirm","QueryValsetConfirmsByNonce","queryValsetConfirmsByNonce","nonce","QueryLastValsetRequests","queryLastValsetRequests","QueryLastPendingValsetRequestByAddr","queryLastPendingValsetRequestByAddr","QueryLastPendingBatchRequestByAddr","queryLastPendingBatchRequestByAddr","address","QueryLastPendingLogicCallByAddr","queryLastPendingLogicCallByAddr","QueryLastEventNonceByAddr","queryLastEventNonceByAddr","QueryBatchFees","queryBatchFees","QueryOutgoingTxBatches","queryOutgoingTxBatches","QueryOutgoingLogicCalls","queryOutgoingLogicCalls","QueryBatchRequestByNonce","queryBatchRequestByNonce","QueryBatchConfirms","queryBatchConfirms","QueryLogicConfirms","queryLogicConfirms","QueryErc20ToDenom","queryErc20ToDenom","QueryDenomToErc20","queryDenomToErc20","QueryGetDelegateKeyByValidator","queryGetDelegateKeyByValidator","QueryGetDelegateKeyByEth","queryGetDelegateKeyByEth","QueryGetDelegateKeyByOrchestrator","queryGetDelegateKeyByOrchestrator","QueryGetPendingSendToEth","queryGetPendingSendToEth","QueryOrchestratorAddressAll","queryOrchestratorAddressAll","QueryCosmosToEthAll","queryCosmosToEthAll","MsgValsetUpdateClaim","msgValsetUpdateClaim","sendMsgCreateOrchestratorAddress","fee","memo","msgCreateOrchestratorAddress","msg","signAndBroadcast","amount","gas","result","toString","sendMsgWithdrawClaim","msgWithdrawClaim","sendMsgValsetConfirm","msgValsetConfirm","sendMsgConfirmLogicCall","msgConfirmLogicCall","sendMsgCreateCosmosToEth","msgCreateCosmosToEth","sendMsgValsetUpdatedClaim","msgValsetUpdatedClaim","sendMsgDeleteCosmosToEth","msgDeleteCosmosToEth","sendMsgSetOrchestratorAddress","msgSetOrchestratorAddress","sendMsgConfirmBatch","msgConfirmBatch","sendMsgUpdateCosmosToEth","msgUpdateCosmosToEth","sendMsgUpdateOrchestratorAddress","msgUpdateOrchestratorAddress","sendMsgLogicCallExecutedClaim","msgLogicCallExecutedClaim","sendMsgDeleteOrchestratorAddress","msgDeleteOrchestratorAddress","sendMsgSendToEth","msgSendToEth","sendMsgErc20DeployedClaim","msgErc20DeployedClaim","sendMsgCancelSendToEth","msgCancelSendToEth","sendMsgRequestBatch","msgRequestBatch","sendMsgDepositClaim","msgDepositClaim","MsgCreateOrchestratorAddress","MsgWithdrawClaim","MsgValsetConfirm","MsgConfirmLogicCall","MsgCreateCosmosToEth","MsgValsetUpdatedClaim","MsgDeleteCosmosToEth","MsgSetOrchestratorAddress","MsgConfirmBatch","MsgUpdateCosmosToEth","MsgUpdateOrchestratorAddress","MsgLogicCallExecutedClaim","MsgDeleteOrchestratorAddress","MsgSendToEth","MsgErc20DeployedClaim","MsgCancelSendToEth","MsgRequestBatch","MsgDepositClaim"],"mappings":"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","sourcesContent":["import { txClient, queryClient } from './module';\n// @ts-ignore\nimport { SpVuexError } from '@starport/vuex';\nimport { BridgeValidator } from \"./module/types/gravity/types\";\nimport { Valset } from \"./module/types/gravity/types\";\nimport { LastObservedEthereumBlockHeight } from \"./module/types/gravity/types\";\nimport { Erc20ToDenom } from \"./module/types/gravity/types\";\nimport { OutgoingTxBatch } from \"./module/types/gravity/batch\";\nimport { OutgoingTransferTx } from \"./module/types/gravity/batch\";\nimport { OutgoingLogicCall } from \"./module/types/gravity/batch\";\nimport { OrchestratorAddress } from \"./module/types/gravity/orchestratorAddress\";\nimport { Attestation } from \"./module/types/gravity/attestation\";\nimport { Erc20Token } from \"./module/types/gravity/attestation\";\nimport { IDSet } from \"./module/types/gravity/pool\";\nimport { BatchFees } from \"./module/types/gravity/pool\";\nimport { CosmosToEth } from \"./module/types/gravity/cosmosToEth\";\nimport { Params } from \"./module/types/gravity/genesis\";\nasync function initTxClient(vuexGetters) {\n    return await txClient(vuexGetters['common/wallet/signer'], {\n        addr: vuexGetters['common/env/apiTendermint']\n    });\n}\nasync function initQueryClient(vuexGetters) {\n    return await queryClient({\n        addr: vuexGetters['common/env/apiCosmos']\n    });\n}\nfunction getStructure(template) {\n    let structure = { fields: [] };\n    for (const [key, value] of Object.entries(template)) {\n        let field = {};\n        field.name = key;\n        field.type = typeof value;\n        structure.fields.push(field);\n    }\n    return structure;\n}\nconst getDefaultState = () => {\n    return {\n        Params: {},\n        CurrentValset: {},\n        ValsetRequest: {},\n        ValsetConfirm: {},\n        ValsetConfirmsByNonce: {},\n        LastValsetRequests: {},\n        LastPendingValsetRequestByAddr: {},\n        LastPendingBatchRequestByAddr: {},\n        LastPendingLogicCallByAddr: {},\n        LastEventNonceByAddr: {},\n        BatchFees: {},\n        OutgoingTxBatches: {},\n        OutgoingLogicCalls: {},\n        BatchRequestByNonce: {},\n        BatchConfirms: {},\n        LogicConfirms: {},\n        Erc20ToDenom: {},\n        DenomToErc20: {},\n        GetDelegateKeyByValidator: {},\n        GetDelegateKeyByEth: {},\n        GetDelegateKeyByOrchestrator: {},\n        GetPendingSendToEth: {},\n        OrchestratorAddressAll: {},\n        CosmosToEthAll: {},\n        ValsetUpdateClaim: {},\n        _Structure: {\n            BridgeValidator: getStructure(BridgeValidator.fromPartial({})),\n            Valset: getStructure(Valset.fromPartial({})),\n            LastObservedEthereumBlockHeight: getStructure(LastObservedEthereumBlockHeight.fromPartial({})),\n            Erc20ToDenom: getStructure(Erc20ToDenom.fromPartial({})),\n            OutgoingTxBatch: getStructure(OutgoingTxBatch.fromPartial({})),\n            OutgoingTransferTx: getStructure(OutgoingTransferTx.fromPartial({})),\n            OutgoingLogicCall: getStructure(OutgoingLogicCall.fromPartial({})),\n            OrchestratorAddress: getStructure(OrchestratorAddress.fromPartial({})),\n            Attestation: getStructure(Attestation.fromPartial({})),\n            Erc20Token: getStructure(Erc20Token.fromPartial({})),\n            IDSet: getStructure(IDSet.fromPartial({})),\n            BatchFees: getStructure(BatchFees.fromPartial({})),\n            CosmosToEth: getStructure(CosmosToEth.fromPartial({})),\n            Params: getStructure(Params.fromPartial({})),\n        },\n        _Subscriptions: new Set(),\n    };\n};\n// initial state\nconst state = getDefaultState();\nexport default {\n    namespaced: true,\n    state,\n    mutations: {\n        RESET_STATE(state) {\n            Object.assign(state, getDefaultState());\n        },\n        QUERY(state, { query, key, value }) {\n            state[query][JSON.stringify(key)] = value;\n        },\n        SUBSCRIBE(state, subscription) {\n            state._Subscriptions.add(subscription);\n        },\n        UNSUBSCRIBE(state, subscription) {\n            state._Subscriptions.delete(subscription);\n        }\n    },\n    getters: {\n        getParams: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Params[JSON.stringify(params)] ?? {};\n        },\n        getCurrentValset: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.CurrentValset[JSON.stringify(params)] ?? {};\n        },\n        getValsetRequest: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValsetRequest[JSON.stringify(params)] ?? {};\n        },\n        getValsetConfirm: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValsetConfirm[JSON.stringify(params)] ?? {};\n        },\n        getValsetConfirmsByNonce: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValsetConfirmsByNonce[JSON.stringify(params)] ?? {};\n        },\n        getLastValsetRequests: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LastValsetRequests[JSON.stringify(params)] ?? {};\n        },\n        getLastPendingValsetRequestByAddr: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LastPendingValsetRequestByAddr[JSON.stringify(params)] ?? {};\n        },\n        getLastPendingBatchRequestByAddr: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LastPendingBatchRequestByAddr[JSON.stringify(params)] ?? {};\n        },\n        getLastPendingLogicCallByAddr: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LastPendingLogicCallByAddr[JSON.stringify(params)] ?? {};\n        },\n        getLastEventNonceByAddr: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LastEventNonceByAddr[JSON.stringify(params)] ?? {};\n        },\n        getBatchFees: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.BatchFees[JSON.stringify(params)] ?? {};\n        },\n        getOutgoingTxBatches: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.OutgoingTxBatches[JSON.stringify(params)] ?? {};\n        },\n        getOutgoingLogicCalls: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.OutgoingLogicCalls[JSON.stringify(params)] ?? {};\n        },\n        getBatchRequestByNonce: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.BatchRequestByNonce[JSON.stringify(params)] ?? {};\n        },\n        getBatchConfirms: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.BatchConfirms[JSON.stringify(params)] ?? {};\n        },\n        getLogicConfirms: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.LogicConfirms[JSON.stringify(params)] ?? {};\n        },\n        getErc20ToDenom: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.Erc20ToDenom[JSON.stringify(params)] ?? {};\n        },\n        getDenomToErc20: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.DenomToErc20[JSON.stringify(params)] ?? {};\n        },\n        getGetDelegateKeyByValidator: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.GetDelegateKeyByValidator[JSON.stringify(params)] ?? {};\n        },\n        getGetDelegateKeyByEth: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.GetDelegateKeyByEth[JSON.stringify(params)] ?? {};\n        },\n        getGetDelegateKeyByOrchestrator: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.GetDelegateKeyByOrchestrator[JSON.stringify(params)] ?? {};\n        },\n        getGetPendingSendToEth: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.GetPendingSendToEth[JSON.stringify(params)] ?? {};\n        },\n        getOrchestratorAddressAll: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.OrchestratorAddressAll[JSON.stringify(params)] ?? {};\n        },\n        getCosmosToEthAll: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.CosmosToEthAll[JSON.stringify(params)] ?? {};\n        },\n        getValsetUpdateClaim: (state) => (params = {}) => {\n            if (!params.query) {\n                params.query = null;\n            }\n            return state.ValsetUpdateClaim[JSON.stringify(params)] ?? {};\n        },\n        getTypeStructure: (state) => (type) => {\n            return state._Structure[type].fields;\n        }\n    },\n    actions: {\n        init({ dispatch, rootGetters }) {\n            console.log('init');\n            if (rootGetters['common/env/client']) {\n                rootGetters['common/env/client'].on('newblock', () => {\n                    dispatch('StoreUpdate');\n                });\n            }\n        },\n        resetState({ commit }) {\n            commit('RESET_STATE');\n        },\n        unsubscribe({ commit }, subscription) {\n            commit('UNSUBSCRIBE', subscription);\n        },\n        async StoreUpdate({ state, dispatch }) {\n            state._Subscriptions.forEach((subscription) => {\n                dispatch(subscription.action, subscription.payload);\n            });\n        },\n        async QueryParams({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryParams(query)).data : (await (await initQueryClient(rootGetters)).queryParams()).data;\n                commit('QUERY', { query: 'Params', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryParams', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getParams']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryParams', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryCurrentValset({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryCurrentValset(query)).data : (await (await initQueryClient(rootGetters)).queryCurrentValset()).data;\n                commit('QUERY', { query: 'CurrentValset', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryCurrentValset', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getCurrentValset']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryCurrentValset', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryValsetRequest({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryValsetRequest(query)).data : (await (await initQueryClient(rootGetters)).queryValsetRequest()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryValsetRequest({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'ValsetRequest', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValsetRequest', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValsetRequest']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryValsetRequest', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryValsetConfirm({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryValsetConfirm(query)).data : (await (await initQueryClient(rootGetters)).queryValsetConfirm()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryValsetConfirm({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'ValsetConfirm', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValsetConfirm', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValsetConfirm']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryValsetConfirm', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryValsetConfirmsByNonce({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryValsetConfirmsByNonce(key.nonce, query)).data : (await (await initQueryClient(rootGetters)).queryValsetConfirmsByNonce(key.nonce)).data;\n                commit('QUERY', { query: 'ValsetConfirmsByNonce', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryValsetConfirmsByNonce', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValsetConfirmsByNonce']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryValsetConfirmsByNonce', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryLastValsetRequests({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryLastValsetRequests(query)).data : (await (await initQueryClient(rootGetters)).queryLastValsetRequests()).data;\n                commit('QUERY', { query: 'LastValsetRequests', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLastValsetRequests', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLastValsetRequests']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryLastValsetRequests', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryLastPendingValsetRequestByAddr({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryLastPendingValsetRequestByAddr(query)).data : (await (await initQueryClient(rootGetters)).queryLastPendingValsetRequestByAddr()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryLastPendingValsetRequestByAddr({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'LastPendingValsetRequestByAddr', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLastPendingValsetRequestByAddr', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLastPendingValsetRequestByAddr']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryLastPendingValsetRequestByAddr', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryLastPendingBatchRequestByAddr({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryLastPendingBatchRequestByAddr(key.address, query)).data : (await (await initQueryClient(rootGetters)).queryLastPendingBatchRequestByAddr(key.address)).data;\n                commit('QUERY', { query: 'LastPendingBatchRequestByAddr', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLastPendingBatchRequestByAddr', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLastPendingBatchRequestByAddr']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryLastPendingBatchRequestByAddr', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryLastPendingLogicCallByAddr({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryLastPendingLogicCallByAddr(key.address, query)).data : (await (await initQueryClient(rootGetters)).queryLastPendingLogicCallByAddr(key.address)).data;\n                commit('QUERY', { query: 'LastPendingLogicCallByAddr', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLastPendingLogicCallByAddr', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLastPendingLogicCallByAddr']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryLastPendingLogicCallByAddr', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryLastEventNonceByAddr({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryLastEventNonceByAddr(key.address, query)).data : (await (await initQueryClient(rootGetters)).queryLastEventNonceByAddr(key.address)).data;\n                commit('QUERY', { query: 'LastEventNonceByAddr', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLastEventNonceByAddr', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLastEventNonceByAddr']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryLastEventNonceByAddr', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryBatchFees({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryBatchFees(query)).data : (await (await initQueryClient(rootGetters)).queryBatchFees()).data;\n                commit('QUERY', { query: 'BatchFees', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryBatchFees', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getBatchFees']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryBatchFees', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryOutgoingTxBatches({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryOutgoingTxBatches(query)).data : (await (await initQueryClient(rootGetters)).queryOutgoingTxBatches()).data;\n                commit('QUERY', { query: 'OutgoingTxBatches', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryOutgoingTxBatches', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getOutgoingTxBatches']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryOutgoingTxBatches', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryOutgoingLogicCalls({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryOutgoingLogicCalls(query)).data : (await (await initQueryClient(rootGetters)).queryOutgoingLogicCalls()).data;\n                commit('QUERY', { query: 'OutgoingLogicCalls', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryOutgoingLogicCalls', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getOutgoingLogicCalls']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryOutgoingLogicCalls', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryBatchRequestByNonce({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryBatchRequestByNonce(key.nonce, query)).data : (await (await initQueryClient(rootGetters)).queryBatchRequestByNonce(key.nonce)).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryBatchRequestByNonce(key.nonce, { ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'BatchRequestByNonce', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryBatchRequestByNonce', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getBatchRequestByNonce']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryBatchRequestByNonce', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryBatchConfirms({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryBatchConfirms(query)).data : (await (await initQueryClient(rootGetters)).queryBatchConfirms()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryBatchConfirms({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'BatchConfirms', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryBatchConfirms', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getBatchConfirms']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryBatchConfirms', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryLogicConfirms({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryLogicConfirms(query)).data : (await (await initQueryClient(rootGetters)).queryLogicConfirms()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryLogicConfirms({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'LogicConfirms', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryLogicConfirms', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getLogicConfirms']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryLogicConfirms', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryErc20ToDenom({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryErc20ToDenom(query)).data : (await (await initQueryClient(rootGetters)).queryErc20ToDenom()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryErc20ToDenom({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'Erc20ToDenom', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryErc20ToDenom', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getErc20ToDenom']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryErc20ToDenom', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryDenomToErc20({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryDenomToErc20(query)).data : (await (await initQueryClient(rootGetters)).queryDenomToErc20()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryDenomToErc20({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'DenomToErc20', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryDenomToErc20', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getDenomToErc20']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryDenomToErc20', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryGetDelegateKeyByValidator({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByValidator(query)).data : (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByValidator()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByValidator({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'GetDelegateKeyByValidator', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryGetDelegateKeyByValidator', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getGetDelegateKeyByValidator']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryGetDelegateKeyByValidator', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryGetDelegateKeyByEth({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByEth(query)).data : (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByEth()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByEth({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'GetDelegateKeyByEth', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryGetDelegateKeyByEth', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getGetDelegateKeyByEth']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryGetDelegateKeyByEth', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryGetDelegateKeyByOrchestrator({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByOrchestrator(query)).data : (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByOrchestrator()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryGetDelegateKeyByOrchestrator({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'GetDelegateKeyByOrchestrator', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryGetDelegateKeyByOrchestrator', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getGetDelegateKeyByOrchestrator']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryGetDelegateKeyByOrchestrator', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryGetPendingSendToEth({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryGetPendingSendToEth(query)).data : (await (await initQueryClient(rootGetters)).queryGetPendingSendToEth()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryGetPendingSendToEth({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'GetPendingSendToEth', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryGetPendingSendToEth', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getGetPendingSendToEth']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryGetPendingSendToEth', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryOrchestratorAddressAll({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryOrchestratorAddressAll(query)).data : (await (await initQueryClient(rootGetters)).queryOrchestratorAddressAll()).data;\n                commit('QUERY', { query: 'OrchestratorAddressAll', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryOrchestratorAddressAll', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getOrchestratorAddressAll']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryOrchestratorAddressAll', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async QueryCosmosToEthAll({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).queryCosmosToEthAll(query)).data : (await (await initQueryClient(rootGetters)).queryCosmosToEthAll()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).queryCosmosToEthAll({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'CosmosToEthAll', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'QueryCosmosToEthAll', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getCosmosToEthAll']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:QueryCosmosToEthAll', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async MsgValsetUpdateClaim({ commit, rootGetters, getters }, { options: { subscribe = false, all = false }, params: { ...key }, query = null }) {\n            try {\n                let value = query ? (await (await initQueryClient(rootGetters)).msgValsetUpdateClaim(query)).data : (await (await initQueryClient(rootGetters)).msgValsetUpdateClaim()).data;\n                while (all && value.pagination && value.pagination.nextKey != null) {\n                    let next_values = (await (await initQueryClient(rootGetters)).msgValsetUpdateClaim({ ...query, 'pagination.key': value.pagination.nextKey })).data;\n                    for (let prop of Object.keys(next_values)) {\n                        if (Array.isArray(next_values[prop])) {\n                            value[prop] = [...value[prop], ...next_values[prop]];\n                        }\n                        else {\n                            value[prop] = next_values[prop];\n                        }\n                    }\n                }\n                commit('QUERY', { query: 'ValsetUpdateClaim', key: { params: { ...key }, query }, value });\n                if (subscribe)\n                    commit('SUBSCRIBE', { action: 'MsgValsetUpdateClaim', payload: { options: { all }, params: { ...key }, query } });\n                return getters['getValsetUpdateClaim']({ params: { ...key }, query }) ?? {};\n            }\n            catch (e) {\n                console.error(new SpVuexError('QueryClient:MsgValsetUpdateClaim', 'API Node Unavailable. Could not perform query.'));\n                return {};\n            }\n        },\n        async sendMsgCreateOrchestratorAddress({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateOrchestratorAddress(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateOrchestratorAddress:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgWithdrawClaim({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgWithdrawClaim(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgWithdrawClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgWithdrawClaim:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgValsetConfirm({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgValsetConfirm(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgValsetConfirm:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgValsetConfirm:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgConfirmLogicCall({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgConfirmLogicCall(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgConfirmLogicCall:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgConfirmLogicCall:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgCreateCosmosToEth({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateCosmosToEth(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateCosmosToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateCosmosToEth:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgValsetUpdatedClaim({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgValsetUpdatedClaim(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgValsetUpdatedClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgValsetUpdatedClaim:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgDeleteCosmosToEth({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDeleteCosmosToEth(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDeleteCosmosToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeleteCosmosToEth:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgSetOrchestratorAddress({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSetOrchestratorAddress(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSetOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSetOrchestratorAddress:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgConfirmBatch({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgConfirmBatch(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgConfirmBatch:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgConfirmBatch:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgUpdateCosmosToEth({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgUpdateCosmosToEth(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgUpdateCosmosToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUpdateCosmosToEth:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgUpdateOrchestratorAddress({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgUpdateOrchestratorAddress(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgUpdateOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUpdateOrchestratorAddress:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgLogicCallExecutedClaim({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgLogicCallExecutedClaim(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgLogicCallExecutedClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgLogicCallExecutedClaim:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgDeleteOrchestratorAddress({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDeleteOrchestratorAddress(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDeleteOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeleteOrchestratorAddress:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgSendToEth({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSendToEth(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSendToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSendToEth:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgErc20DeployedClaim({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgErc20DeployedClaim(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgErc20DeployedClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgErc20DeployedClaim:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgCancelSendToEth({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCancelSendToEth(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCancelSendToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCancelSendToEth:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgRequestBatch({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgRequestBatch(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgRequestBatch:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgRequestBatch:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async sendMsgDepositClaim({ rootGetters }, { value, fee, memo }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDepositClaim(value);\n                const result = await (await initTxClient(rootGetters)).signAndBroadcast([msg], { fee: { amount: fee,\n                        gas: \"200000\" }, memo });\n                return result;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDepositClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDepositClaim:Send', 'Could not broadcast Tx.');\n                }\n            }\n        },\n        async MsgCreateOrchestratorAddress({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateOrchestratorAddress(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateOrchestratorAddress:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgWithdrawClaim({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgWithdrawClaim(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgWithdrawClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgWithdrawClaim:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgValsetConfirm({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgValsetConfirm(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgValsetConfirm:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgValsetConfirm:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgConfirmLogicCall({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgConfirmLogicCall(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgConfirmLogicCall:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgConfirmLogicCall:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgCreateCosmosToEth({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCreateCosmosToEth(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCreateCosmosToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCreateCosmosToEth:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgValsetUpdatedClaim({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgValsetUpdatedClaim(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgValsetUpdatedClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgValsetUpdatedClaim:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgDeleteCosmosToEth({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDeleteCosmosToEth(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDeleteCosmosToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeleteCosmosToEth:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgSetOrchestratorAddress({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSetOrchestratorAddress(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSetOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSetOrchestratorAddress:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgConfirmBatch({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgConfirmBatch(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgConfirmBatch:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgConfirmBatch:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgUpdateCosmosToEth({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgUpdateCosmosToEth(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgUpdateCosmosToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUpdateCosmosToEth:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgUpdateOrchestratorAddress({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgUpdateOrchestratorAddress(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgUpdateOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgUpdateOrchestratorAddress:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgLogicCallExecutedClaim({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgLogicCallExecutedClaim(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgLogicCallExecutedClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgLogicCallExecutedClaim:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgDeleteOrchestratorAddress({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDeleteOrchestratorAddress(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDeleteOrchestratorAddress:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDeleteOrchestratorAddress:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgSendToEth({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgSendToEth(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgSendToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgSendToEth:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgErc20DeployedClaim({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgErc20DeployedClaim(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgErc20DeployedClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgErc20DeployedClaim:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgCancelSendToEth({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgCancelSendToEth(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgCancelSendToEth:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgCancelSendToEth:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgRequestBatch({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgRequestBatch(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgRequestBatch:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgRequestBatch:Create', 'Could not create message.');\n                }\n            }\n        },\n        async MsgDepositClaim({ rootGetters }, { value }) {\n            try {\n                const msg = await (await initTxClient(rootGetters)).msgDepositClaim(value);\n                return msg;\n            }\n            catch (e) {\n                if (e.toString() == 'wallet is required') {\n                    throw new SpVuexError('TxClient:MsgDepositClaim:Init', 'Could not initialize signing client. Wallet is required.');\n                }\n                else {\n                    throw new SpVuexError('TxClient:MsgDepositClaim:Create', 'Could not create message.');\n                }\n            }\n        },\n    }\n};\n"]}]}