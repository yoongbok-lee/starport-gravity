{"remainingRequest":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js!/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/module/rest.js","dependencies":[{"path":"/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/module/rest.js","mtime":1620801165443},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/ubuntu/starport-gravity/vue/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/ubuntu/starport-gravity/vue/src/store/generated/althea-net/cosmos-gravity-bridge/gravity.v1/module/rest.js"],"names":["ContentType","HttpClient","apiConfig","baseUrl","securityData","securityWorker","abortControllers","Map","baseApiParams","credentials","headers","redirect","referrerPolicy","setSecurityData","data","contentFormatters","Json","input","JSON","stringify","FormData","Object","keys","reduce","key","append","UrlEncoded","toQueryString","createAbortSignal","cancelToken","has","abortController","get","signal","AbortController","set","abortRequest","abort","request","body","secure","path","type","query","format","params","secureParams","requestParams","mergeRequestParams","queryString","payloadFormatter","fetch","then","response","r","error","ok","e","assign","value","encodeURIComponent","Array","isArray","join","rawQuery","filter","map","addQueryParam","params1","params2","Api","arguments","msgCancelSendToEth","method","msgConfirmLogicCall","msgConfirmBatch","queryCosmosToEthAll","msgDepositClaim","msgErc20DeployedClaim","msgLogicCallExecutedClaim","queryOrchestratorAddressAll","msgRequestBatch","msgSendToEth","msgSetOrchestratorAddress","msgValsetConfirm","msgValsetUpdateClaim","msgWithdrawClaim","queryBatchConfirms","queryOutgoingLogicCalls","queryOutgoingTxBatches","queryLastPendingBatchRequestByAddr","address","queryBatchRequestByNonce","nonce","queryBatchFees","queryValsetConfirmsByNonce","queryDenomToErc20","queryErc20ToDenom","queryLogicConfirms","queryLastPendingLogicCallByAddr","queryLastEventNonceByAddr","queryParams","queryGetDelegateKeyByEth","queryGetDelegateKeyByOrchestrator","queryGetDelegateKeyByValidator","queryGetPendingSendToEth","queryValsetRequest","queryValsetConfirm","queryCurrentValset","queryLastPendingValsetRequestByAddr","queryLastValsetRequests"],"mappings":"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","sourcesContent":["/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\nexport var ContentType;\n(function (ContentType) {\n    ContentType[\"Json\"] = \"application/json\";\n    ContentType[\"FormData\"] = \"multipart/form-data\";\n    ContentType[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n})(ContentType || (ContentType = {}));\nexport class HttpClient {\n    constructor(apiConfig = {}) {\n        this.baseUrl = \"\";\n        this.securityData = null;\n        this.securityWorker = null;\n        this.abortControllers = new Map();\n        this.baseApiParams = {\n            credentials: \"same-origin\",\n            headers: {},\n            redirect: \"follow\",\n            referrerPolicy: \"no-referrer\",\n        };\n        this.setSecurityData = (data) => {\n            this.securityData = data;\n        };\n        this.contentFormatters = {\n            [ContentType.Json]: (input) => input !== null && (typeof input === \"object\" || typeof input === \"string\") ? JSON.stringify(input) : input,\n            [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((data, key) => {\n                data.append(key, input[key]);\n                return data;\n            }, new FormData()),\n            [ContentType.UrlEncoded]: (input) => this.toQueryString(input),\n        };\n        this.createAbortSignal = (cancelToken) => {\n            if (this.abortControllers.has(cancelToken)) {\n                const abortController = this.abortControllers.get(cancelToken);\n                if (abortController) {\n                    return abortController.signal;\n                }\n                return void 0;\n            }\n            const abortController = new AbortController();\n            this.abortControllers.set(cancelToken, abortController);\n            return abortController.signal;\n        };\n        this.abortRequest = (cancelToken) => {\n            const abortController = this.abortControllers.get(cancelToken);\n            if (abortController) {\n                abortController.abort();\n                this.abortControllers.delete(cancelToken);\n            }\n        };\n        this.request = ({ body, secure, path, type, query, format = \"json\", baseUrl, cancelToken, ...params }) => {\n            const secureParams = (secure && this.securityWorker && this.securityWorker(this.securityData)) || {};\n            const requestParams = this.mergeRequestParams(params, secureParams);\n            const queryString = query && this.toQueryString(query);\n            const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n            return fetch(`${baseUrl || this.baseUrl || \"\"}${path}${queryString ? `?${queryString}` : \"\"}`, {\n                ...requestParams,\n                headers: {\n                    ...(type && type !== ContentType.FormData ? { \"Content-Type\": type } : {}),\n                    ...(requestParams.headers || {}),\n                },\n                signal: cancelToken ? this.createAbortSignal(cancelToken) : void 0,\n                body: typeof body === \"undefined\" || body === null ? null : payloadFormatter(body),\n            }).then(async (response) => {\n                const r = response;\n                r.data = null;\n                r.error = null;\n                const data = await response[format]()\n                    .then((data) => {\n                    if (r.ok) {\n                        r.data = data;\n                    }\n                    else {\n                        r.error = data;\n                    }\n                    return r;\n                })\n                    .catch((e) => {\n                    r.error = e;\n                    return r;\n                });\n                if (cancelToken) {\n                    this.abortControllers.delete(cancelToken);\n                }\n                if (!response.ok)\n                    throw data;\n                return data;\n            });\n        };\n        Object.assign(this, apiConfig);\n    }\n    addQueryParam(query, key) {\n        const value = query[key];\n        return (encodeURIComponent(key) +\n            \"=\" +\n            encodeURIComponent(Array.isArray(value) ? value.join(\",\") : typeof value === \"number\" ? value : `${value}`));\n    }\n    toQueryString(rawQuery) {\n        const query = rawQuery || {};\n        const keys = Object.keys(query).filter((key) => \"undefined\" !== typeof query[key]);\n        return keys\n            .map((key) => typeof query[key] === \"object\" && !Array.isArray(query[key])\n            ? this.toQueryString(query[key])\n            : this.addQueryParam(query, key))\n            .join(\"&\");\n    }\n    addQueryParams(rawQuery) {\n        const queryString = this.toQueryString(rawQuery);\n        return queryString ? `?${queryString}` : \"\";\n    }\n    mergeRequestParams(params1, params2) {\n        return {\n            ...this.baseApiParams,\n            ...params1,\n            ...(params2 || {}),\n            headers: {\n                ...(this.baseApiParams.headers || {}),\n                ...(params1.headers || {}),\n                ...((params2 && params2.headers) || {}),\n            },\n        };\n    }\n}\n/**\n * @title gravity/query.proto\n * @version version not set\n */\nexport class Api extends HttpClient {\n    constructor() {\n        super(...arguments);\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgCancelSendToEth\n         * @request POST:/gravity/v1/cancel_send_to_eth\n         */\n        this.msgCancelSendToEth = (params = {}) => this.request({\n            path: `/gravity/v1/cancel_send_to_eth`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgConfirmLogicCall\n         * @request POST:/gravity/v1/confim_logic\n         */\n        this.msgConfirmLogicCall = (params = {}) => this.request({\n            path: `/gravity/v1/confim_logic`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgConfirmBatch\n         * @request POST:/gravity/v1/confirm_batch\n         */\n        this.msgConfirmBatch = (params = {}) => this.request({\n            path: `/gravity/v1/confirm_batch`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryCosmosToEthAll\n         * @request GET:/gravity/v1/cosmosToEth\n         */\n        this.queryCosmosToEthAll = (query, params = {}) => this.request({\n            path: `/gravity/v1/cosmosToEth`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgDepositClaim\n         * @request POST:/gravity/v1/deposit_claim\n         */\n        this.msgDepositClaim = (params = {}) => this.request({\n            path: `/gravity/v1/deposit_claim`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgErc20DeployedClaim\n         * @request POST:/gravity/v1/erc20_deployed_claim\n         */\n        this.msgErc20DeployedClaim = (params = {}) => this.request({\n            path: `/gravity/v1/erc20_deployed_claim`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgLogicCallExecutedClaim\n         * @request POST:/gravity/v1/logic_call_executed_claim\n         */\n        this.msgLogicCallExecutedClaim = (params = {}) => this.request({\n            path: `/gravity/v1/logic_call_executed_claim`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryOrchestratorAddressAll\n         * @request GET:/gravity/v1/orchestratorAddress\n         */\n        this.queryOrchestratorAddressAll = (params = {}) => this.request({\n            path: `/gravity/v1/orchestratorAddress`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgRequestBatch\n         * @request POST:/gravity/v1/request_batch\n         */\n        this.msgRequestBatch = (params = {}) => this.request({\n            path: `/gravity/v1/request_batch`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgSendToEth\n         * @request POST:/gravity/v1/send_to_eth\n         */\n        this.msgSendToEth = (params = {}) => this.request({\n            path: `/gravity/v1/send_to_eth`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgSetOrchestratorAddress\n         * @request POST:/gravity/v1/set_orchestrator_address\n         */\n        this.msgSetOrchestratorAddress = (params = {}) => this.request({\n            path: `/gravity/v1/set_orchestrator_address`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgValsetConfirm\n         * @request POST:/gravity/v1/valset_confirm\n         */\n        this.msgValsetConfirm = (params = {}) => this.request({\n            path: `/gravity/v1/valset_confirm`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgValsetUpdateClaim\n         * @request POST:/gravity/v1/valset_updated_claim\n         */\n        this.msgValsetUpdateClaim = (params = {}) => this.request({\n            path: `/gravity/v1/valset_updated_claim`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Msg\n         * @name MsgWithdrawClaim\n         * @request POST:/gravity/v1/withdraw_claim\n         */\n        this.msgWithdrawClaim = (params = {}) => this.request({\n            path: `/gravity/v1/withdraw_claim`,\n            method: \"POST\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryBatchConfirms\n         * @request GET:/gravity/v1beta/batch/confirms\n         */\n        this.queryBatchConfirms = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/batch/confirms`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryOutgoingLogicCalls\n         * @request GET:/gravity/v1beta/batch/outgoinglogic\n         */\n        this.queryOutgoingLogicCalls = (params = {}) => this.request({\n            path: `/gravity/v1beta/batch/outgoinglogic`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryOutgoingTxBatches\n         * @request GET:/gravity/v1beta/batch/outgoingtx\n         */\n        this.queryOutgoingTxBatches = (params = {}) => this.request({\n            path: `/gravity/v1beta/batch/outgoingtx`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryLastPendingBatchRequestByAddr\n         * @request GET:/gravity/v1beta/batch/{address}\n         */\n        this.queryLastPendingBatchRequestByAddr = (address, params = {}) => this.request({\n            path: `/gravity/v1beta/batch/${address}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryBatchRequestByNonce\n         * @request GET:/gravity/v1beta/batch/{nonce}\n         */\n        this.queryBatchRequestByNonce = (nonce, query, params = {}) => this.request({\n            path: `/gravity/v1beta/batch/${nonce}`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryBatchFees\n         * @request GET:/gravity/v1beta/batchfees\n         */\n        this.queryBatchFees = (params = {}) => this.request({\n            path: `/gravity/v1beta/batchfees`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryValsetConfirmsByNonce\n         * @request GET:/gravity/v1beta/confirms/{nonce}\n         */\n        this.queryValsetConfirmsByNonce = (nonce, params = {}) => this.request({\n            path: `/gravity/v1beta/confirms/${nonce}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryDenomToErc20\n         * @request GET:/gravity/v1beta/cosmos_originated/denom_to_erc20\n         */\n        this.queryDenomToErc20 = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/cosmos_originated/denom_to_erc20`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryErc20ToDenom\n         * @request GET:/gravity/v1beta/cosmos_originated/erc20_to_denom\n         */\n        this.queryErc20ToDenom = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/cosmos_originated/erc20_to_denom`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryLogicConfirms\n         * @request GET:/gravity/v1beta/logic/confirms\n         */\n        this.queryLogicConfirms = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/logic/confirms`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryLastPendingLogicCallByAddr\n         * @request GET:/gravity/v1beta/logic/{address}\n         */\n        this.queryLastPendingLogicCallByAddr = (address, params = {}) => this.request({\n            path: `/gravity/v1beta/logic/${address}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryLastEventNonceByAddr\n         * @request GET:/gravity/v1beta/oracle/eventnonce/{address}\n         */\n        this.queryLastEventNonceByAddr = (address, params = {}) => this.request({\n            path: `/gravity/v1beta/oracle/eventnonce/${address}`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryParams\n         * @summary Deployments queries deployments\n         * @request GET:/gravity/v1beta/params\n         */\n        this.queryParams = (params = {}) => this.request({\n            path: `/gravity/v1beta/params`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryGetDelegateKeyByEth\n         * @request GET:/gravity/v1beta/query_delegate_keys_by_eth\n         */\n        this.queryGetDelegateKeyByEth = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/query_delegate_keys_by_eth`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryGetDelegateKeyByOrchestrator\n         * @request GET:/gravity/v1beta/query_delegate_keys_by_orchestrator\n         */\n        this.queryGetDelegateKeyByOrchestrator = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/query_delegate_keys_by_orchestrator`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryGetDelegateKeyByValidator\n         * @request GET:/gravity/v1beta/query_delegate_keys_by_validator\n         */\n        this.queryGetDelegateKeyByValidator = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/query_delegate_keys_by_validator`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryGetPendingSendToEth\n         * @request GET:/gravity/v1beta/query_pending_send_to_eth\n         */\n        this.queryGetPendingSendToEth = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/query_pending_send_to_eth`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryValsetRequest\n         * @request GET:/gravity/v1beta/valset\n         */\n        this.queryValsetRequest = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/valset`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryValsetConfirm\n         * @request GET:/gravity/v1beta/valset/confirm\n         */\n        this.queryValsetConfirm = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/valset/confirm`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryCurrentValset\n         * @request GET:/gravity/v1beta/valset/current\n         */\n        this.queryCurrentValset = (params = {}) => this.request({\n            path: `/gravity/v1beta/valset/current`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryLastPendingValsetRequestByAddr\n         * @request GET:/gravity/v1beta/valset/last\n         */\n        this.queryLastPendingValsetRequestByAddr = (query, params = {}) => this.request({\n            path: `/gravity/v1beta/valset/last`,\n            method: \"GET\",\n            query: query,\n            format: \"json\",\n            ...params,\n        });\n        /**\n         * No description\n         *\n         * @tags Query\n         * @name QueryLastValsetRequests\n         * @request GET:/gravity/v1beta/valset/requests\n         */\n        this.queryLastValsetRequests = (params = {}) => this.request({\n            path: `/gravity/v1beta/valset/requests`,\n            method: \"GET\",\n            format: \"json\",\n            ...params,\n        });\n    }\n}\n"]}]}